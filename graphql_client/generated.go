// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse struct {
	Typename string                                                                 `json:"__typename"`
	Metric   CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse) GetTypename() string {
	return v.Typename
}

// GetMetric returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse) GetMetric() CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric {
	return v.Metric
}

// CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric struct {
	metric `json:"-"`
}

// GetId returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetId() string {
	return v.metric.Id
}

// GetDataPool returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDataPool() metricDataPool {
	return v.metric.DataPool
}

// GetDimensions returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDimensions() []metricDimensionsDimension {
	return v.metric.Dimensions
}

// GetTimestamp returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetTimestamp() metricTimestampDimension {
	return v.metric.Timestamp
}

// GetMeasure returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetMeasure() metricMeasureDimension {
	return v.metric.Measure
}

// GetSettings returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetSettings() metricSettingsMetricSettings {
	return v.metric.Settings
}

// GetType returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetType() MetricType {
	return v.metric.Type
}

// GetUniqueName returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetUniqueName() string {
	return v.metric.commonMetric.UniqueName
}

// GetDescription returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDescription() string {
	return v.metric.commonMetric.Description
}

// GetAccount returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetAccount() commonAccount {
	return v.metric.commonMetric.Account
}

// GetEnvironment returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetEnvironment() commonEnvironment {
	return v.metric.commonMetric.Environment
}

// GetCreatedAt returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.metric.commonMetric.CreatedAt
}

// GetModifiedAt returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.metric.commonMetric.ModifiedAt
}

// GetCreatedBy returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetCreatedBy() string {
	return v.metric.commonMetric.CreatedBy
}

// GetModifiedBy returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetModifiedBy() string {
	return v.metric.commonMetric.ModifiedBy
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric, error) {
	var retval __premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// Settings to create a new count distinct Metric.
type CreateCountDistinctMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name.
	UniqueName string `json:"uniqueName"`
	// The Metric's description.
	Description string `json:"description"`
	// The Metric's filters. Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included.
	Filters []FilterInput `json:"filters"`
	// The Metric's dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []DimensionInput `json:"dimensions"`
	// The dimension over which the count distinct is going to be performed.
	Dimension DimensionInput `json:"dimension"`
	// Employee-only API for overriding a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetDataPool returns CreateCountDistinctMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateCountDistinctMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateCountDistinctMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDescription() string { return v.Description }

// GetFilters returns CreateCountDistinctMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetFilters() []FilterInput { return v.Filters }

// GetDimensions returns CreateCountDistinctMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDimensions() []DimensionInput { return v.Dimensions }

// GetDimension returns CreateCountDistinctMetricInput.Dimension, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDimension() DimensionInput { return v.Dimension }

// GetQuerySource returns CreateCountDistinctMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// CreateCountDistinctMetricResponse is returned by CreateCountDistinctMetric on success.
type CreateCountDistinctMetricResponse struct {
	CreateCountDistinctMetric CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse `json:"createCountDistinctMetric"`
}

// GetCreateCountDistinctMetric returns CreateCountDistinctMetricResponse.CreateCountDistinctMetric, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricResponse) GetCreateCountDistinctMetric() CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse {
	return v.CreateCountDistinctMetric
}

// CreateCountMetricCreateCountMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type CreateCountMetricCreateCountMetricMetricResponse struct {
	Typename string                                                 `json:"__typename"`
	Metric   CreateCountMetricCreateCountMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateCountMetricCreateCountMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponse) GetTypename() string { return v.Typename }

// GetMetric returns CreateCountMetricCreateCountMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponse) GetMetric() CreateCountMetricCreateCountMetricMetricResponseMetric {
	return v.Metric
}

// CreateCountMetricCreateCountMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type CreateCountMetricCreateCountMetricMetricResponseMetric struct {
	metric `json:"-"`
}

// GetId returns CreateCountMetricCreateCountMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetId() string { return v.metric.Id }

// GetDataPool returns CreateCountMetricCreateCountMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDataPool() metricDataPool {
	return v.metric.DataPool
}

// GetDimensions returns CreateCountMetricCreateCountMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDimensions() []metricDimensionsDimension {
	return v.metric.Dimensions
}

// GetTimestamp returns CreateCountMetricCreateCountMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetTimestamp() metricTimestampDimension {
	return v.metric.Timestamp
}

// GetMeasure returns CreateCountMetricCreateCountMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetMeasure() metricMeasureDimension {
	return v.metric.Measure
}

// GetSettings returns CreateCountMetricCreateCountMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetSettings() metricSettingsMetricSettings {
	return v.metric.Settings
}

// GetType returns CreateCountMetricCreateCountMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetType() MetricType {
	return v.metric.Type
}

// GetUniqueName returns CreateCountMetricCreateCountMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetUniqueName() string {
	return v.metric.commonMetric.UniqueName
}

// GetDescription returns CreateCountMetricCreateCountMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDescription() string {
	return v.metric.commonMetric.Description
}

// GetAccount returns CreateCountMetricCreateCountMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetAccount() commonAccount {
	return v.metric.commonMetric.Account
}

// GetEnvironment returns CreateCountMetricCreateCountMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetEnvironment() commonEnvironment {
	return v.metric.commonMetric.Environment
}

// GetCreatedAt returns CreateCountMetricCreateCountMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.metric.commonMetric.CreatedAt
}

// GetModifiedAt returns CreateCountMetricCreateCountMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.metric.commonMetric.ModifiedAt
}

// GetCreatedBy returns CreateCountMetricCreateCountMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetCreatedBy() string {
	return v.metric.commonMetric.CreatedBy
}

// GetModifiedBy returns CreateCountMetricCreateCountMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetModifiedBy() string {
	return v.metric.commonMetric.ModifiedBy
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCountMetricCreateCountMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCountMetricCreateCountMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCountMetricCreateCountMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateCountMetricCreateCountMetricMetricResponseMetric, error) {
	var retval __premarshalCreateCountMetricCreateCountMetricMetricResponseMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateCountMetricCreateCountMetricMetricResponseMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// Settings to create a new count Metric.
type CreateCountMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name.
	UniqueName string `json:"uniqueName"`
	// The Metric's description.
	Description string `json:"description"`
	// The Metric's filters. Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included.
	Filters []FilterInput `json:"filters"`
	// The Metric's dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []DimensionInput `json:"dimensions"`
	// Employee-only API for overriding a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetDataPool returns CreateCountMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateCountMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateCountMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDescription() string { return v.Description }

// GetFilters returns CreateCountMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetFilters() []FilterInput { return v.Filters }

// GetDimensions returns CreateCountMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDimensions() []DimensionInput { return v.Dimensions }

// GetQuerySource returns CreateCountMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// CreateCountMetricResponse is returned by CreateCountMetric on success.
type CreateCountMetricResponse struct {
	CreateCountMetric CreateCountMetricCreateCountMetricMetricResponse `json:"createCountMetric"`
}

// GetCreateCountMetric returns CreateCountMetricResponse.CreateCountMetric, and is useful for accessing the field via an interface.
func (v *CreateCountMetricResponse) GetCreateCountMetric() CreateCountMetricCreateCountMetricMetricResponse {
	return v.CreateCountMetric
}

// CreateDataPoolCreateDataPoolDataPoolOrFailureResponse includes the requested fields of the GraphQL interface DataPoolOrFailureResponse.
//
// CreateDataPoolCreateDataPoolDataPoolOrFailureResponse is implemented by the following types:
// CreateDataPoolCreateDataPoolDataPoolResponse
// CreateDataPoolCreateDataPoolFailureResponse
type CreateDataPoolCreateDataPoolDataPoolOrFailureResponse interface {
	implementsGraphQLInterfaceCreateDataPoolCreateDataPoolDataPoolOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponse) implementsGraphQLInterfaceCreateDataPoolCreateDataPoolDataPoolOrFailureResponse() {
}
func (v *CreateDataPoolCreateDataPoolFailureResponse) implementsGraphQLInterfaceCreateDataPoolCreateDataPoolDataPoolOrFailureResponse() {
}

func __unmarshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(b []byte, v *CreateDataPoolCreateDataPoolDataPoolOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataPoolResponse":
		*v = new(CreateDataPoolCreateDataPoolDataPoolResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(CreateDataPoolCreateDataPoolFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataPoolOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateDataPoolCreateDataPoolDataPoolOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(v *CreateDataPoolCreateDataPoolDataPoolOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateDataPoolCreateDataPoolDataPoolResponse:
		typename = "DataPoolResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateDataPoolCreateDataPoolDataPoolResponse
		}{typename, v}
		return json.Marshal(result)
	case *CreateDataPoolCreateDataPoolFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateDataPoolCreateDataPoolFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateDataPoolCreateDataPoolDataPoolOrFailureResponse: "%T"`, v)
	}
}

// CreateDataPoolCreateDataPoolDataPoolResponse includes the requested fields of the GraphQL type DataPoolResponse.
type CreateDataPoolCreateDataPoolDataPoolResponse struct {
	Typename string                                               `json:"__typename"`
	DataPool CreateDataPoolCreateDataPoolDataPoolResponseDataPool `json:"dataPool"`
}

// GetTypename returns CreateDataPoolCreateDataPoolDataPoolResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponse) GetTypename() string { return v.Typename }

// GetDataPool returns CreateDataPoolCreateDataPoolDataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponse) GetDataPool() CreateDataPoolCreateDataPoolDataPoolResponseDataPool {
	return v.DataPool
}

// CreateDataPoolCreateDataPoolDataPoolResponseDataPool includes the requested fields of the GraphQL type DataPool.
type CreateDataPoolCreateDataPoolDataPoolResponseDataPool struct {
	dataPool `json:"-"`
}

// GetId returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Id, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetId() string { return v.dataPool.Id }

// GetDataSource returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetDataSource() dataPoolDataSource {
	return v.dataPool.DataSource
}

// GetStatus returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Status, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetStatus() DataPoolStatus {
	return v.dataPool.Status
}

// GetError returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Error, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetError() dataPoolError {
	return v.dataPool.Error
}

// GetTable returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Table, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetTable() string {
	return v.dataPool.Table
}

// GetTimestamp returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetTimestamp() dataPoolTimestampDimension {
	return v.dataPool.Timestamp
}

// GetColumns returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Columns, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetColumns() dataPoolColumnsColumnConnection {
	return v.dataPool.Columns
}

// GetAvailableMeasures returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetAvailableMeasures() dataPoolAvailableMeasuresColumnConnection {
	return v.dataPool.AvailableMeasures
}

// GetSetupTasks returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetSetupTasks() []dataPoolSetupTasksDataPoolSetupTask {
	return v.dataPool.SetupTasks
}

// GetSyncs returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetSyncs() dataPoolSyncsSyncConnection {
	return v.dataPool.Syncs
}

// GetUniqueName returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetUniqueName() string {
	return v.dataPool.commonDataPool.UniqueName
}

// GetDescription returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetDescription() string {
	return v.dataPool.commonDataPool.Description
}

// GetAccount returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Account, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetAccount() commonAccount {
	return v.dataPool.commonDataPool.Account
}

// GetEnvironment returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Environment, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetEnvironment() commonEnvironment {
	return v.dataPool.commonDataPool.Environment
}

// GetCreatedAt returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetCreatedAt() time.Time {
	return v.dataPool.commonDataPool.CreatedAt
}

// GetModifiedAt returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetModifiedAt() time.Time {
	return v.dataPool.commonDataPool.ModifiedAt
}

// GetCreatedBy returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetCreatedBy() string {
	return v.dataPool.commonDataPool.CreatedBy
}

// GetModifiedBy returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetModifiedBy() string {
	return v.dataPool.commonDataPool.ModifiedBy
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolCreateDataPoolDataPoolResponseDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolCreateDataPoolDataPoolResponseDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataPoolCreateDataPoolDataPoolResponseDataPool struct {
	Id string `json:"id"`

	DataSource dataPoolDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error dataPoolError `json:"error"`

	Table string `json:"table"`

	Timestamp dataPoolTimestampDimension `json:"timestamp"`

	Columns dataPoolColumnsColumnConnection `json:"columns"`

	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs dataPoolSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) __premarshalJSON() (*__premarshalCreateDataPoolCreateDataPoolDataPoolResponseDataPool, error) {
	var retval __premarshalCreateDataPoolCreateDataPoolDataPoolResponseDataPool

	retval.Id = v.dataPool.Id
	retval.DataSource = v.dataPool.DataSource
	retval.Status = v.dataPool.Status
	retval.Error = v.dataPool.Error
	retval.Table = v.dataPool.Table
	retval.Timestamp = v.dataPool.Timestamp
	retval.Columns = v.dataPool.Columns
	retval.AvailableMeasures = v.dataPool.AvailableMeasures
	retval.SetupTasks = v.dataPool.SetupTasks
	retval.Syncs = v.dataPool.Syncs
	retval.UniqueName = v.dataPool.commonDataPool.UniqueName
	retval.Description = v.dataPool.commonDataPool.Description
	retval.Account = v.dataPool.commonDataPool.Account
	retval.Environment = v.dataPool.commonDataPool.Environment
	retval.CreatedAt = v.dataPool.commonDataPool.CreatedAt
	retval.ModifiedAt = v.dataPool.commonDataPool.ModifiedAt
	retval.CreatedBy = v.dataPool.commonDataPool.CreatedBy
	retval.ModifiedBy = v.dataPool.commonDataPool.ModifiedBy
	return &retval, nil
}

// CreateDataPoolCreateDataPoolFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type CreateDataPoolCreateDataPoolFailureResponse struct {
	Typename string                                           `json:"__typename"`
	Error    CreateDataPoolCreateDataPoolFailureResponseError `json:"error"`
}

// GetTypename returns CreateDataPoolCreateDataPoolFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponse) GetTypename() string { return v.Typename }

// GetError returns CreateDataPoolCreateDataPoolFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponse) GetError() CreateDataPoolCreateDataPoolFailureResponseError {
	return v.Error
}

// CreateDataPoolCreateDataPoolFailureResponseError includes the requested fields of the GraphQL type Error.
type CreateDataPoolCreateDataPoolFailureResponseError struct {
	gqlError `json:"-"`
}

// GetCode returns CreateDataPoolCreateDataPoolFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponseError) GetCode() int { return v.gqlError.Code }

// GetMessage returns CreateDataPoolCreateDataPoolFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponseError) GetMessage() string {
	return v.gqlError.Message
}

func (v *CreateDataPoolCreateDataPoolFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolCreateDataPoolFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolCreateDataPoolFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.gqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataPoolCreateDataPoolFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *CreateDataPoolCreateDataPoolFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolCreateDataPoolFailureResponseError) __premarshalJSON() (*__premarshalCreateDataPoolCreateDataPoolFailureResponseError, error) {
	var retval __premarshalCreateDataPoolCreateDataPoolFailureResponseError

	retval.Code = v.gqlError.Code
	retval.Message = v.gqlError.Message
	return &retval, nil
}

type CreateDataPoolInput struct {
	DataSource          IdOrUniqueName `json:"dataSource"`
	Table               string         `json:"table"`
	Timestamp           DimensionInput `json:"timestamp"`
	UniqueName          string         `json:"uniqueName"`
	Description         string         `json:"description"`
	DataRetentionInDays int            `json:"dataRetentionInDays"`
	// Employee-only API for overriding a Data Pool's syncDestination.
	SyncDestination TableLocationInput `json:"syncDestination"`
}

// GetDataSource returns CreateDataPoolInput.DataSource, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetDataSource() IdOrUniqueName { return v.DataSource }

// GetTable returns CreateDataPoolInput.Table, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetTable() string { return v.Table }

// GetTimestamp returns CreateDataPoolInput.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetTimestamp() DimensionInput { return v.Timestamp }

// GetUniqueName returns CreateDataPoolInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateDataPoolInput.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetDescription() string { return v.Description }

// GetDataRetentionInDays returns CreateDataPoolInput.DataRetentionInDays, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetDataRetentionInDays() int { return v.DataRetentionInDays }

// GetSyncDestination returns CreateDataPoolInput.SyncDestination, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetSyncDestination() TableLocationInput { return v.SyncDestination }

// CreateDataPoolResponse is returned by CreateDataPool on success.
type CreateDataPoolResponse struct {
	CreateDataPool CreateDataPoolCreateDataPoolDataPoolOrFailureResponse `json:"-"`
}

// GetCreateDataPool returns CreateDataPoolResponse.CreateDataPool, and is useful for accessing the field via an interface.
func (v *CreateDataPoolResponse) GetCreateDataPool() CreateDataPoolCreateDataPoolDataPoolOrFailureResponse {
	return v.CreateDataPool
}

func (v *CreateDataPoolResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolResponse
		CreateDataPool json.RawMessage `json:"createDataPool"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateDataPool
		src := firstPass.CreateDataPool
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CreateDataPoolResponse.CreateDataPool: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateDataPoolResponse struct {
	CreateDataPool json.RawMessage `json:"createDataPool"`
}

func (v *CreateDataPoolResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolResponse) __premarshalJSON() (*__premarshalCreateDataPoolResponse, error) {
	var retval __premarshalCreateDataPoolResponse

	{

		dst := &retval.CreateDataPool
		src := v.CreateDataPool
		var err error
		*dst, err = __marshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateDataPoolResponse.CreateDataPool: %w", err)
		}
	}
	return &retval, nil
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse struct {
	Typename   string                                                                         `json:"__typename"`
	DataSource CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetTypename() string {
	return v.Typename
}

// GetDataSource returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetDataSource() CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	dataSource `json:"-"`
}

// GetId returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.dataSource.Id
}

// GetType returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.dataSource.Type
}

// GetStatus returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.dataSource.Status
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetError() dataSourceError {
	return v.dataSource.Error
}

// GetConnectionSettings returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse struct {
	Typename string                                                                 `json:"__typename"`
	Error    CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetTypename() string {
	return v.Typename
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetError() CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError {
	return v.Error
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	gqlError `json:"-"`
}

// GetCode returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetCode() int {
	return v.gqlError.Code
}

// GetMessage returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.gqlError.Message
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.gqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError

	retval.Code = v.gqlError.Code
	retval.Message = v.gqlError.Message
	return &retval, nil
}

type CreateSnowflakeDataSourceInput struct {
	UniqueName         string                           `json:"uniqueName"`
	Description        string                           `json:"description"`
	ConnectionSettings SnowflakeConnectionSettingsInput `json:"connectionSettings"`
}

// GetUniqueName returns CreateSnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateSnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetDescription() string { return v.Description }

// GetConnectionSettings returns CreateSnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetConnectionSettings() SnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// CreateSnowflakeDataSourceResponse is returned by CreateSnowflakeDataSource on success.
type CreateSnowflakeDataSourceResponse struct {
	CreateSnowflakeDataSource CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetCreateSnowflakeDataSource returns CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceResponse) GetCreateSnowflakeDataSource() CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse {
	return v.CreateSnowflakeDataSource
}

func (v *CreateSnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceResponse
		CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateSnowflakeDataSource
		src := firstPass.CreateSnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceResponse struct {
	CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
}

func (v *CreateSnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceResponse, error) {
	var retval __premarshalCreateSnowflakeDataSourceResponse

	{

		dst := &retval.CreateSnowflakeDataSource
		src := v.CreateSnowflakeDataSource
		var err error
		*dst, err = __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
		}
	}
	return &retval, nil
}

// CreateSumMetricCreateSumMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type CreateSumMetricCreateSumMetricMetricResponse struct {
	Typename string                                             `json:"__typename"`
	Metric   CreateSumMetricCreateSumMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateSumMetricCreateSumMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponse) GetTypename() string { return v.Typename }

// GetMetric returns CreateSumMetricCreateSumMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponse) GetMetric() CreateSumMetricCreateSumMetricMetricResponseMetric {
	return v.Metric
}

// CreateSumMetricCreateSumMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type CreateSumMetricCreateSumMetricMetricResponseMetric struct {
	metric `json:"-"`
}

// GetId returns CreateSumMetricCreateSumMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetId() string { return v.metric.Id }

// GetDataPool returns CreateSumMetricCreateSumMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDataPool() metricDataPool {
	return v.metric.DataPool
}

// GetDimensions returns CreateSumMetricCreateSumMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDimensions() []metricDimensionsDimension {
	return v.metric.Dimensions
}

// GetTimestamp returns CreateSumMetricCreateSumMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetTimestamp() metricTimestampDimension {
	return v.metric.Timestamp
}

// GetMeasure returns CreateSumMetricCreateSumMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetMeasure() metricMeasureDimension {
	return v.metric.Measure
}

// GetSettings returns CreateSumMetricCreateSumMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetSettings() metricSettingsMetricSettings {
	return v.metric.Settings
}

// GetType returns CreateSumMetricCreateSumMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetType() MetricType {
	return v.metric.Type
}

// GetUniqueName returns CreateSumMetricCreateSumMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetUniqueName() string {
	return v.metric.commonMetric.UniqueName
}

// GetDescription returns CreateSumMetricCreateSumMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDescription() string {
	return v.metric.commonMetric.Description
}

// GetAccount returns CreateSumMetricCreateSumMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetAccount() commonAccount {
	return v.metric.commonMetric.Account
}

// GetEnvironment returns CreateSumMetricCreateSumMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetEnvironment() commonEnvironment {
	return v.metric.commonMetric.Environment
}

// GetCreatedAt returns CreateSumMetricCreateSumMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.metric.commonMetric.CreatedAt
}

// GetModifiedAt returns CreateSumMetricCreateSumMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.metric.commonMetric.ModifiedAt
}

// GetCreatedBy returns CreateSumMetricCreateSumMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetCreatedBy() string {
	return v.metric.commonMetric.CreatedBy
}

// GetModifiedBy returns CreateSumMetricCreateSumMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetModifiedBy() string {
	return v.metric.commonMetric.ModifiedBy
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSumMetricCreateSumMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSumMetricCreateSumMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSumMetricCreateSumMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateSumMetricCreateSumMetricMetricResponseMetric, error) {
	var retval __premarshalCreateSumMetricCreateSumMetricMetricResponseMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSumMetricCreateSumMetricMetricResponseMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// Settings to create a new sum Metric.
type CreateSumMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name.
	UniqueName string `json:"uniqueName"`
	// The Metric's description.
	Description string `json:"description"`
	// The Metric's filters. Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included.
	Filters []FilterInput `json:"filters"`
	// The Metric's dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []DimensionInput `json:"dimensions"`
	// The column to be summed.
	Measure DimensionInput `json:"measure"`
	// Employee-only API for overriding a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetDataPool returns CreateSumMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateSumMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateSumMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDescription() string { return v.Description }

// GetFilters returns CreateSumMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetFilters() []FilterInput { return v.Filters }

// GetDimensions returns CreateSumMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDimensions() []DimensionInput { return v.Dimensions }

// GetMeasure returns CreateSumMetricInput.Measure, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetMeasure() DimensionInput { return v.Measure }

// GetQuerySource returns CreateSumMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// CreateSumMetricResponse is returned by CreateSumMetric on success.
type CreateSumMetricResponse struct {
	CreateSumMetric CreateSumMetricCreateSumMetricMetricResponse `json:"createSumMetric"`
}

// GetCreateSumMetric returns CreateSumMetricResponse.CreateSumMetric, and is useful for accessing the field via an interface.
func (v *CreateSumMetricResponse) GetCreateSumMetric() CreateSumMetricCreateSumMetricMetricResponse {
	return v.CreateSumMetric
}

// DataPoolByNameDataPool includes the requested fields of the GraphQL type DataPool.
type DataPoolByNameDataPool struct {
	dataPool `json:"-"`
}

// GetId returns DataPoolByNameDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetId() string { return v.dataPool.Id }

// GetDataSource returns DataPoolByNameDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetDataSource() dataPoolDataSource { return v.dataPool.DataSource }

// GetStatus returns DataPoolByNameDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetStatus() DataPoolStatus { return v.dataPool.Status }

// GetError returns DataPoolByNameDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetError() dataPoolError { return v.dataPool.Error }

// GetTable returns DataPoolByNameDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetTable() string { return v.dataPool.Table }

// GetTimestamp returns DataPoolByNameDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetTimestamp() dataPoolTimestampDimension {
	return v.dataPool.Timestamp
}

// GetColumns returns DataPoolByNameDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetColumns() dataPoolColumnsColumnConnection {
	return v.dataPool.Columns
}

// GetAvailableMeasures returns DataPoolByNameDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetAvailableMeasures() dataPoolAvailableMeasuresColumnConnection {
	return v.dataPool.AvailableMeasures
}

// GetSetupTasks returns DataPoolByNameDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetSetupTasks() []dataPoolSetupTasksDataPoolSetupTask {
	return v.dataPool.SetupTasks
}

// GetSyncs returns DataPoolByNameDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetSyncs() dataPoolSyncsSyncConnection { return v.dataPool.Syncs }

// GetUniqueName returns DataPoolByNameDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetUniqueName() string { return v.dataPool.commonDataPool.UniqueName }

// GetDescription returns DataPoolByNameDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetDescription() string {
	return v.dataPool.commonDataPool.Description
}

// GetAccount returns DataPoolByNameDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetAccount() commonAccount { return v.dataPool.commonDataPool.Account }

// GetEnvironment returns DataPoolByNameDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetEnvironment() commonEnvironment {
	return v.dataPool.commonDataPool.Environment
}

// GetCreatedAt returns DataPoolByNameDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetCreatedAt() time.Time { return v.dataPool.commonDataPool.CreatedAt }

// GetModifiedAt returns DataPoolByNameDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetModifiedAt() time.Time {
	return v.dataPool.commonDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolByNameDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetCreatedBy() string { return v.dataPool.commonDataPool.CreatedBy }

// GetModifiedBy returns DataPoolByNameDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetModifiedBy() string { return v.dataPool.commonDataPool.ModifiedBy }

func (v *DataPoolByNameDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolByNameDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolByNameDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolByNameDataPool struct {
	Id string `json:"id"`

	DataSource dataPoolDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error dataPoolError `json:"error"`

	Table string `json:"table"`

	Timestamp dataPoolTimestampDimension `json:"timestamp"`

	Columns dataPoolColumnsColumnConnection `json:"columns"`

	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs dataPoolSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolByNameDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolByNameDataPool) __premarshalJSON() (*__premarshalDataPoolByNameDataPool, error) {
	var retval __premarshalDataPoolByNameDataPool

	retval.Id = v.dataPool.Id
	retval.DataSource = v.dataPool.DataSource
	retval.Status = v.dataPool.Status
	retval.Error = v.dataPool.Error
	retval.Table = v.dataPool.Table
	retval.Timestamp = v.dataPool.Timestamp
	retval.Columns = v.dataPool.Columns
	retval.AvailableMeasures = v.dataPool.AvailableMeasures
	retval.SetupTasks = v.dataPool.SetupTasks
	retval.Syncs = v.dataPool.Syncs
	retval.UniqueName = v.dataPool.commonDataPool.UniqueName
	retval.Description = v.dataPool.commonDataPool.Description
	retval.Account = v.dataPool.commonDataPool.Account
	retval.Environment = v.dataPool.commonDataPool.Environment
	retval.CreatedAt = v.dataPool.commonDataPool.CreatedAt
	retval.ModifiedAt = v.dataPool.commonDataPool.ModifiedAt
	retval.CreatedBy = v.dataPool.commonDataPool.CreatedBy
	retval.ModifiedBy = v.dataPool.commonDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolByNameResponse is returned by DataPoolByName on success.
type DataPoolByNameResponse struct {
	DataPool DataPoolByNameDataPool `json:"dataPool"`
}

// GetDataPool returns DataPoolByNameResponse.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolByNameResponse) GetDataPool() DataPoolByNameDataPool { return v.DataPool }

// DataPoolDataPool includes the requested fields of the GraphQL type DataPool.
type DataPoolDataPool struct {
	dataPool `json:"-"`
}

// GetId returns DataPoolDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetId() string { return v.dataPool.Id }

// GetDataSource returns DataPoolDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetDataSource() dataPoolDataSource { return v.dataPool.DataSource }

// GetStatus returns DataPoolDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetStatus() DataPoolStatus { return v.dataPool.Status }

// GetError returns DataPoolDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetError() dataPoolError { return v.dataPool.Error }

// GetTable returns DataPoolDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetTable() string { return v.dataPool.Table }

// GetTimestamp returns DataPoolDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetTimestamp() dataPoolTimestampDimension { return v.dataPool.Timestamp }

// GetColumns returns DataPoolDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetColumns() dataPoolColumnsColumnConnection { return v.dataPool.Columns }

// GetAvailableMeasures returns DataPoolDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetAvailableMeasures() dataPoolAvailableMeasuresColumnConnection {
	return v.dataPool.AvailableMeasures
}

// GetSetupTasks returns DataPoolDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetSetupTasks() []dataPoolSetupTasksDataPoolSetupTask {
	return v.dataPool.SetupTasks
}

// GetSyncs returns DataPoolDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetSyncs() dataPoolSyncsSyncConnection { return v.dataPool.Syncs }

// GetUniqueName returns DataPoolDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetUniqueName() string { return v.dataPool.commonDataPool.UniqueName }

// GetDescription returns DataPoolDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetDescription() string { return v.dataPool.commonDataPool.Description }

// GetAccount returns DataPoolDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetAccount() commonAccount { return v.dataPool.commonDataPool.Account }

// GetEnvironment returns DataPoolDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetEnvironment() commonEnvironment {
	return v.dataPool.commonDataPool.Environment
}

// GetCreatedAt returns DataPoolDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetCreatedAt() time.Time { return v.dataPool.commonDataPool.CreatedAt }

// GetModifiedAt returns DataPoolDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetModifiedAt() time.Time { return v.dataPool.commonDataPool.ModifiedAt }

// GetCreatedBy returns DataPoolDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetCreatedBy() string { return v.dataPool.commonDataPool.CreatedBy }

// GetModifiedBy returns DataPoolDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetModifiedBy() string { return v.dataPool.commonDataPool.ModifiedBy }

func (v *DataPoolDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataPool struct {
	Id string `json:"id"`

	DataSource dataPoolDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error dataPoolError `json:"error"`

	Table string `json:"table"`

	Timestamp dataPoolTimestampDimension `json:"timestamp"`

	Columns dataPoolColumnsColumnConnection `json:"columns"`

	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs dataPoolSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataPool) __premarshalJSON() (*__premarshalDataPoolDataPool, error) {
	var retval __premarshalDataPoolDataPool

	retval.Id = v.dataPool.Id
	retval.DataSource = v.dataPool.DataSource
	retval.Status = v.dataPool.Status
	retval.Error = v.dataPool.Error
	retval.Table = v.dataPool.Table
	retval.Timestamp = v.dataPool.Timestamp
	retval.Columns = v.dataPool.Columns
	retval.AvailableMeasures = v.dataPool.AvailableMeasures
	retval.SetupTasks = v.dataPool.SetupTasks
	retval.Syncs = v.dataPool.Syncs
	retval.UniqueName = v.dataPool.commonDataPool.UniqueName
	retval.Description = v.dataPool.commonDataPool.Description
	retval.Account = v.dataPool.commonDataPool.Account
	retval.Environment = v.dataPool.commonDataPool.Environment
	retval.CreatedAt = v.dataPool.commonDataPool.CreatedAt
	retval.ModifiedAt = v.dataPool.commonDataPool.ModifiedAt
	retval.CreatedBy = v.dataPool.commonDataPool.CreatedBy
	retval.ModifiedBy = v.dataPool.commonDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolResponse is returned by DataPool on success.
type DataPoolResponse struct {
	DataPool DataPoolDataPool `json:"dataPool"`
}

// GetDataPool returns DataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolResponse) GetDataPool() DataPoolDataPool { return v.DataPool }

type DataPoolSetupTaskStatus string

const (
	DataPoolSetupTaskStatusNotStarted DataPoolSetupTaskStatus = "NOT_STARTED"
	DataPoolSetupTaskStatusSucceeded  DataPoolSetupTaskStatus = "SUCCEEDED"
	DataPoolSetupTaskStatusFailed     DataPoolSetupTaskStatus = "FAILED"
)

type DataPoolStatus string

const (
	// The Data Pool has been created. We will attempt to set it up soon.
	DataPoolStatusCreated DataPoolStatus = "CREATED"
	// We are attempting to setup the Data Pool
	DataPoolStatusPending DataPoolStatus = "PENDING"
	// The Data Pool is setup and serving data. Check its Syncs to monitor data ingestion.
	DataPoolStatusLive DataPoolStatus = "LIVE"
	// We could not setup the Data Pool. Check its setup tasks before re-attempting setup.
	DataPoolStatusSetupFailed DataPoolStatus = "SETUP_FAILED"
	DataPoolStatusConnecting  DataPoolStatus = "CONNECTING"
	DataPoolStatusConnected   DataPoolStatus = "CONNECTED"
	DataPoolStatusBroken      DataPoolStatus = "BROKEN"
	DataPoolStatusPausing     DataPoolStatus = "PAUSING"
	DataPoolStatusPaused      DataPoolStatus = "PAUSED"
	// We are deleting the Data Pool and all of its associated data.
	DataPoolStatusDeleting DataPoolStatus = "DELETING"
)

// DataPoolsDataPoolsDataPoolConnection includes the requested fields of the GraphQL type DataPoolConnection.
type DataPoolsDataPoolsDataPoolConnection struct {
	PageInfo DataPoolsDataPoolsDataPoolConnectionPageInfo            `json:"pageInfo"`
	Edges    []DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge `json:"edges"`
}

// GetPageInfo returns DataPoolsDataPoolsDataPoolConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnection) GetPageInfo() DataPoolsDataPoolsDataPoolConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns DataPoolsDataPoolsDataPoolConnection.Edges, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnection) GetEdges() []DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge {
	return v.Edges
}

// DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge includes the requested fields of the GraphQL type DataPoolEdge.
type DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge struct {
	Node DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool `json:"node"`
}

// GetNode returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge.Node, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge) GetNode() DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool {
	return v.Node
}

// DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool includes the requested fields of the GraphQL type DataPool.
type DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool struct {
	dataPool `json:"-"`
}

// GetId returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetId() string {
	return v.dataPool.Id
}

// GetDataSource returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetDataSource() dataPoolDataSource {
	return v.dataPool.DataSource
}

// GetStatus returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetStatus() DataPoolStatus {
	return v.dataPool.Status
}

// GetError returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetError() dataPoolError {
	return v.dataPool.Error
}

// GetTable returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetTable() string {
	return v.dataPool.Table
}

// GetTimestamp returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetTimestamp() dataPoolTimestampDimension {
	return v.dataPool.Timestamp
}

// GetColumns returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetColumns() dataPoolColumnsColumnConnection {
	return v.dataPool.Columns
}

// GetAvailableMeasures returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetAvailableMeasures() dataPoolAvailableMeasuresColumnConnection {
	return v.dataPool.AvailableMeasures
}

// GetSetupTasks returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetSetupTasks() []dataPoolSetupTasksDataPoolSetupTask {
	return v.dataPool.SetupTasks
}

// GetSyncs returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetSyncs() dataPoolSyncsSyncConnection {
	return v.dataPool.Syncs
}

// GetUniqueName returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetUniqueName() string {
	return v.dataPool.commonDataPool.UniqueName
}

// GetDescription returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetDescription() string {
	return v.dataPool.commonDataPool.Description
}

// GetAccount returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetAccount() commonAccount {
	return v.dataPool.commonDataPool.Account
}

// GetEnvironment returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetEnvironment() commonEnvironment {
	return v.dataPool.commonDataPool.Environment
}

// GetCreatedAt returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetCreatedAt() time.Time {
	return v.dataPool.commonDataPool.CreatedAt
}

// GetModifiedAt returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetModifiedAt() time.Time {
	return v.dataPool.commonDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetCreatedBy() string {
	return v.dataPool.commonDataPool.CreatedBy
}

// GetModifiedBy returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetModifiedBy() string {
	return v.dataPool.commonDataPool.ModifiedBy
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool struct {
	Id string `json:"id"`

	DataSource dataPoolDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error dataPoolError `json:"error"`

	Table string `json:"table"`

	Timestamp dataPoolTimestampDimension `json:"timestamp"`

	Columns dataPoolColumnsColumnConnection `json:"columns"`

	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs dataPoolSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) __premarshalJSON() (*__premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool, error) {
	var retval __premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool

	retval.Id = v.dataPool.Id
	retval.DataSource = v.dataPool.DataSource
	retval.Status = v.dataPool.Status
	retval.Error = v.dataPool.Error
	retval.Table = v.dataPool.Table
	retval.Timestamp = v.dataPool.Timestamp
	retval.Columns = v.dataPool.Columns
	retval.AvailableMeasures = v.dataPool.AvailableMeasures
	retval.SetupTasks = v.dataPool.SetupTasks
	retval.Syncs = v.dataPool.Syncs
	retval.UniqueName = v.dataPool.commonDataPool.UniqueName
	retval.Description = v.dataPool.commonDataPool.Description
	retval.Account = v.dataPool.commonDataPool.Account
	retval.Environment = v.dataPool.commonDataPool.Environment
	retval.CreatedAt = v.dataPool.commonDataPool.CreatedAt
	retval.ModifiedAt = v.dataPool.commonDataPool.ModifiedAt
	retval.CreatedBy = v.dataPool.commonDataPool.CreatedBy
	retval.ModifiedBy = v.dataPool.commonDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolsDataPoolsDataPoolConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type DataPoolsDataPoolsDataPoolConnectionPageInfo struct {
	pageInfo `json:"-"`
}

// GetStartCursor returns DataPoolsDataPoolsDataPoolConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetStartCursor() string {
	return v.pageInfo.StartCursor
}

// GetEndCursor returns DataPoolsDataPoolsDataPoolConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetEndCursor() string {
	return v.pageInfo.EndCursor
}

// GetHasNextPage returns DataPoolsDataPoolsDataPoolConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetHasNextPage() bool {
	return v.pageInfo.HasNextPage
}

// GetHasPreviousPage returns DataPoolsDataPoolsDataPoolConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetHasPreviousPage() bool {
	return v.pageInfo.HasPreviousPage
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolsDataPoolsDataPoolConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolsDataPoolsDataPoolConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo struct {
	StartCursor string `json:"startCursor"`

	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) __premarshalJSON() (*__premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo, error) {
	var retval __premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo

	retval.StartCursor = v.pageInfo.StartCursor
	retval.EndCursor = v.pageInfo.EndCursor
	retval.HasNextPage = v.pageInfo.HasNextPage
	retval.HasPreviousPage = v.pageInfo.HasPreviousPage
	return &retval, nil
}

// DataPoolsResponse is returned by DataPools on success.
type DataPoolsResponse struct {
	DataPools DataPoolsDataPoolsDataPoolConnection `json:"dataPools"`
}

// GetDataPools returns DataPoolsResponse.DataPools, and is useful for accessing the field via an interface.
func (v *DataPoolsResponse) GetDataPools() DataPoolsDataPoolsDataPoolConnection { return v.DataPools }

// DataSourceByNameDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceByNameDataSource struct {
	dataSource `json:"-"`
}

// GetId returns DataSourceByNameDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetId() string { return v.dataSource.Id }

// GetType returns DataSourceByNameDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetType() DataSourceType { return v.dataSource.Type }

// GetStatus returns DataSourceByNameDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetStatus() DataSourceStatus { return v.dataSource.Status }

// GetError returns DataSourceByNameDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetError() dataSourceError { return v.dataSource.Error }

// GetConnectionSettings returns DataSourceByNameDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns DataSourceByNameDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns DataSourceByNameDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns DataSourceByNameDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns DataSourceByNameDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns DataSourceByNameDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns DataSourceByNameDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns DataSourceByNameDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns DataSourceByNameDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceByNameDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceByNameDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns DataSourceByNameDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *DataSourceByNameDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceByNameDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceByNameDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceByNameDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceByNameDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceByNameDataSource) __premarshalJSON() (*__premarshalDataSourceByNameDataSource, error) {
	var retval __premarshalDataSourceByNameDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourceByNameDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceByNameResponse is returned by DataSourceByName on success.
type DataSourceByNameResponse struct {
	DataSource DataSourceByNameDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceByNameResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceByNameResponse) GetDataSource() DataSourceByNameDataSource { return v.DataSource }

type DataSourceCheckStatus string

const (
	DataSourceCheckStatusNotStarted DataSourceCheckStatus = "NOT_STARTED"
	DataSourceCheckStatusSucceeded  DataSourceCheckStatus = "SUCCEEDED"
	DataSourceCheckStatusFailed     DataSourceCheckStatus = "FAILED"
)

// DataSourceDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceDataSource struct {
	dataSource `json:"-"`
}

// GetId returns DataSourceDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetId() string { return v.dataSource.Id }

// GetType returns DataSourceDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetType() DataSourceType { return v.dataSource.Type }

// GetStatus returns DataSourceDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetStatus() DataSourceStatus { return v.dataSource.Status }

// GetError returns DataSourceDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetError() dataSourceError { return v.dataSource.Error }

// GetConnectionSettings returns DataSourceDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns DataSourceDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns DataSourceDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns DataSourceDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns DataSourceDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns DataSourceDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns DataSourceDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns DataSourceDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns DataSourceDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedBy() string { return v.dataSource.commonDataSource.CreatedBy }

// GetModifiedBy returns DataSourceDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *DataSourceDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataSource) __premarshalJSON() (*__premarshalDataSourceDataSource, error) {
	var retval __premarshalDataSourceDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourceDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceResponse is returned by DataSource on success.
type DataSourceResponse struct {
	DataSource DataSourceDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceResponse) GetDataSource() DataSourceDataSource { return v.DataSource }

type DataSourceStatus string

const (
	DataSourceStatusCreated    DataSourceStatus = "CREATED"
	DataSourceStatusConnecting DataSourceStatus = "CONNECTING"
	DataSourceStatusConnected  DataSourceStatus = "CONNECTED"
	DataSourceStatusBroken     DataSourceStatus = "BROKEN"
	DataSourceStatusDeleting   DataSourceStatus = "DELETING"
)

type DataSourceType string

const (
	DataSourceTypeSnowflake DataSourceType = "Snowflake"
)

// DataSourcesDataSourcesDataSourceConnection includes the requested fields of the GraphQL type DataSourceConnection.
type DataSourcesDataSourcesDataSourceConnection struct {
	PageInfo DataSourcesDataSourcesDataSourceConnectionPageInfo              `json:"pageInfo"`
	Edges    []DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge `json:"edges"`
}

// GetPageInfo returns DataSourcesDataSourcesDataSourceConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetPageInfo() DataSourcesDataSourcesDataSourceConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns DataSourcesDataSourcesDataSourceConnection.Edges, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetEdges() []DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge {
	return v.Edges
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge includes the requested fields of the GraphQL type DataSourceEdge.
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge struct {
	Node DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource `json:"node"`
}

// GetNode returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge.Node, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge) GetNode() DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource {
	return v.Node
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	dataSource `json:"-"`
}

// GetId returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetId() string {
	return v.dataSource.Id
}

// GetType returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetType() DataSourceType {
	return v.dataSource.Type
}

// GetStatus returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetStatus() DataSourceStatus {
	return v.dataSource.Status
}

// GetError returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetError() dataSourceError {
	return v.dataSource.Error
}

// GetConnectionSettings returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// DataSourcesDataSourcesDataSourceConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type DataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	pageInfo `json:"-"`
}

// GetStartCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetStartCursor() string {
	return v.pageInfo.StartCursor
}

// GetEndCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetEndCursor() string {
	return v.pageInfo.EndCursor
}

// GetHasNextPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasNextPage() bool {
	return v.pageInfo.HasNextPage
}

// GetHasPreviousPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasPreviousPage() bool {
	return v.pageInfo.HasPreviousPage
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	StartCursor string `json:"startCursor"`

	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo

	retval.StartCursor = v.pageInfo.StartCursor
	retval.EndCursor = v.pageInfo.EndCursor
	retval.HasNextPage = v.pageInfo.HasNextPage
	retval.HasPreviousPage = v.pageInfo.HasPreviousPage
	return &retval, nil
}

// DataSourcesResponse is returned by DataSources on success.
type DataSourcesResponse struct {
	DataSources DataSourcesDataSourcesDataSourceConnection `json:"dataSources"`
}

// GetDataSources returns DataSourcesResponse.DataSources, and is useful for accessing the field via an interface.
func (v *DataSourcesResponse) GetDataSources() DataSourcesDataSourcesDataSourceConnection {
	return v.DataSources
}

// DeleteDataPoolByNameResponse is returned by DeleteDataPoolByName on success.
type DeleteDataPoolByNameResponse struct {
	DeleteDataPoolByName string `json:"deleteDataPoolByName"`
}

// GetDeleteDataPoolByName returns DeleteDataPoolByNameResponse.DeleteDataPoolByName, and is useful for accessing the field via an interface.
func (v *DeleteDataPoolByNameResponse) GetDeleteDataPoolByName() string {
	return v.DeleteDataPoolByName
}

// DeleteDataPoolResponse is returned by DeleteDataPool on success.
type DeleteDataPoolResponse struct {
	DeleteDataPool string `json:"deleteDataPool"`
}

// GetDeleteDataPool returns DeleteDataPoolResponse.DeleteDataPool, and is useful for accessing the field via an interface.
func (v *DeleteDataPoolResponse) GetDeleteDataPool() string { return v.DeleteDataPool }

// DeleteDataSourceByNameResponse is returned by DeleteDataSourceByName on success.
type DeleteDataSourceByNameResponse struct {
	DeleteDataSourceByName string `json:"deleteDataSourceByName"`
}

// GetDeleteDataSourceByName returns DeleteDataSourceByNameResponse.DeleteDataSourceByName, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceByNameResponse) GetDeleteDataSourceByName() string {
	return v.DeleteDataSourceByName
}

// DeleteDataSourceResponse is returned by DeleteDataSource on success.
type DeleteDataSourceResponse struct {
	DeleteDataSource string `json:"deleteDataSource"`
}

// GetDeleteDataSource returns DeleteDataSourceResponse.DeleteDataSource, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceResponse) GetDeleteDataSource() string { return v.DeleteDataSource }

// DeleteMetricByNameResponse is returned by DeleteMetricByName on success.
type DeleteMetricByNameResponse struct {
	DeleteMetricByName string `json:"deleteMetricByName"`
}

// GetDeleteMetricByName returns DeleteMetricByNameResponse.DeleteMetricByName, and is useful for accessing the field via an interface.
func (v *DeleteMetricByNameResponse) GetDeleteMetricByName() string { return v.DeleteMetricByName }

// DeleteMetricResponse is returned by DeleteMetric on success.
type DeleteMetricResponse struct {
	DeleteMetric string `json:"deleteMetric"`
}

// GetDeleteMetric returns DeleteMetricResponse.DeleteMetric, and is useful for accessing the field via an interface.
func (v *DeleteMetricResponse) GetDeleteMetric() string { return v.DeleteMetric }

type DimensionInput struct {
	ColumnName string `json:"columnName"`
}

// GetColumnName returns DimensionInput.ColumnName, and is useful for accessing the field via an interface.
func (v *DimensionInput) GetColumnName() string { return v.ColumnName }

type FilterInput struct {
	Column   string         `json:"column"`
	Operator FilterOperator `json:"operator"`
	Value    string         `json:"value"`
}

// GetColumn returns FilterInput.Column, and is useful for accessing the field via an interface.
func (v *FilterInput) GetColumn() string { return v.Column }

// GetOperator returns FilterInput.Operator, and is useful for accessing the field via an interface.
func (v *FilterInput) GetOperator() FilterOperator { return v.Operator }

// GetValue returns FilterInput.Value, and is useful for accessing the field via an interface.
func (v *FilterInput) GetValue() string { return v.Value }

type FilterOperator string

const (
	FilterOperatorEquals               FilterOperator = "EQUALS"
	FilterOperatorNotEquals            FilterOperator = "NOT_EQUALS"
	FilterOperatorGreaterThan          FilterOperator = "GREATER_THAN"
	FilterOperatorGreaterThanOrEqualTo FilterOperator = "GREATER_THAN_OR_EQUAL_TO"
	FilterOperatorLessThan             FilterOperator = "LESS_THAN"
	FilterOperatorLessThanOrEqualTo    FilterOperator = "LESS_THAN_OR_EQUAL_TO"
)

type IdOrUniqueName struct {
	Id         string `json:"id"`
	UniqueName string `json:"uniqueName"`
}

// GetId returns IdOrUniqueName.Id, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetId() string { return v.Id }

// GetUniqueName returns IdOrUniqueName.UniqueName, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetUniqueName() string { return v.UniqueName }

// MetricByNameMetric includes the requested fields of the GraphQL type Metric.
type MetricByNameMetric struct {
	metric `json:"-"`
}

// GetId returns MetricByNameMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetId() string { return v.metric.Id }

// GetDataPool returns MetricByNameMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDataPool() metricDataPool { return v.metric.DataPool }

// GetDimensions returns MetricByNameMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDimensions() []metricDimensionsDimension { return v.metric.Dimensions }

// GetTimestamp returns MetricByNameMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetTimestamp() metricTimestampDimension { return v.metric.Timestamp }

// GetMeasure returns MetricByNameMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetMeasure() metricMeasureDimension { return v.metric.Measure }

// GetSettings returns MetricByNameMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetSettings() metricSettingsMetricSettings { return v.metric.Settings }

// GetType returns MetricByNameMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetType() MetricType { return v.metric.Type }

// GetUniqueName returns MetricByNameMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetUniqueName() string { return v.metric.commonMetric.UniqueName }

// GetDescription returns MetricByNameMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDescription() string { return v.metric.commonMetric.Description }

// GetAccount returns MetricByNameMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetAccount() commonAccount { return v.metric.commonMetric.Account }

// GetEnvironment returns MetricByNameMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetEnvironment() commonEnvironment {
	return v.metric.commonMetric.Environment
}

// GetCreatedAt returns MetricByNameMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetCreatedAt() time.Time { return v.metric.commonMetric.CreatedAt }

// GetModifiedAt returns MetricByNameMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetModifiedAt() time.Time { return v.metric.commonMetric.ModifiedAt }

// GetCreatedBy returns MetricByNameMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetCreatedBy() string { return v.metric.commonMetric.CreatedBy }

// GetModifiedBy returns MetricByNameMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetModifiedBy() string { return v.metric.commonMetric.ModifiedBy }

func (v *MetricByNameMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricByNameMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricByNameMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricByNameMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricByNameMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricByNameMetric) __premarshalJSON() (*__premarshalMetricByNameMetric, error) {
	var retval __premarshalMetricByNameMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricByNameMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// MetricByNameResponse is returned by MetricByName on success.
type MetricByNameResponse struct {
	Metric MetricByNameMetric `json:"metric"`
}

// GetMetric returns MetricByNameResponse.Metric, and is useful for accessing the field via an interface.
func (v *MetricByNameResponse) GetMetric() MetricByNameMetric { return v.Metric }

// MetricMetric includes the requested fields of the GraphQL type Metric.
type MetricMetric struct {
	metric `json:"-"`
}

// GetId returns MetricMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetId() string { return v.metric.Id }

// GetDataPool returns MetricMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDataPool() metricDataPool { return v.metric.DataPool }

// GetDimensions returns MetricMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDimensions() []metricDimensionsDimension { return v.metric.Dimensions }

// GetTimestamp returns MetricMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetTimestamp() metricTimestampDimension { return v.metric.Timestamp }

// GetMeasure returns MetricMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetMeasure() metricMeasureDimension { return v.metric.Measure }

// GetSettings returns MetricMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetSettings() metricSettingsMetricSettings { return v.metric.Settings }

// GetType returns MetricMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetType() MetricType { return v.metric.Type }

// GetUniqueName returns MetricMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetUniqueName() string { return v.metric.commonMetric.UniqueName }

// GetDescription returns MetricMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDescription() string { return v.metric.commonMetric.Description }

// GetAccount returns MetricMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetAccount() commonAccount { return v.metric.commonMetric.Account }

// GetEnvironment returns MetricMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetEnvironment() commonEnvironment { return v.metric.commonMetric.Environment }

// GetCreatedAt returns MetricMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetCreatedAt() time.Time { return v.metric.commonMetric.CreatedAt }

// GetModifiedAt returns MetricMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetModifiedAt() time.Time { return v.metric.commonMetric.ModifiedAt }

// GetCreatedBy returns MetricMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetCreatedBy() string { return v.metric.commonMetric.CreatedBy }

// GetModifiedBy returns MetricMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetModifiedBy() string { return v.metric.commonMetric.ModifiedBy }

func (v *MetricMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricMetric) __premarshalJSON() (*__premarshalMetricMetric, error) {
	var retval __premarshalMetricMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// MetricResponse is returned by Metric on success.
type MetricResponse struct {
	Metric MetricMetric `json:"metric"`
}

// GetMetric returns MetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *MetricResponse) GetMetric() MetricMetric { return v.Metric }

type MetricType string

const (
	// Counts the number of records that meet the filter criteria.
	MetricTypeCount MetricType = "COUNT"
	// Sums a specified column for every row that meets the filter criteria.
	MetricTypeSum MetricType = "SUM"
	// Counts the number of different records in the provided column.
	MetricTypeCountDistinct MetricType = "COUNT_DISTINCT"
)

// MetricsMetricsMetricConnection includes the requested fields of the GraphQL type MetricConnection.
type MetricsMetricsMetricConnection struct {
	PageInfo MetricsMetricsMetricConnectionPageInfo          `json:"pageInfo"`
	Nodes    []MetricsMetricsMetricConnectionNodesMetric     `json:"nodes"`
	Edges    []MetricsMetricsMetricConnectionEdgesMetricEdge `json:"edges"`
}

// GetPageInfo returns MetricsMetricsMetricConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetPageInfo() MetricsMetricsMetricConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns MetricsMetricsMetricConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetNodes() []MetricsMetricsMetricConnectionNodesMetric {
	return v.Nodes
}

// GetEdges returns MetricsMetricsMetricConnection.Edges, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetEdges() []MetricsMetricsMetricConnectionEdgesMetricEdge {
	return v.Edges
}

// MetricsMetricsMetricConnectionEdgesMetricEdge includes the requested fields of the GraphQL type MetricEdge.
type MetricsMetricsMetricConnectionEdgesMetricEdge struct {
	Cursor string                                                  `json:"cursor"`
	Node   MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric `json:"node"`
}

// GetCursor returns MetricsMetricsMetricConnectionEdgesMetricEdge.Cursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdge) GetCursor() string { return v.Cursor }

// GetNode returns MetricsMetricsMetricConnectionEdgesMetricEdge.Node, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdge) GetNode() MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric {
	return v.Node
}

// MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric includes the requested fields of the GraphQL type Metric.
type MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric struct {
	metric `json:"-"`
}

// GetId returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetId() string { return v.metric.Id }

// GetDataPool returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDataPool() metricDataPool {
	return v.metric.DataPool
}

// GetDimensions returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDimensions() []metricDimensionsDimension {
	return v.metric.Dimensions
}

// GetTimestamp returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetTimestamp() metricTimestampDimension {
	return v.metric.Timestamp
}

// GetMeasure returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetMeasure() metricMeasureDimension {
	return v.metric.Measure
}

// GetSettings returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetSettings() metricSettingsMetricSettings {
	return v.metric.Settings
}

// GetType returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetType() MetricType {
	return v.metric.Type
}

// GetUniqueName returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetUniqueName() string {
	return v.metric.commonMetric.UniqueName
}

// GetDescription returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDescription() string {
	return v.metric.commonMetric.Description
}

// GetAccount returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetAccount() commonAccount {
	return v.metric.commonMetric.Account
}

// GetEnvironment returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetEnvironment() commonEnvironment {
	return v.metric.commonMetric.Environment
}

// GetCreatedAt returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetCreatedAt() time.Time {
	return v.metric.commonMetric.CreatedAt
}

// GetModifiedAt returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetModifiedAt() time.Time {
	return v.metric.commonMetric.ModifiedAt
}

// GetCreatedBy returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetCreatedBy() string {
	return v.metric.commonMetric.CreatedBy
}

// GetModifiedBy returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetModifiedBy() string {
	return v.metric.commonMetric.ModifiedBy
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric, error) {
	var retval __premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// MetricsMetricsMetricConnectionNodesMetric includes the requested fields of the GraphQL type Metric.
type MetricsMetricsMetricConnectionNodesMetric struct {
	metric `json:"-"`
}

// GetId returns MetricsMetricsMetricConnectionNodesMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetId() string { return v.metric.Id }

// GetDataPool returns MetricsMetricsMetricConnectionNodesMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDataPool() metricDataPool {
	return v.metric.DataPool
}

// GetDimensions returns MetricsMetricsMetricConnectionNodesMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDimensions() []metricDimensionsDimension {
	return v.metric.Dimensions
}

// GetTimestamp returns MetricsMetricsMetricConnectionNodesMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetTimestamp() metricTimestampDimension {
	return v.metric.Timestamp
}

// GetMeasure returns MetricsMetricsMetricConnectionNodesMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetMeasure() metricMeasureDimension {
	return v.metric.Measure
}

// GetSettings returns MetricsMetricsMetricConnectionNodesMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetSettings() metricSettingsMetricSettings {
	return v.metric.Settings
}

// GetType returns MetricsMetricsMetricConnectionNodesMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetType() MetricType { return v.metric.Type }

// GetUniqueName returns MetricsMetricsMetricConnectionNodesMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetUniqueName() string {
	return v.metric.commonMetric.UniqueName
}

// GetDescription returns MetricsMetricsMetricConnectionNodesMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDescription() string {
	return v.metric.commonMetric.Description
}

// GetAccount returns MetricsMetricsMetricConnectionNodesMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetAccount() commonAccount {
	return v.metric.commonMetric.Account
}

// GetEnvironment returns MetricsMetricsMetricConnectionNodesMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetEnvironment() commonEnvironment {
	return v.metric.commonMetric.Environment
}

// GetCreatedAt returns MetricsMetricsMetricConnectionNodesMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetCreatedAt() time.Time {
	return v.metric.commonMetric.CreatedAt
}

// GetModifiedAt returns MetricsMetricsMetricConnectionNodesMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetModifiedAt() time.Time {
	return v.metric.commonMetric.ModifiedAt
}

// GetCreatedBy returns MetricsMetricsMetricConnectionNodesMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetCreatedBy() string {
	return v.metric.commonMetric.CreatedBy
}

// GetModifiedBy returns MetricsMetricsMetricConnectionNodesMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetModifiedBy() string {
	return v.metric.commonMetric.ModifiedBy
}

func (v *MetricsMetricsMetricConnectionNodesMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionNodesMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionNodesMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionNodesMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricsMetricsMetricConnectionNodesMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionNodesMetric) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionNodesMetric, error) {
	var retval __premarshalMetricsMetricsMetricConnectionNodesMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricsMetricsMetricConnectionNodesMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// MetricsMetricsMetricConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type MetricsMetricsMetricConnectionPageInfo struct {
	pageInfo `json:"-"`
}

// GetStartCursor returns MetricsMetricsMetricConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetStartCursor() string {
	return v.pageInfo.StartCursor
}

// GetEndCursor returns MetricsMetricsMetricConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetEndCursor() string { return v.pageInfo.EndCursor }

// GetHasNextPage returns MetricsMetricsMetricConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetHasNextPage() bool { return v.pageInfo.HasNextPage }

// GetHasPreviousPage returns MetricsMetricsMetricConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetHasPreviousPage() bool {
	return v.pageInfo.HasPreviousPage
}

func (v *MetricsMetricsMetricConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionPageInfo struct {
	StartCursor string `json:"startCursor"`

	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *MetricsMetricsMetricConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionPageInfo) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionPageInfo, error) {
	var retval __premarshalMetricsMetricsMetricConnectionPageInfo

	retval.StartCursor = v.pageInfo.StartCursor
	retval.EndCursor = v.pageInfo.EndCursor
	retval.HasNextPage = v.pageInfo.HasNextPage
	retval.HasPreviousPage = v.pageInfo.HasPreviousPage
	return &retval, nil
}

// MetricsResponse is returned by Metrics on success.
type MetricsResponse struct {
	Metrics MetricsMetricsMetricConnection `json:"metrics"`
}

// GetMetrics returns MetricsResponse.Metrics, and is useful for accessing the field via an interface.
func (v *MetricsResponse) GetMetrics() MetricsMetricsMetricConnection { return v.Metrics }

type ModifyDataPoolInput struct {
	IdOrUniqueName      IdOrUniqueName `json:"idOrUniqueName"`
	UniqueName          string         `json:"uniqueName"`
	Description         string         `json:"description"`
	DataRetentionInDays int            `json:"dataRetentionInDays"`
	// Employee-only API for updating a Data Pool's syncDestination. If you change this, you need to take care to migrate
	// historical data to the new syncDestination yourself. You will also need to update the Data Pool's Metrics.
	SyncDestination TableLocationInput `json:"syncDestination"`
}

// GetIdOrUniqueName returns ModifyDataPoolInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetIdOrUniqueName() IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifyDataPoolInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns ModifyDataPoolInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetDescription() string { return v.Description }

// GetDataRetentionInDays returns ModifyDataPoolInput.DataRetentionInDays, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetDataRetentionInDays() int { return v.DataRetentionInDays }

// GetSyncDestination returns ModifyDataPoolInput.SyncDestination, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetSyncDestination() TableLocationInput { return v.SyncDestination }

// ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse includes the requested fields of the GraphQL interface DataPoolOrFailureResponse.
//
// ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse is implemented by the following types:
// ModifyDataPoolModifyDataPoolDataPoolResponse
// ModifyDataPoolModifyDataPoolFailureResponse
type ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse interface {
	implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse() {
}
func (v *ModifyDataPoolModifyDataPoolFailureResponse) implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse() {
}

func __unmarshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(b []byte, v *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataPoolResponse":
		*v = new(ModifyDataPoolModifyDataPoolDataPoolResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(ModifyDataPoolModifyDataPoolFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataPoolOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(v *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ModifyDataPoolModifyDataPoolDataPoolResponse:
		typename = "DataPoolResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifyDataPoolModifyDataPoolDataPoolResponse
		}{typename, v}
		return json.Marshal(result)
	case *ModifyDataPoolModifyDataPoolFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifyDataPoolModifyDataPoolFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse: "%T"`, v)
	}
}

// ModifyDataPoolModifyDataPoolDataPoolResponse includes the requested fields of the GraphQL type DataPoolResponse.
type ModifyDataPoolModifyDataPoolDataPoolResponse struct {
	Typename string                                               `json:"__typename"`
	DataPool ModifyDataPoolModifyDataPoolDataPoolResponseDataPool `json:"dataPool"`
}

// GetTypename returns ModifyDataPoolModifyDataPoolDataPoolResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) GetTypename() string { return v.Typename }

// GetDataPool returns ModifyDataPoolModifyDataPoolDataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) GetDataPool() ModifyDataPoolModifyDataPoolDataPoolResponseDataPool {
	return v.DataPool
}

// ModifyDataPoolModifyDataPoolDataPoolResponseDataPool includes the requested fields of the GraphQL type DataPool.
type ModifyDataPoolModifyDataPoolDataPoolResponseDataPool struct {
	dataPool `json:"-"`
}

// GetId returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Id, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetId() string { return v.dataPool.Id }

// GetDataSource returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetDataSource() dataPoolDataSource {
	return v.dataPool.DataSource
}

// GetStatus returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Status, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetStatus() DataPoolStatus {
	return v.dataPool.Status
}

// GetError returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Error, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetError() dataPoolError {
	return v.dataPool.Error
}

// GetTable returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Table, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetTable() string {
	return v.dataPool.Table
}

// GetTimestamp returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetTimestamp() dataPoolTimestampDimension {
	return v.dataPool.Timestamp
}

// GetColumns returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Columns, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetColumns() dataPoolColumnsColumnConnection {
	return v.dataPool.Columns
}

// GetAvailableMeasures returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetAvailableMeasures() dataPoolAvailableMeasuresColumnConnection {
	return v.dataPool.AvailableMeasures
}

// GetSetupTasks returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetSetupTasks() []dataPoolSetupTasksDataPoolSetupTask {
	return v.dataPool.SetupTasks
}

// GetSyncs returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetSyncs() dataPoolSyncsSyncConnection {
	return v.dataPool.Syncs
}

// GetUniqueName returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetUniqueName() string {
	return v.dataPool.commonDataPool.UniqueName
}

// GetDescription returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetDescription() string {
	return v.dataPool.commonDataPool.Description
}

// GetAccount returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Account, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetAccount() commonAccount {
	return v.dataPool.commonDataPool.Account
}

// GetEnvironment returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Environment, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetEnvironment() commonEnvironment {
	return v.dataPool.commonDataPool.Environment
}

// GetCreatedAt returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetCreatedAt() time.Time {
	return v.dataPool.commonDataPool.CreatedAt
}

// GetModifiedAt returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetModifiedAt() time.Time {
	return v.dataPool.commonDataPool.ModifiedAt
}

// GetCreatedBy returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetCreatedBy() string {
	return v.dataPool.commonDataPool.CreatedBy
}

// GetModifiedBy returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetModifiedBy() string {
	return v.dataPool.commonDataPool.ModifiedBy
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolModifyDataPoolDataPoolResponseDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolModifyDataPoolDataPoolResponseDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool struct {
	Id string `json:"id"`

	DataSource dataPoolDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error dataPoolError `json:"error"`

	Table string `json:"table"`

	Timestamp dataPoolTimestampDimension `json:"timestamp"`

	Columns dataPoolColumnsColumnConnection `json:"columns"`

	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs dataPoolSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) __premarshalJSON() (*__premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool, error) {
	var retval __premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool

	retval.Id = v.dataPool.Id
	retval.DataSource = v.dataPool.DataSource
	retval.Status = v.dataPool.Status
	retval.Error = v.dataPool.Error
	retval.Table = v.dataPool.Table
	retval.Timestamp = v.dataPool.Timestamp
	retval.Columns = v.dataPool.Columns
	retval.AvailableMeasures = v.dataPool.AvailableMeasures
	retval.SetupTasks = v.dataPool.SetupTasks
	retval.Syncs = v.dataPool.Syncs
	retval.UniqueName = v.dataPool.commonDataPool.UniqueName
	retval.Description = v.dataPool.commonDataPool.Description
	retval.Account = v.dataPool.commonDataPool.Account
	retval.Environment = v.dataPool.commonDataPool.Environment
	retval.CreatedAt = v.dataPool.commonDataPool.CreatedAt
	retval.ModifiedAt = v.dataPool.commonDataPool.ModifiedAt
	retval.CreatedBy = v.dataPool.commonDataPool.CreatedBy
	retval.ModifiedBy = v.dataPool.commonDataPool.ModifiedBy
	return &retval, nil
}

// ModifyDataPoolModifyDataPoolFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type ModifyDataPoolModifyDataPoolFailureResponse struct {
	Typename string                                           `json:"__typename"`
	Error    ModifyDataPoolModifyDataPoolFailureResponseError `json:"error"`
}

// GetTypename returns ModifyDataPoolModifyDataPoolFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponse) GetTypename() string { return v.Typename }

// GetError returns ModifyDataPoolModifyDataPoolFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponse) GetError() ModifyDataPoolModifyDataPoolFailureResponseError {
	return v.Error
}

// ModifyDataPoolModifyDataPoolFailureResponseError includes the requested fields of the GraphQL type Error.
type ModifyDataPoolModifyDataPoolFailureResponseError struct {
	gqlError `json:"-"`
}

// GetCode returns ModifyDataPoolModifyDataPoolFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponseError) GetCode() int { return v.gqlError.Code }

// GetMessage returns ModifyDataPoolModifyDataPoolFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponseError) GetMessage() string {
	return v.gqlError.Message
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolModifyDataPoolFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolModifyDataPoolFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.gqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyDataPoolModifyDataPoolFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) __premarshalJSON() (*__premarshalModifyDataPoolModifyDataPoolFailureResponseError, error) {
	var retval __premarshalModifyDataPoolModifyDataPoolFailureResponseError

	retval.Code = v.gqlError.Code
	retval.Message = v.gqlError.Message
	return &retval, nil
}

// ModifyDataPoolResponse is returned by ModifyDataPool on success.
type ModifyDataPoolResponse struct {
	ModifyDataPool ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse `json:"-"`
}

// GetModifyDataPool returns ModifyDataPoolResponse.ModifyDataPool, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolResponse) GetModifyDataPool() ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse {
	return v.ModifyDataPool
}

func (v *ModifyDataPoolResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolResponse
		ModifyDataPool json.RawMessage `json:"modifyDataPool"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ModifyDataPool
		src := firstPass.ModifyDataPool
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ModifyDataPoolResponse.ModifyDataPool: %w", err)
			}
		}
	}
	return nil
}

type __premarshalModifyDataPoolResponse struct {
	ModifyDataPool json.RawMessage `json:"modifyDataPool"`
}

func (v *ModifyDataPoolResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolResponse) __premarshalJSON() (*__premarshalModifyDataPoolResponse, error) {
	var retval __premarshalModifyDataPoolResponse

	{

		dst := &retval.ModifyDataPool
		src := v.ModifyDataPool
		var err error
		*dst, err = __marshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifyDataPoolResponse.ModifyDataPool: %w", err)
		}
	}
	return &retval, nil
}

type ModifyMetricInput struct {
	Metric      string `json:"metric"`
	UniqueName  string `json:"uniqueName"`
	Description string `json:"description"`
	// Employee-only API for updating a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetMetric returns ModifyMetricInput.Metric, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetMetric() string { return v.Metric }

// GetUniqueName returns ModifyMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns ModifyMetricInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetDescription() string { return v.Description }

// GetQuerySource returns ModifyMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// ModifyMetricModifyMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type ModifyMetricModifyMetricMetricResponse struct {
	Typename string                                       `json:"__typename"`
	Metric   ModifyMetricModifyMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns ModifyMetricModifyMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponse) GetTypename() string { return v.Typename }

// GetMetric returns ModifyMetricModifyMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponse) GetMetric() ModifyMetricModifyMetricMetricResponseMetric {
	return v.Metric
}

// ModifyMetricModifyMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type ModifyMetricModifyMetricMetricResponseMetric struct {
	metric `json:"-"`
}

// GetId returns ModifyMetricModifyMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetId() string { return v.metric.Id }

// GetDataPool returns ModifyMetricModifyMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDataPool() metricDataPool {
	return v.metric.DataPool
}

// GetDimensions returns ModifyMetricModifyMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDimensions() []metricDimensionsDimension {
	return v.metric.Dimensions
}

// GetTimestamp returns ModifyMetricModifyMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetTimestamp() metricTimestampDimension {
	return v.metric.Timestamp
}

// GetMeasure returns ModifyMetricModifyMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetMeasure() metricMeasureDimension {
	return v.metric.Measure
}

// GetSettings returns ModifyMetricModifyMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetSettings() metricSettingsMetricSettings {
	return v.metric.Settings
}

// GetType returns ModifyMetricModifyMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetType() MetricType { return v.metric.Type }

// GetUniqueName returns ModifyMetricModifyMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetUniqueName() string {
	return v.metric.commonMetric.UniqueName
}

// GetDescription returns ModifyMetricModifyMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDescription() string {
	return v.metric.commonMetric.Description
}

// GetAccount returns ModifyMetricModifyMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetAccount() commonAccount {
	return v.metric.commonMetric.Account
}

// GetEnvironment returns ModifyMetricModifyMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetEnvironment() commonEnvironment {
	return v.metric.commonMetric.Environment
}

// GetCreatedAt returns ModifyMetricModifyMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.metric.commonMetric.CreatedAt
}

// GetModifiedAt returns ModifyMetricModifyMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.metric.commonMetric.ModifiedAt
}

// GetCreatedBy returns ModifyMetricModifyMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetCreatedBy() string {
	return v.metric.commonMetric.CreatedBy
}

// GetModifiedBy returns ModifyMetricModifyMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetModifiedBy() string {
	return v.metric.commonMetric.ModifiedBy
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyMetricModifyMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyMetricModifyMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.metric)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyMetricModifyMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) __premarshalJSON() (*__premarshalModifyMetricModifyMetricMetricResponseMetric, error) {
	var retval __premarshalModifyMetricModifyMetricMetricResponseMetric

	retval.Id = v.metric.Id
	retval.DataPool = v.metric.DataPool
	retval.Dimensions = v.metric.Dimensions
	retval.Timestamp = v.metric.Timestamp
	retval.Measure = v.metric.Measure
	{

		dst := &retval.Settings
		src := v.metric.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifyMetricModifyMetricMetricResponseMetric.metric.Settings: %w", err)
		}
	}
	retval.Type = v.metric.Type
	retval.UniqueName = v.metric.commonMetric.UniqueName
	retval.Description = v.metric.commonMetric.Description
	retval.Account = v.metric.commonMetric.Account
	retval.Environment = v.metric.commonMetric.Environment
	retval.CreatedAt = v.metric.commonMetric.CreatedAt
	retval.ModifiedAt = v.metric.commonMetric.ModifiedAt
	retval.CreatedBy = v.metric.commonMetric.CreatedBy
	retval.ModifiedBy = v.metric.commonMetric.ModifiedBy
	return &retval, nil
}

// ModifyMetricResponse is returned by ModifyMetric on success.
type ModifyMetricResponse struct {
	ModifyMetric ModifyMetricModifyMetricMetricResponse `json:"modifyMetric"`
}

// GetModifyMetric returns ModifyMetricResponse.ModifyMetric, and is useful for accessing the field via an interface.
func (v *ModifyMetricResponse) GetModifyMetric() ModifyMetricModifyMetricMetricResponse {
	return v.ModifyMetric
}

type ModifySnowflakeDataSourceInput struct {
	IdOrUniqueName     IdOrUniqueName                          `json:"idOrUniqueName"`
	UniqueName         string                                  `json:"uniqueName"`
	Description        string                                  `json:"description"`
	ConnectionSettings PartialSnowflakeConnectionSettingsInput `json:"connectionSettings"`
}

// GetIdOrUniqueName returns ModifySnowflakeDataSourceInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetIdOrUniqueName() IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifySnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns ModifySnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetDescription() string { return v.Description }

// GetConnectionSettings returns ModifySnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetConnectionSettings() PartialSnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse struct {
	Typename   string                                                                         `json:"__typename"`
	DataSource ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetTypename() string {
	return v.Typename
}

// GetDataSource returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetDataSource() ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	dataSource `json:"-"`
}

// GetId returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.dataSource.Id
}

// GetType returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.dataSource.Type
}

// GetStatus returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.dataSource.Status
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetError() dataSourceError {
	return v.dataSource.Error
}

// GetConnectionSettings returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse struct {
	Typename string                                                                 `json:"__typename"`
	Error    ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetTypename() string {
	return v.Typename
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetError() ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError {
	return v.Error
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	gqlError `json:"-"`
}

// GetCode returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetCode() int {
	return v.gqlError.Code
}

// GetMessage returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.gqlError.Message
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.gqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError

	retval.Code = v.gqlError.Code
	retval.Message = v.gqlError.Message
	return &retval, nil
}

// ModifySnowflakeDataSourceResponse is returned by ModifySnowflakeDataSource on success.
type ModifySnowflakeDataSourceResponse struct {
	ModifySnowflakeDataSource ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetModifySnowflakeDataSource returns ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceResponse) GetModifySnowflakeDataSource() ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse {
	return v.ModifySnowflakeDataSource
}

func (v *ModifySnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceResponse
		ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ModifySnowflakeDataSource
		src := firstPass.ModifySnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceResponse struct {
	ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
}

func (v *ModifySnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceResponse, error) {
	var retval __premarshalModifySnowflakeDataSourceResponse

	{

		dst := &retval.ModifySnowflakeDataSource
		src := v.ModifySnowflakeDataSource
		var err error
		*dst, err = __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
		}
	}
	return &retval, nil
}

type PartialSnowflakeConnectionSettingsInput struct {
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

// GetAccount returns PartialSnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetAccount() string { return v.Account }

// GetDatabase returns PartialSnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetDatabase() string { return v.Database }

// GetWarehouse returns PartialSnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetWarehouse() string { return v.Warehouse }

// GetSchema returns PartialSnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetSchema() string { return v.Schema }

// GetUsername returns PartialSnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetUsername() string { return v.Username }

// GetPassword returns PartialSnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetPassword() string { return v.Password }

// GetRole returns PartialSnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetRole() string { return v.Role }

type SnowflakeConnectionSettingsInput struct {
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

// GetAccount returns SnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetAccount() string { return v.Account }

// GetDatabase returns SnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetDatabase() string { return v.Database }

// GetWarehouse returns SnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetWarehouse() string { return v.Warehouse }

// GetSchema returns SnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetSchema() string { return v.Schema }

// GetUsername returns SnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetUsername() string { return v.Username }

// GetPassword returns SnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetPassword() string { return v.Password }

// GetRole returns SnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetRole() string { return v.Role }

type SyncStatus string

const (
	// We are actively syncing records contained within the Sync.
	SyncStatusSyncing SyncStatus = "SYNCING"
	// We successfully synced all records contained within the Sync.
	SyncStatusSucceeded SyncStatus = "SUCCEEDED"
	// We failed to sync some or all records contained within the Sync.
	SyncStatusFailed SyncStatus = "FAILED"
	// We are deleting the Sync.
	SyncStatusDeleting SyncStatus = "DELETING"
)

type TableIntrospectionStatus string

const (
	TableIntrospectionStatusNotStarted TableIntrospectionStatus = "NOT_STARTED"
	TableIntrospectionStatusStarted    TableIntrospectionStatus = "STARTED"
	TableIntrospectionStatusSucceeded  TableIntrospectionStatus = "SUCCEEDED"
	TableIntrospectionStatusFailed     TableIntrospectionStatus = "FAILED"
)

// Override the TableLocation to sync a Data Pool to. Optional fields have sensible defaults.
type TableLocationInput struct {
	// The name of the table.
	Table string `json:"table"`
}

// GetTable returns TableLocationInput.Table, and is useful for accessing the field via an interface.
func (v *TableLocationInput) GetTable() string { return v.Table }

// __CreateCountDistinctMetricInput is used internally by genqlient
type __CreateCountDistinctMetricInput struct {
	Input CreateCountDistinctMetricInput `json:"input"`
}

// GetInput returns __CreateCountDistinctMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCountDistinctMetricInput) GetInput() CreateCountDistinctMetricInput { return v.Input }

// __CreateCountMetricInput is used internally by genqlient
type __CreateCountMetricInput struct {
	Input CreateCountMetricInput `json:"input"`
}

// GetInput returns __CreateCountMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCountMetricInput) GetInput() CreateCountMetricInput { return v.Input }

// __CreateDataPoolInput is used internally by genqlient
type __CreateDataPoolInput struct {
	Input CreateDataPoolInput `json:"input"`
}

// GetInput returns __CreateDataPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateDataPoolInput) GetInput() CreateDataPoolInput { return v.Input }

// __CreateSnowflakeDataSourceInput is used internally by genqlient
type __CreateSnowflakeDataSourceInput struct {
	Input CreateSnowflakeDataSourceInput `json:"input"`
}

// GetInput returns __CreateSnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSnowflakeDataSourceInput) GetInput() CreateSnowflakeDataSourceInput { return v.Input }

// __CreateSumMetricInput is used internally by genqlient
type __CreateSumMetricInput struct {
	Input CreateSumMetricInput `json:"input"`
}

// GetInput returns __CreateSumMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSumMetricInput) GetInput() CreateSumMetricInput { return v.Input }

// __DataPoolByNameInput is used internally by genqlient
type __DataPoolByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DataPoolByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DataPoolByNameInput) GetUniqueName() string { return v.UniqueName }

// __DataPoolInput is used internally by genqlient
type __DataPoolInput struct {
	Id string `json:"id"`
}

// GetId returns __DataPoolInput.Id, and is useful for accessing the field via an interface.
func (v *__DataPoolInput) GetId() string { return v.Id }

// __DataPoolsInput is used internally by genqlient
type __DataPoolsInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns __DataPoolsInput.First, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetFirst() int { return v.First }

// GetLast returns __DataPoolsInput.Last, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetLast() int { return v.Last }

// GetAfter returns __DataPoolsInput.After, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetAfter() string { return v.After }

// GetBefore returns __DataPoolsInput.Before, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetBefore() string { return v.Before }

// __DataSourceByNameInput is used internally by genqlient
type __DataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DataSourceInput is used internally by genqlient
type __DataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DataSourceInput) GetId() string { return v.Id }

// __DataSourcesInput is used internally by genqlient
type __DataSourcesInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns __DataSourcesInput.First, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetFirst() int { return v.First }

// GetLast returns __DataSourcesInput.Last, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetLast() int { return v.Last }

// GetAfter returns __DataSourcesInput.After, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetAfter() string { return v.After }

// GetBefore returns __DataSourcesInput.Before, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetBefore() string { return v.Before }

// __DeleteDataPoolByNameInput is used internally by genqlient
type __DeleteDataPoolByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteDataPoolByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteDataPoolByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteDataPoolInput is used internally by genqlient
type __DeleteDataPoolInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataPoolInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataPoolInput) GetId() string { return v.Id }

// __DeleteDataSourceByNameInput is used internally by genqlient
type __DeleteDataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteDataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteDataSourceInput is used internally by genqlient
type __DeleteDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceInput) GetId() string { return v.Id }

// __DeleteMetricByNameInput is used internally by genqlient
type __DeleteMetricByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteMetricByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteMetricByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteMetricInput is used internally by genqlient
type __DeleteMetricInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteMetricInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteMetricInput) GetId() string { return v.Id }

// __MetricByNameInput is used internally by genqlient
type __MetricByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __MetricByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__MetricByNameInput) GetUniqueName() string { return v.UniqueName }

// __MetricInput is used internally by genqlient
type __MetricInput struct {
	Id string `json:"id"`
}

// GetId returns __MetricInput.Id, and is useful for accessing the field via an interface.
func (v *__MetricInput) GetId() string { return v.Id }

// __MetricsInput is used internally by genqlient
type __MetricsInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns __MetricsInput.First, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetFirst() int { return v.First }

// GetLast returns __MetricsInput.Last, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetLast() int { return v.Last }

// GetAfter returns __MetricsInput.After, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetAfter() string { return v.After }

// GetBefore returns __MetricsInput.Before, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetBefore() string { return v.Before }

// __ModifyDataPoolInput is used internally by genqlient
type __ModifyDataPoolInput struct {
	Input ModifyDataPoolInput `json:"input"`
}

// GetInput returns __ModifyDataPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyDataPoolInput) GetInput() ModifyDataPoolInput { return v.Input }

// __ModifyMetricInput is used internally by genqlient
type __ModifyMetricInput struct {
	Input ModifyMetricInput `json:"input"`
}

// GetInput returns __ModifyMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyMetricInput) GetInput() ModifyMetricInput { return v.Input }

// __ModifySnowflakeDataSourceInput is used internally by genqlient
type __ModifySnowflakeDataSourceInput struct {
	Input ModifySnowflakeDataSourceInput `json:"input"`
}

// GetInput returns __ModifySnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifySnowflakeDataSourceInput) GetInput() ModifySnowflakeDataSourceInput { return v.Input }

// column includes the GraphQL fields of Column requested by the fragment column.
type column struct {
	Name         string    `json:"name"`
	Type         string    `json:"type"`
	Kind         string    `json:"kind"`
	IsNullable   bool      `json:"isNullable"`
	DefaultValue string    `json:"defaultValue"`
	IsPrimaryKey bool      `json:"isPrimaryKey"`
	IsUniqueKey  bool      `json:"isUniqueKey"`
	Comment      string    `json:"comment"`
	PolicyName   string    `json:"policyName"`
	CachedAt     time.Time `json:"cachedAt"`
	CreatedAt    time.Time `json:"createdAt"`
	CreatedBy    string    `json:"createdBy"`
}

// GetName returns column.Name, and is useful for accessing the field via an interface.
func (v *column) GetName() string { return v.Name }

// GetType returns column.Type, and is useful for accessing the field via an interface.
func (v *column) GetType() string { return v.Type }

// GetKind returns column.Kind, and is useful for accessing the field via an interface.
func (v *column) GetKind() string { return v.Kind }

// GetIsNullable returns column.IsNullable, and is useful for accessing the field via an interface.
func (v *column) GetIsNullable() bool { return v.IsNullable }

// GetDefaultValue returns column.DefaultValue, and is useful for accessing the field via an interface.
func (v *column) GetDefaultValue() string { return v.DefaultValue }

// GetIsPrimaryKey returns column.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *column) GetIsPrimaryKey() bool { return v.IsPrimaryKey }

// GetIsUniqueKey returns column.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *column) GetIsUniqueKey() bool { return v.IsUniqueKey }

// GetComment returns column.Comment, and is useful for accessing the field via an interface.
func (v *column) GetComment() string { return v.Comment }

// GetPolicyName returns column.PolicyName, and is useful for accessing the field via an interface.
func (v *column) GetPolicyName() string { return v.PolicyName }

// GetCachedAt returns column.CachedAt, and is useful for accessing the field via an interface.
func (v *column) GetCachedAt() time.Time { return v.CachedAt }

// GetCreatedAt returns column.CreatedAt, and is useful for accessing the field via an interface.
func (v *column) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns column.CreatedBy, and is useful for accessing the field via an interface.
func (v *column) GetCreatedBy() string { return v.CreatedBy }

// common includes the GraphQL fields of Common requested by the fragment common.
//
// common is implemented by the following types:
// commonApplication
// commonDataSource
// commonDataPool
// commonMetric
type common interface {
	implementsGraphQLInterfacecommon()
	// GetUniqueName returns the interface-field "uniqueName" from its implementation.
	GetUniqueName() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetAccount returns the interface-field "account" from its implementation.
	GetAccount() commonAccount
	// GetEnvironment returns the interface-field "environment" from its implementation.
	GetEnvironment() commonEnvironment
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetModifiedAt returns the interface-field "modifiedAt" from its implementation.
	GetModifiedAt() time.Time
	// GetCreatedBy returns the interface-field "createdBy" from its implementation.
	GetCreatedBy() string
	// GetModifiedBy returns the interface-field "modifiedBy" from its implementation.
	GetModifiedBy() string
}

func (v *commonApplication) implementsGraphQLInterfacecommon() {}
func (v *commonDataSource) implementsGraphQLInterfacecommon()  {}
func (v *commonDataPool) implementsGraphQLInterfacecommon()    {}
func (v *commonMetric) implementsGraphQLInterfacecommon()      {}

func __unmarshalcommon(b []byte, v *common) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Application":
		*v = new(commonApplication)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(commonDataSource)
		return json.Unmarshal(b, *v)
	case "DataPool":
		*v = new(commonDataPool)
		return json.Unmarshal(b, *v)
	case "Metric":
		*v = new(commonMetric)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Common.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for common: "%v"`, tn.TypeName)
	}
}

func __marshalcommon(v *common) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *commonApplication:
		typename = "Application"

		result := struct {
			TypeName string `json:"__typename"`
			*commonApplication
		}{typename, v}
		return json.Marshal(result)
	case *commonDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*commonDataSource
		}{typename, v}
		return json.Marshal(result)
	case *commonDataPool:
		typename = "DataPool"

		result := struct {
			TypeName string `json:"__typename"`
			*commonDataPool
		}{typename, v}
		return json.Marshal(result)
	case *commonMetric:
		typename = "Metric"

		result := struct {
			TypeName string `json:"__typename"`
			*commonMetric
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for common: "%T"`, v)
	}
}

// commonAccount includes the requested fields of the GraphQL type Account.
type commonAccount struct {
	Id string `json:"id"`
}

// GetId returns commonAccount.Id, and is useful for accessing the field via an interface.
func (v *commonAccount) GetId() string { return v.Id }

// common includes the GraphQL fields of Application requested by the fragment common.
type commonApplication struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonApplication.UniqueName, and is useful for accessing the field via an interface.
func (v *commonApplication) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonApplication.Description, and is useful for accessing the field via an interface.
func (v *commonApplication) GetDescription() string { return v.Description }

// GetAccount returns commonApplication.Account, and is useful for accessing the field via an interface.
func (v *commonApplication) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonApplication.Environment, and is useful for accessing the field via an interface.
func (v *commonApplication) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonApplication.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonApplication) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonApplication.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonApplication) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonApplication.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonApplication) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonApplication.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonApplication) GetModifiedBy() string { return v.ModifiedBy }

// common includes the GraphQL fields of DataPool requested by the fragment common.
type commonDataPool struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonDataPool.Description, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetDescription() string { return v.Description }

// GetAccount returns commonDataPool.Account, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonDataPool.Environment, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetModifiedBy() string { return v.ModifiedBy }

// common includes the GraphQL fields of DataSource requested by the fragment common.
type commonDataSource struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonDataSource.Description, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetDescription() string { return v.Description }

// GetAccount returns commonDataSource.Account, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonDataSource.Environment, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetModifiedBy() string { return v.ModifiedBy }

// commonEnvironment includes the requested fields of the GraphQL type Environment.
type commonEnvironment struct {
	Id string `json:"id"`
}

// GetId returns commonEnvironment.Id, and is useful for accessing the field via an interface.
func (v *commonEnvironment) GetId() string { return v.Id }

// common includes the GraphQL fields of Metric requested by the fragment common.
type commonMetric struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *commonMetric) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonMetric.Description, and is useful for accessing the field via an interface.
func (v *commonMetric) GetDescription() string { return v.Description }

// GetAccount returns commonMetric.Account, and is useful for accessing the field via an interface.
func (v *commonMetric) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonMetric.Environment, and is useful for accessing the field via an interface.
func (v *commonMetric) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonMetric) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonMetric) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonMetric) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonMetric) GetModifiedBy() string { return v.ModifiedBy }

// dataPool includes the GraphQL fields of DataPool requested by the fragment dataPool.
type dataPool struct {
	Id                string `json:"id"`
	commonDataPool    `json:"-"`
	DataSource        dataPoolDataSource                        `json:"dataSource"`
	Status            DataPoolStatus                            `json:"status"`
	Error             dataPoolError                             `json:"error"`
	Table             string                                    `json:"table"`
	Timestamp         dataPoolTimestampDimension                `json:"timestamp"`
	Columns           dataPoolColumnsColumnConnection           `json:"columns"`
	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`
	// A list of setup tasks performed on the Data Pool during its most recent setup attempt.
	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`
	Syncs      dataPoolSyncsSyncConnection           `json:"syncs"`
}

// GetId returns dataPool.Id, and is useful for accessing the field via an interface.
func (v *dataPool) GetId() string { return v.Id }

// GetDataSource returns dataPool.DataSource, and is useful for accessing the field via an interface.
func (v *dataPool) GetDataSource() dataPoolDataSource { return v.DataSource }

// GetStatus returns dataPool.Status, and is useful for accessing the field via an interface.
func (v *dataPool) GetStatus() DataPoolStatus { return v.Status }

// GetError returns dataPool.Error, and is useful for accessing the field via an interface.
func (v *dataPool) GetError() dataPoolError { return v.Error }

// GetTable returns dataPool.Table, and is useful for accessing the field via an interface.
func (v *dataPool) GetTable() string { return v.Table }

// GetTimestamp returns dataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *dataPool) GetTimestamp() dataPoolTimestampDimension { return v.Timestamp }

// GetColumns returns dataPool.Columns, and is useful for accessing the field via an interface.
func (v *dataPool) GetColumns() dataPoolColumnsColumnConnection { return v.Columns }

// GetAvailableMeasures returns dataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *dataPool) GetAvailableMeasures() dataPoolAvailableMeasuresColumnConnection {
	return v.AvailableMeasures
}

// GetSetupTasks returns dataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *dataPool) GetSetupTasks() []dataPoolSetupTasksDataPoolSetupTask { return v.SetupTasks }

// GetSyncs returns dataPool.Syncs, and is useful for accessing the field via an interface.
func (v *dataPool) GetSyncs() dataPoolSyncsSyncConnection { return v.Syncs }

// GetUniqueName returns dataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *dataPool) GetUniqueName() string { return v.commonDataPool.UniqueName }

// GetDescription returns dataPool.Description, and is useful for accessing the field via an interface.
func (v *dataPool) GetDescription() string { return v.commonDataPool.Description }

// GetAccount returns dataPool.Account, and is useful for accessing the field via an interface.
func (v *dataPool) GetAccount() commonAccount { return v.commonDataPool.Account }

// GetEnvironment returns dataPool.Environment, and is useful for accessing the field via an interface.
func (v *dataPool) GetEnvironment() commonEnvironment { return v.commonDataPool.Environment }

// GetCreatedAt returns dataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataPool) GetCreatedAt() time.Time { return v.commonDataPool.CreatedAt }

// GetModifiedAt returns dataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *dataPool) GetModifiedAt() time.Time { return v.commonDataPool.ModifiedAt }

// GetCreatedBy returns dataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataPool) GetCreatedBy() string { return v.commonDataPool.CreatedBy }

// GetModifiedBy returns dataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *dataPool) GetModifiedBy() string { return v.commonDataPool.ModifiedBy }

func (v *dataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.dataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.commonDataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataPool struct {
	Id string `json:"id"`

	DataSource dataPoolDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error dataPoolError `json:"error"`

	Table string `json:"table"`

	Timestamp dataPoolTimestampDimension `json:"timestamp"`

	Columns dataPoolColumnsColumnConnection `json:"columns"`

	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs dataPoolSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *dataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataPool) __premarshalJSON() (*__premarshaldataPool, error) {
	var retval __premarshaldataPool

	retval.Id = v.Id
	retval.DataSource = v.DataSource
	retval.Status = v.Status
	retval.Error = v.Error
	retval.Table = v.Table
	retval.Timestamp = v.Timestamp
	retval.Columns = v.Columns
	retval.AvailableMeasures = v.AvailableMeasures
	retval.SetupTasks = v.SetupTasks
	retval.Syncs = v.Syncs
	retval.UniqueName = v.commonDataPool.UniqueName
	retval.Description = v.commonDataPool.Description
	retval.Account = v.commonDataPool.Account
	retval.Environment = v.commonDataPool.Environment
	retval.CreatedAt = v.commonDataPool.CreatedAt
	retval.ModifiedAt = v.commonDataPool.ModifiedAt
	retval.CreatedBy = v.commonDataPool.CreatedBy
	retval.ModifiedBy = v.commonDataPool.ModifiedBy
	return &retval, nil
}

// dataPoolAvailableMeasuresColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type dataPoolAvailableMeasuresColumnConnection struct {
	Nodes []dataPoolAvailableMeasuresColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns dataPoolAvailableMeasuresColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnection) GetNodes() []dataPoolAvailableMeasuresColumnConnectionNodesColumn {
	return v.Nodes
}

// dataPoolAvailableMeasuresColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type dataPoolAvailableMeasuresColumnConnectionNodesColumn struct {
	column `json:"-"`
}

// GetName returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetName() string { return v.column.Name }

// GetType returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetType() string { return v.column.Type }

// GetKind returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetKind() string { return v.column.Kind }

// GetIsNullable returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.column.IsNullable
}

// GetDefaultValue returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.column.DefaultValue
}

// GetIsPrimaryKey returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.column.IsPrimaryKey
}

// GetIsUniqueKey returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.column.IsUniqueKey
}

// GetComment returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetComment() string {
	return v.column.Comment
}

// GetPolicyName returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetPolicyName() string {
	return v.column.PolicyName
}

// GetCachedAt returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.column.CachedAt
}

// GetCreatedAt returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.column.CreatedAt
}

// GetCreatedBy returns dataPoolAvailableMeasuresColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.column.CreatedBy
}

func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataPoolAvailableMeasuresColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.dataPoolAvailableMeasuresColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.column)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataPoolAvailableMeasuresColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataPoolAvailableMeasuresColumnConnectionNodesColumn) __premarshalJSON() (*__premarshaldataPoolAvailableMeasuresColumnConnectionNodesColumn, error) {
	var retval __premarshaldataPoolAvailableMeasuresColumnConnectionNodesColumn

	retval.Name = v.column.Name
	retval.Type = v.column.Type
	retval.Kind = v.column.Kind
	retval.IsNullable = v.column.IsNullable
	retval.DefaultValue = v.column.DefaultValue
	retval.IsPrimaryKey = v.column.IsPrimaryKey
	retval.IsUniqueKey = v.column.IsUniqueKey
	retval.Comment = v.column.Comment
	retval.PolicyName = v.column.PolicyName
	retval.CachedAt = v.column.CachedAt
	retval.CreatedAt = v.column.CreatedAt
	retval.CreatedBy = v.column.CreatedBy
	return &retval, nil
}

// dataPoolColumnsColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type dataPoolColumnsColumnConnection struct {
	Nodes []dataPoolColumnsColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns dataPoolColumnsColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnection) GetNodes() []dataPoolColumnsColumnConnectionNodesColumn {
	return v.Nodes
}

// dataPoolColumnsColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type dataPoolColumnsColumnConnectionNodesColumn struct {
	column `json:"-"`
}

// GetName returns dataPoolColumnsColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetName() string { return v.column.Name }

// GetType returns dataPoolColumnsColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetType() string { return v.column.Type }

// GetKind returns dataPoolColumnsColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetKind() string { return v.column.Kind }

// GetIsNullable returns dataPoolColumnsColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetIsNullable() bool { return v.column.IsNullable }

// GetDefaultValue returns dataPoolColumnsColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.column.DefaultValue
}

// GetIsPrimaryKey returns dataPoolColumnsColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.column.IsPrimaryKey
}

// GetIsUniqueKey returns dataPoolColumnsColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.column.IsUniqueKey
}

// GetComment returns dataPoolColumnsColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetComment() string { return v.column.Comment }

// GetPolicyName returns dataPoolColumnsColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetPolicyName() string {
	return v.column.PolicyName
}

// GetCachedAt returns dataPoolColumnsColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.column.CachedAt
}

// GetCreatedAt returns dataPoolColumnsColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.column.CreatedAt
}

// GetCreatedBy returns dataPoolColumnsColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataPoolColumnsColumnConnectionNodesColumn) GetCreatedBy() string { return v.column.CreatedBy }

func (v *dataPoolColumnsColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataPoolColumnsColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.dataPoolColumnsColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.column)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataPoolColumnsColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *dataPoolColumnsColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataPoolColumnsColumnConnectionNodesColumn) __premarshalJSON() (*__premarshaldataPoolColumnsColumnConnectionNodesColumn, error) {
	var retval __premarshaldataPoolColumnsColumnConnectionNodesColumn

	retval.Name = v.column.Name
	retval.Type = v.column.Type
	retval.Kind = v.column.Kind
	retval.IsNullable = v.column.IsNullable
	retval.DefaultValue = v.column.DefaultValue
	retval.IsPrimaryKey = v.column.IsPrimaryKey
	retval.IsUniqueKey = v.column.IsUniqueKey
	retval.Comment = v.column.Comment
	retval.PolicyName = v.column.PolicyName
	retval.CachedAt = v.column.CachedAt
	retval.CreatedAt = v.column.CreatedAt
	retval.CreatedBy = v.column.CreatedBy
	return &retval, nil
}

// dataPoolDataSource includes the requested fields of the GraphQL type DataSource.
type dataPoolDataSource struct {
	dataSource `json:"-"`
}

// GetId returns dataPoolDataSource.Id, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetId() string { return v.dataSource.Id }

// GetType returns dataPoolDataSource.Type, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetType() DataSourceType { return v.dataSource.Type }

// GetStatus returns dataPoolDataSource.Status, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetStatus() DataSourceStatus { return v.dataSource.Status }

// GetError returns dataPoolDataSource.Error, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetError() dataSourceError { return v.dataSource.Error }

// GetConnectionSettings returns dataPoolDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns dataPoolDataSource.Tables, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetTables() dataSourceTablesTableConnection { return v.dataSource.Tables }

// GetChecks returns dataPoolDataSource.Checks, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns dataPoolDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns dataPoolDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetUniqueName() string { return v.dataSource.commonDataSource.UniqueName }

// GetDescription returns dataPoolDataSource.Description, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns dataPoolDataSource.Account, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetAccount() commonAccount { return v.dataSource.commonDataSource.Account }

// GetEnvironment returns dataPoolDataSource.Environment, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns dataPoolDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetCreatedAt() time.Time { return v.dataSource.commonDataSource.CreatedAt }

// GetModifiedAt returns dataPoolDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns dataPoolDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetCreatedBy() string { return v.dataSource.commonDataSource.CreatedBy }

// GetModifiedBy returns dataPoolDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *dataPoolDataSource) GetModifiedBy() string { return v.dataSource.commonDataSource.ModifiedBy }

func (v *dataPoolDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataPoolDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.dataPoolDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataPoolDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *dataPoolDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataPoolDataSource) __premarshalJSON() (*__premarshaldataPoolDataSource, error) {
	var retval __premarshaldataPoolDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal dataPoolDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// dataPoolError includes the requested fields of the GraphQL type Error.
type dataPoolError struct {
	Message string `json:"message"`
}

// GetMessage returns dataPoolError.Message, and is useful for accessing the field via an interface.
func (v *dataPoolError) GetMessage() string { return v.Message }

// dataPoolSetupTasksDataPoolSetupTask includes the requested fields of the GraphQL type DataPoolSetupTask.
type dataPoolSetupTasksDataPoolSetupTask struct {
	// The name of the Data Pool setup task to be performed.
	Name string `json:"name"`
	// A description of the Data Pool setup task to be performed.
	Description string `json:"description"`
	// The status of the Data Pool setup task (all setup tasks begin as NOT_STARTED before transitioning to SUCCEEDED or FAILED).
	Status DataPoolSetupTaskStatus `json:"status"`
	// If the Data Pool setup task failed, this field includes a descriptive error message.
	Error dataPoolSetupTasksDataPoolSetupTaskError `json:"error"`
	// The time at which the Data Pool setup task was completed.
	CompletedAt time.Time `json:"completedAt"`
}

// GetName returns dataPoolSetupTasksDataPoolSetupTask.Name, and is useful for accessing the field via an interface.
func (v *dataPoolSetupTasksDataPoolSetupTask) GetName() string { return v.Name }

// GetDescription returns dataPoolSetupTasksDataPoolSetupTask.Description, and is useful for accessing the field via an interface.
func (v *dataPoolSetupTasksDataPoolSetupTask) GetDescription() string { return v.Description }

// GetStatus returns dataPoolSetupTasksDataPoolSetupTask.Status, and is useful for accessing the field via an interface.
func (v *dataPoolSetupTasksDataPoolSetupTask) GetStatus() DataPoolSetupTaskStatus { return v.Status }

// GetError returns dataPoolSetupTasksDataPoolSetupTask.Error, and is useful for accessing the field via an interface.
func (v *dataPoolSetupTasksDataPoolSetupTask) GetError() dataPoolSetupTasksDataPoolSetupTaskError {
	return v.Error
}

// GetCompletedAt returns dataPoolSetupTasksDataPoolSetupTask.CompletedAt, and is useful for accessing the field via an interface.
func (v *dataPoolSetupTasksDataPoolSetupTask) GetCompletedAt() time.Time { return v.CompletedAt }

// dataPoolSetupTasksDataPoolSetupTaskError includes the requested fields of the GraphQL type Error.
type dataPoolSetupTasksDataPoolSetupTaskError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns dataPoolSetupTasksDataPoolSetupTaskError.Code, and is useful for accessing the field via an interface.
func (v *dataPoolSetupTasksDataPoolSetupTaskError) GetCode() int { return v.Code }

// GetMessage returns dataPoolSetupTasksDataPoolSetupTaskError.Message, and is useful for accessing the field via an interface.
func (v *dataPoolSetupTasksDataPoolSetupTaskError) GetMessage() string { return v.Message }

// dataPoolSyncsSyncConnection includes the requested fields of the GraphQL type SyncConnection.
type dataPoolSyncsSyncConnection struct {
	Nodes []dataPoolSyncsSyncConnectionNodesSync `json:"nodes"`
}

// GetNodes returns dataPoolSyncsSyncConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnection) GetNodes() []dataPoolSyncsSyncConnectionNodesSync {
	return v.Nodes
}

// dataPoolSyncsSyncConnectionNodesSync includes the requested fields of the GraphQL type Sync.
type dataPoolSyncsSyncConnectionNodesSync struct {
	sync `json:"-"`
}

// GetId returns dataPoolSyncsSyncConnectionNodesSync.Id, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetId() string { return v.sync.Id }

// GetQueryId returns dataPoolSyncsSyncConnectionNodesSync.QueryId, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetQueryId() string { return v.sync.QueryId }

// GetStatus returns dataPoolSyncsSyncConnectionNodesSync.Status, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetStatus() SyncStatus { return v.sync.Status }

// GetNewRecords returns dataPoolSyncsSyncConnectionNodesSync.NewRecords, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetNewRecords() string { return v.sync.NewRecords }

// GetUpdatedRecords returns dataPoolSyncsSyncConnectionNodesSync.UpdatedRecords, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetUpdatedRecords() string {
	return v.sync.UpdatedRecords
}

// GetDeletedRecords returns dataPoolSyncsSyncConnectionNodesSync.DeletedRecords, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetDeletedRecords() string {
	return v.sync.DeletedRecords
}

// GetInvalidRecords returns dataPoolSyncsSyncConnectionNodesSync.InvalidRecords, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetInvalidRecords() string {
	return v.sync.InvalidRecords
}

// GetStartedAt returns dataPoolSyncsSyncConnectionNodesSync.StartedAt, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetStartedAt() time.Time { return v.sync.StartedAt }

// GetSucceededAt returns dataPoolSyncsSyncConnectionNodesSync.SucceededAt, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetSucceededAt() time.Time { return v.sync.SucceededAt }

// GetFailedAt returns dataPoolSyncsSyncConnectionNodesSync.FailedAt, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetFailedAt() time.Time { return v.sync.FailedAt }

// GetError returns dataPoolSyncsSyncConnectionNodesSync.Error, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetError() syncError { return v.sync.Error }

// GetCreatedAt returns dataPoolSyncsSyncConnectionNodesSync.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetCreatedAt() time.Time { return v.sync.CreatedAt }

// GetCreatedBy returns dataPoolSyncsSyncConnectionNodesSync.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetCreatedBy() string { return v.sync.CreatedBy }

// GetModifiedAt returns dataPoolSyncsSyncConnectionNodesSync.ModifiedAt, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetModifiedAt() time.Time { return v.sync.ModifiedAt }

// GetModifiedBy returns dataPoolSyncsSyncConnectionNodesSync.ModifiedBy, and is useful for accessing the field via an interface.
func (v *dataPoolSyncsSyncConnectionNodesSync) GetModifiedBy() string { return v.sync.ModifiedBy }

func (v *dataPoolSyncsSyncConnectionNodesSync) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataPoolSyncsSyncConnectionNodesSync
		graphql.NoUnmarshalJSON
	}
	firstPass.dataPoolSyncsSyncConnectionNodesSync = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.sync)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataPoolSyncsSyncConnectionNodesSync struct {
	Id string `json:"id"`

	QueryId string `json:"queryId"`

	Status SyncStatus `json:"status"`

	NewRecords string `json:"newRecords"`

	UpdatedRecords string `json:"updatedRecords"`

	DeletedRecords string `json:"deletedRecords"`

	InvalidRecords string `json:"invalidRecords"`

	StartedAt time.Time `json:"startedAt"`

	SucceededAt time.Time `json:"succeededAt"`

	FailedAt time.Time `json:"failedAt"`

	Error syncError `json:"error"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedAt time.Time `json:"modifiedAt"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *dataPoolSyncsSyncConnectionNodesSync) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataPoolSyncsSyncConnectionNodesSync) __premarshalJSON() (*__premarshaldataPoolSyncsSyncConnectionNodesSync, error) {
	var retval __premarshaldataPoolSyncsSyncConnectionNodesSync

	retval.Id = v.sync.Id
	retval.QueryId = v.sync.QueryId
	retval.Status = v.sync.Status
	retval.NewRecords = v.sync.NewRecords
	retval.UpdatedRecords = v.sync.UpdatedRecords
	retval.DeletedRecords = v.sync.DeletedRecords
	retval.InvalidRecords = v.sync.InvalidRecords
	retval.StartedAt = v.sync.StartedAt
	retval.SucceededAt = v.sync.SucceededAt
	retval.FailedAt = v.sync.FailedAt
	retval.Error = v.sync.Error
	retval.CreatedAt = v.sync.CreatedAt
	retval.CreatedBy = v.sync.CreatedBy
	retval.ModifiedAt = v.sync.ModifiedAt
	retval.ModifiedBy = v.sync.ModifiedBy
	return &retval, nil
}

// dataPoolTimestampDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type dataPoolTimestampDimension struct {
	dimension `json:"-"`
}

// GetColumnName returns dataPoolTimestampDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *dataPoolTimestampDimension) GetColumnName() string { return v.dimension.ColumnName }

// GetType returns dataPoolTimestampDimension.Type, and is useful for accessing the field via an interface.
func (v *dataPoolTimestampDimension) GetType() string { return v.dimension.Type }

// GetIsNullable returns dataPoolTimestampDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *dataPoolTimestampDimension) GetIsNullable() bool { return v.dimension.IsNullable }

// GetIsUniqueKey returns dataPoolTimestampDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dataPoolTimestampDimension) GetIsUniqueKey() bool { return v.dimension.IsUniqueKey }

func (v *dataPoolTimestampDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataPoolTimestampDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.dataPoolTimestampDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dimension)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataPoolTimestampDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *dataPoolTimestampDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataPoolTimestampDimension) __premarshalJSON() (*__premarshaldataPoolTimestampDimension, error) {
	var retval __premarshaldataPoolTimestampDimension

	retval.ColumnName = v.dimension.ColumnName
	retval.Type = v.dimension.Type
	retval.IsNullable = v.dimension.IsNullable
	retval.IsUniqueKey = v.dimension.IsUniqueKey
	return &retval, nil
}

// dataSource includes the GraphQL fields of DataSource requested by the fragment dataSource.
type dataSource struct {
	Id                 string `json:"id"`
	commonDataSource   `json:"-"`
	Type               DataSourceType                  `json:"type"`
	Status             DataSourceStatus                `json:"status"`
	Error              dataSourceError                 `json:"error"`
	ConnectionSettings dataSourceConnectionSettings    `json:"-"`
	Tables             dataSourceTablesTableConnection `json:"tables"`
	// A list of checks performed on the Data Source during its most recent connection attempt.
	Checks              []dataSourceChecksDataSourceCheck                         `json:"checks"`
	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`
}

// GetId returns dataSource.Id, and is useful for accessing the field via an interface.
func (v *dataSource) GetId() string { return v.Id }

// GetType returns dataSource.Type, and is useful for accessing the field via an interface.
func (v *dataSource) GetType() DataSourceType { return v.Type }

// GetStatus returns dataSource.Status, and is useful for accessing the field via an interface.
func (v *dataSource) GetStatus() DataSourceStatus { return v.Status }

// GetError returns dataSource.Error, and is useful for accessing the field via an interface.
func (v *dataSource) GetError() dataSourceError { return v.Error }

// GetConnectionSettings returns dataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *dataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.ConnectionSettings
}

// GetTables returns dataSource.Tables, and is useful for accessing the field via an interface.
func (v *dataSource) GetTables() dataSourceTablesTableConnection { return v.Tables }

// GetChecks returns dataSource.Checks, and is useful for accessing the field via an interface.
func (v *dataSource) GetChecks() []dataSourceChecksDataSourceCheck { return v.Checks }

// GetTableIntrospections returns dataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *dataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.TableIntrospections
}

// GetUniqueName returns dataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *dataSource) GetUniqueName() string { return v.commonDataSource.UniqueName }

// GetDescription returns dataSource.Description, and is useful for accessing the field via an interface.
func (v *dataSource) GetDescription() string { return v.commonDataSource.Description }

// GetAccount returns dataSource.Account, and is useful for accessing the field via an interface.
func (v *dataSource) GetAccount() commonAccount { return v.commonDataSource.Account }

// GetEnvironment returns dataSource.Environment, and is useful for accessing the field via an interface.
func (v *dataSource) GetEnvironment() commonEnvironment { return v.commonDataSource.Environment }

// GetCreatedAt returns dataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSource) GetCreatedAt() time.Time { return v.commonDataSource.CreatedAt }

// GetModifiedAt returns dataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *dataSource) GetModifiedAt() time.Time { return v.commonDataSource.ModifiedAt }

// GetCreatedBy returns dataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSource) GetCreatedBy() string { return v.commonDataSource.CreatedBy }

// GetModifiedBy returns dataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *dataSource) GetModifiedBy() string { return v.commonDataSource.ModifiedBy }

func (v *dataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSource
		ConnectionSettings json.RawMessage `json:"connectionSettings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.commonDataSource)
	if err != nil {
		return err
	}

	{
		dst := &v.ConnectionSettings
		src := firstPass.ConnectionSettings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshaldataSourceConnectionSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal dataSource.ConnectionSettings: %w", err)
			}
		}
	}
	return nil
}

type __premarshaldataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *dataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSource) __premarshalJSON() (*__premarshaldataSource, error) {
	var retval __premarshaldataSource

	retval.Id = v.Id
	retval.Type = v.Type
	retval.Status = v.Status
	retval.Error = v.Error
	{

		dst := &retval.ConnectionSettings
		src := v.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.Tables
	retval.Checks = v.Checks
	retval.TableIntrospections = v.TableIntrospections
	retval.UniqueName = v.commonDataSource.UniqueName
	retval.Description = v.commonDataSource.Description
	retval.Account = v.commonDataSource.Account
	retval.Environment = v.commonDataSource.Environment
	retval.CreatedAt = v.commonDataSource.CreatedAt
	retval.ModifiedAt = v.commonDataSource.ModifiedAt
	retval.CreatedBy = v.commonDataSource.CreatedBy
	retval.ModifiedBy = v.commonDataSource.ModifiedBy
	return &retval, nil
}

// dataSourceChecksDataSourceCheck includes the requested fields of the GraphQL type DataSourceCheck.
type dataSourceChecksDataSourceCheck struct {
	// The name of the Data Source check to be performed.
	Name string `json:"name"`
	// A description of the Data Source check to be performed.
	Description string `json:"description"`
	// The status of the Data Source check (all checks begin as NOT_STARTED before transitioning to SUCCEEDED or FAILED).
	Status DataSourceCheckStatus `json:"status"`
	// If the Data Source check failed, this field includes a descriptive error message.
	Error dataSourceChecksDataSourceCheckError `json:"error"`
	// The time at which the Data Source check was performed.
	CheckedAt time.Time `json:"checkedAt"`
}

// GetName returns dataSourceChecksDataSourceCheck.Name, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetName() string { return v.Name }

// GetDescription returns dataSourceChecksDataSourceCheck.Description, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetDescription() string { return v.Description }

// GetStatus returns dataSourceChecksDataSourceCheck.Status, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetStatus() DataSourceCheckStatus { return v.Status }

// GetError returns dataSourceChecksDataSourceCheck.Error, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetError() dataSourceChecksDataSourceCheckError {
	return v.Error
}

// GetCheckedAt returns dataSourceChecksDataSourceCheck.CheckedAt, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetCheckedAt() time.Time { return v.CheckedAt }

// dataSourceChecksDataSourceCheckError includes the requested fields of the GraphQL type Error.
type dataSourceChecksDataSourceCheckError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns dataSourceChecksDataSourceCheckError.Code, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheckError) GetCode() int { return v.Code }

// GetMessage returns dataSourceChecksDataSourceCheckError.Message, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheckError) GetMessage() string { return v.Message }

// dataSourceConnectionSettings includes the requested fields of the GraphQL interface ConnectionSettings.
//
// dataSourceConnectionSettings is implemented by the following types:
// dataSourceConnectionSettingsSnowflakeConnectionSettings
type dataSourceConnectionSettings interface {
	implementsGraphQLInterfacedataSourceConnectionSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) implementsGraphQLInterfacedataSourceConnectionSettings() {
}

func __unmarshaldataSourceConnectionSettings(b []byte, v *dataSourceConnectionSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "SnowflakeConnectionSettings":
		*v = new(dataSourceConnectionSettingsSnowflakeConnectionSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ConnectionSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for dataSourceConnectionSettings: "%v"`, tn.TypeName)
	}
}

func __marshaldataSourceConnectionSettings(v *dataSourceConnectionSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *dataSourceConnectionSettingsSnowflakeConnectionSettings:
		typename = "SnowflakeConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*dataSourceConnectionSettingsSnowflakeConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for dataSourceConnectionSettings: "%T"`, v)
	}
}

// dataSourceConnectionSettingsSnowflakeConnectionSettings includes the requested fields of the GraphQL type SnowflakeConnectionSettings.
type dataSourceConnectionSettingsSnowflakeConnectionSettings struct {
	Typename  string `json:"__typename"`
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Role      string `json:"role"`
}

// GetTypename returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetTypename() string {
	return v.Typename
}

// GetAccount returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Account, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetAccount() string {
	return v.Account
}

// GetDatabase returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Database, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetDatabase() string {
	return v.Database
}

// GetWarehouse returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Warehouse, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetWarehouse() string {
	return v.Warehouse
}

// GetSchema returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Schema, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetSchema() string { return v.Schema }

// GetUsername returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Username, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetUsername() string {
	return v.Username
}

// GetRole returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Role, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetRole() string { return v.Role }

// dataSourceError includes the requested fields of the GraphQL type Error.
type dataSourceError struct {
	Message string `json:"message"`
}

// GetMessage returns dataSourceError.Message, and is useful for accessing the field via an interface.
func (v *dataSourceError) GetMessage() string { return v.Message }

// dataSourceTableIntrospectionsTableIntrospectionConnection includes the requested fields of the GraphQL type TableIntrospectionConnection.
type dataSourceTableIntrospectionsTableIntrospectionConnection struct {
	Nodes []dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection `json:"nodes"`
}

// GetNodes returns dataSourceTableIntrospectionsTableIntrospectionConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnection) GetNodes() []dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection {
	return v.Nodes
}

// dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection includes the requested fields of the GraphQL type TableIntrospection.
type dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	tableIntrospection `json:"-"`
}

// GetDataSource returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.DataSource, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetDataSource() tableIntrospectionDataSource {
	return v.tableIntrospection.DataSource
}

// GetStatus returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.Status, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetStatus() TableIntrospectionStatus {
	return v.tableIntrospection.Status
}

// GetCreatedAt returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedAt() time.Time {
	return v.tableIntrospection.CreatedAt
}

// GetCreatedBy returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedBy() string {
	return v.tableIntrospection.CreatedBy
}

// GetModifiedAt returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedAt() time.Time {
	return v.tableIntrospection.ModifiedAt
}

// GetModifiedBy returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedBy() string {
	return v.tableIntrospection.ModifiedBy
}

// GetNumTables returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.NumTables, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetNumTables() int {
	return v.tableIntrospection.NumTables
}

func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tableIntrospection)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	DataSource tableIntrospectionDataSource `json:"dataSource"`

	Status TableIntrospectionStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedAt time.Time `json:"modifiedAt"`

	ModifiedBy string `json:"modifiedBy"`

	NumTables int `json:"numTables"`
}

func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) __premarshalJSON() (*__premarshaldataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection, error) {
	var retval __premarshaldataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection

	retval.DataSource = v.tableIntrospection.DataSource
	retval.Status = v.tableIntrospection.Status
	retval.CreatedAt = v.tableIntrospection.CreatedAt
	retval.CreatedBy = v.tableIntrospection.CreatedBy
	retval.ModifiedAt = v.tableIntrospection.ModifiedAt
	retval.ModifiedBy = v.tableIntrospection.ModifiedBy
	retval.NumTables = v.tableIntrospection.NumTables
	return &retval, nil
}

// dataSourceTablesTableConnection includes the requested fields of the GraphQL type TableConnection.
type dataSourceTablesTableConnection struct {
	Nodes []dataSourceTablesTableConnectionNodesTable `json:"nodes"`
}

// GetNodes returns dataSourceTablesTableConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnection) GetNodes() []dataSourceTablesTableConnectionNodesTable {
	return v.Nodes
}

// dataSourceTablesTableConnectionNodesTable includes the requested fields of the GraphQL type Table.
type dataSourceTablesTableConnectionNodesTable struct {
	Name                string                                                                       `json:"name"`
	AvailableTimestamps dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection `json:"availableTimestamps"`
	AvailableMeasures   dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection   `json:"availableMeasures"`
}

// GetName returns dataSourceTablesTableConnectionNodesTable.Name, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTable) GetName() string { return v.Name }

// GetAvailableTimestamps returns dataSourceTablesTableConnectionNodesTable.AvailableTimestamps, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTable) GetAvailableTimestamps() dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection {
	return v.AvailableTimestamps
}

// GetAvailableMeasures returns dataSourceTablesTableConnectionNodesTable.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTable) GetAvailableMeasures() dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection {
	return v.AvailableMeasures
}

// dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection struct {
	Nodes []dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection) GetNodes() []dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn {
	return v.Nodes
}

// dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn struct {
	column `json:"-"`
}

// GetName returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetName() string {
	return v.column.Name
}

// GetType returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetType() string {
	return v.column.Type
}

// GetKind returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetKind() string {
	return v.column.Kind
}

// GetIsNullable returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.column.IsNullable
}

// GetDefaultValue returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.column.DefaultValue
}

// GetIsPrimaryKey returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.column.IsPrimaryKey
}

// GetIsUniqueKey returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.column.IsUniqueKey
}

// GetComment returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetComment() string {
	return v.column.Comment
}

// GetPolicyName returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetPolicyName() string {
	return v.column.PolicyName
}

// GetCachedAt returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.column.CachedAt
}

// GetCreatedAt returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.column.CreatedAt
}

// GetCreatedBy returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.column.CreatedBy
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.column)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) __premarshalJSON() (*__premarshaldataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn, error) {
	var retval __premarshaldataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn

	retval.Name = v.column.Name
	retval.Type = v.column.Type
	retval.Kind = v.column.Kind
	retval.IsNullable = v.column.IsNullable
	retval.DefaultValue = v.column.DefaultValue
	retval.IsPrimaryKey = v.column.IsPrimaryKey
	retval.IsUniqueKey = v.column.IsUniqueKey
	retval.Comment = v.column.Comment
	retval.PolicyName = v.column.PolicyName
	retval.CachedAt = v.column.CachedAt
	retval.CreatedAt = v.column.CreatedAt
	retval.CreatedBy = v.column.CreatedBy
	return &retval, nil
}

// dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection struct {
	Nodes []dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection) GetNodes() []dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn {
	return v.Nodes
}

// dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn struct {
	column `json:"-"`
}

// GetName returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetName() string {
	return v.column.Name
}

// GetType returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetType() string {
	return v.column.Type
}

// GetKind returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetKind() string {
	return v.column.Kind
}

// GetIsNullable returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.column.IsNullable
}

// GetDefaultValue returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.column.DefaultValue
}

// GetIsPrimaryKey returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.column.IsPrimaryKey
}

// GetIsUniqueKey returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.column.IsUniqueKey
}

// GetComment returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetComment() string {
	return v.column.Comment
}

// GetPolicyName returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetPolicyName() string {
	return v.column.PolicyName
}

// GetCachedAt returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.column.CachedAt
}

// GetCreatedAt returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.column.CreatedAt
}

// GetCreatedBy returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.column.CreatedBy
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.column)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) __premarshalJSON() (*__premarshaldataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn, error) {
	var retval __premarshaldataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn

	retval.Name = v.column.Name
	retval.Type = v.column.Type
	retval.Kind = v.column.Kind
	retval.IsNullable = v.column.IsNullable
	retval.DefaultValue = v.column.DefaultValue
	retval.IsPrimaryKey = v.column.IsPrimaryKey
	retval.IsUniqueKey = v.column.IsUniqueKey
	retval.Comment = v.column.Comment
	retval.PolicyName = v.column.PolicyName
	retval.CachedAt = v.column.CachedAt
	retval.CreatedAt = v.column.CreatedAt
	retval.CreatedBy = v.column.CreatedBy
	return &retval, nil
}

// dimension includes the GraphQL fields of Dimension requested by the fragment dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type dimension struct {
	// The column name it represents.
	ColumnName string `json:"columnName"`
	// The column data type.
	Type string `json:"type"`
	// Whether the column is nullable.
	IsNullable bool `json:"isNullable"`
	// Whether the column is a unique key.
	IsUniqueKey bool `json:"isUniqueKey"`
}

// GetColumnName returns dimension.ColumnName, and is useful for accessing the field via an interface.
func (v *dimension) GetColumnName() string { return v.ColumnName }

// GetType returns dimension.Type, and is useful for accessing the field via an interface.
func (v *dimension) GetType() string { return v.Type }

// GetIsNullable returns dimension.IsNullable, and is useful for accessing the field via an interface.
func (v *dimension) GetIsNullable() bool { return v.IsNullable }

// GetIsUniqueKey returns dimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dimension) GetIsUniqueKey() bool { return v.IsUniqueKey }

// filter includes the GraphQL fields of Filter requested by the fragment filter.
type filter struct {
	Column   string         `json:"column"`
	Operator FilterOperator `json:"operator"`
	Value    string         `json:"value"`
}

// GetColumn returns filter.Column, and is useful for accessing the field via an interface.
func (v *filter) GetColumn() string { return v.Column }

// GetOperator returns filter.Operator, and is useful for accessing the field via an interface.
func (v *filter) GetOperator() FilterOperator { return v.Operator }

// GetValue returns filter.Value, and is useful for accessing the field via an interface.
func (v *filter) GetValue() string { return v.Value }

// gqlError includes the GraphQL fields of Error requested by the fragment gqlError.
type gqlError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns gqlError.Code, and is useful for accessing the field via an interface.
func (v *gqlError) GetCode() int { return v.Code }

// GetMessage returns gqlError.Message, and is useful for accessing the field via an interface.
func (v *gqlError) GetMessage() string { return v.Message }

// metric includes the GraphQL fields of Metric requested by the fragment metric.
type metric struct {
	commonMetric `json:"-"`
	Id           string `json:"id"`
	// The Data Pool that powers this Metric.
	DataPool   metricDataPool              `json:"dataPool"`
	Dimensions []metricDimensionsDimension `json:"dimensions"`
	Timestamp  metricTimestampDimension    `json:"timestamp"`
	Measure    metricMeasureDimension      `json:"measure"`
	// The settings for the Metric. The settings are specific to the Metric's type.
	Settings metricSettingsMetricSettings `json:"-"`
	// The Metric's type. The different Metric types determine how the values are calculated.
	Type MetricType `json:"type"`
}

// GetId returns metric.Id, and is useful for accessing the field via an interface.
func (v *metric) GetId() string { return v.Id }

// GetDataPool returns metric.DataPool, and is useful for accessing the field via an interface.
func (v *metric) GetDataPool() metricDataPool { return v.DataPool }

// GetDimensions returns metric.Dimensions, and is useful for accessing the field via an interface.
func (v *metric) GetDimensions() []metricDimensionsDimension { return v.Dimensions }

// GetTimestamp returns metric.Timestamp, and is useful for accessing the field via an interface.
func (v *metric) GetTimestamp() metricTimestampDimension { return v.Timestamp }

// GetMeasure returns metric.Measure, and is useful for accessing the field via an interface.
func (v *metric) GetMeasure() metricMeasureDimension { return v.Measure }

// GetSettings returns metric.Settings, and is useful for accessing the field via an interface.
func (v *metric) GetSettings() metricSettingsMetricSettings { return v.Settings }

// GetType returns metric.Type, and is useful for accessing the field via an interface.
func (v *metric) GetType() MetricType { return v.Type }

// GetUniqueName returns metric.UniqueName, and is useful for accessing the field via an interface.
func (v *metric) GetUniqueName() string { return v.commonMetric.UniqueName }

// GetDescription returns metric.Description, and is useful for accessing the field via an interface.
func (v *metric) GetDescription() string { return v.commonMetric.Description }

// GetAccount returns metric.Account, and is useful for accessing the field via an interface.
func (v *metric) GetAccount() commonAccount { return v.commonMetric.Account }

// GetEnvironment returns metric.Environment, and is useful for accessing the field via an interface.
func (v *metric) GetEnvironment() commonEnvironment { return v.commonMetric.Environment }

// GetCreatedAt returns metric.CreatedAt, and is useful for accessing the field via an interface.
func (v *metric) GetCreatedAt() time.Time { return v.commonMetric.CreatedAt }

// GetModifiedAt returns metric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *metric) GetModifiedAt() time.Time { return v.commonMetric.ModifiedAt }

// GetCreatedBy returns metric.CreatedBy, and is useful for accessing the field via an interface.
func (v *metric) GetCreatedBy() string { return v.commonMetric.CreatedBy }

// GetModifiedBy returns metric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *metric) GetModifiedBy() string { return v.commonMetric.ModifiedBy }

func (v *metric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metric
		Settings json.RawMessage `json:"settings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.metric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.commonMetric)
	if err != nil {
		return err
	}

	{
		dst := &v.Settings
		src := firstPass.Settings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalmetricSettingsMetricSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal metric.Settings: %w", err)
			}
		}
	}
	return nil
}

type __premarshalmetric struct {
	Id string `json:"id"`

	DataPool metricDataPool `json:"dataPool"`

	Dimensions []metricDimensionsDimension `json:"dimensions"`

	Timestamp metricTimestampDimension `json:"timestamp"`

	Measure metricMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *metric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metric) __premarshalJSON() (*__premarshalmetric, error) {
	var retval __premarshalmetric

	retval.Id = v.Id
	retval.DataPool = v.DataPool
	retval.Dimensions = v.Dimensions
	retval.Timestamp = v.Timestamp
	retval.Measure = v.Measure
	{

		dst := &retval.Settings
		src := v.Settings
		var err error
		*dst, err = __marshalmetricSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal metric.Settings: %w", err)
		}
	}
	retval.Type = v.Type
	retval.UniqueName = v.commonMetric.UniqueName
	retval.Description = v.commonMetric.Description
	retval.Account = v.commonMetric.Account
	retval.Environment = v.commonMetric.Environment
	retval.CreatedAt = v.commonMetric.CreatedAt
	retval.ModifiedAt = v.commonMetric.ModifiedAt
	retval.CreatedBy = v.commonMetric.CreatedBy
	retval.ModifiedBy = v.commonMetric.ModifiedBy
	return &retval, nil
}

// metricDataPool includes the requested fields of the GraphQL type DataPool.
type metricDataPool struct {
	dataPool `json:"-"`
}

// GetId returns metricDataPool.Id, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetId() string { return v.dataPool.Id }

// GetDataSource returns metricDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetDataSource() dataPoolDataSource { return v.dataPool.DataSource }

// GetStatus returns metricDataPool.Status, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetStatus() DataPoolStatus { return v.dataPool.Status }

// GetError returns metricDataPool.Error, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetError() dataPoolError { return v.dataPool.Error }

// GetTable returns metricDataPool.Table, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetTable() string { return v.dataPool.Table }

// GetTimestamp returns metricDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetTimestamp() dataPoolTimestampDimension { return v.dataPool.Timestamp }

// GetColumns returns metricDataPool.Columns, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetColumns() dataPoolColumnsColumnConnection { return v.dataPool.Columns }

// GetAvailableMeasures returns metricDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetAvailableMeasures() dataPoolAvailableMeasuresColumnConnection {
	return v.dataPool.AvailableMeasures
}

// GetSetupTasks returns metricDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetSetupTasks() []dataPoolSetupTasksDataPoolSetupTask {
	return v.dataPool.SetupTasks
}

// GetSyncs returns metricDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetSyncs() dataPoolSyncsSyncConnection { return v.dataPool.Syncs }

// GetUniqueName returns metricDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetUniqueName() string { return v.dataPool.commonDataPool.UniqueName }

// GetDescription returns metricDataPool.Description, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetDescription() string { return v.dataPool.commonDataPool.Description }

// GetAccount returns metricDataPool.Account, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetAccount() commonAccount { return v.dataPool.commonDataPool.Account }

// GetEnvironment returns metricDataPool.Environment, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetEnvironment() commonEnvironment {
	return v.dataPool.commonDataPool.Environment
}

// GetCreatedAt returns metricDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetCreatedAt() time.Time { return v.dataPool.commonDataPool.CreatedAt }

// GetModifiedAt returns metricDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetModifiedAt() time.Time { return v.dataPool.commonDataPool.ModifiedAt }

// GetCreatedBy returns metricDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetCreatedBy() string { return v.dataPool.commonDataPool.CreatedBy }

// GetModifiedBy returns metricDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *metricDataPool) GetModifiedBy() string { return v.dataPool.commonDataPool.ModifiedBy }

func (v *metricDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.metricDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricDataPool struct {
	Id string `json:"id"`

	DataSource dataPoolDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error dataPoolError `json:"error"`

	Table string `json:"table"`

	Timestamp dataPoolTimestampDimension `json:"timestamp"`

	Columns dataPoolColumnsColumnConnection `json:"columns"`

	AvailableMeasures dataPoolAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []dataPoolSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs dataPoolSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *metricDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricDataPool) __premarshalJSON() (*__premarshalmetricDataPool, error) {
	var retval __premarshalmetricDataPool

	retval.Id = v.dataPool.Id
	retval.DataSource = v.dataPool.DataSource
	retval.Status = v.dataPool.Status
	retval.Error = v.dataPool.Error
	retval.Table = v.dataPool.Table
	retval.Timestamp = v.dataPool.Timestamp
	retval.Columns = v.dataPool.Columns
	retval.AvailableMeasures = v.dataPool.AvailableMeasures
	retval.SetupTasks = v.dataPool.SetupTasks
	retval.Syncs = v.dataPool.Syncs
	retval.UniqueName = v.dataPool.commonDataPool.UniqueName
	retval.Description = v.dataPool.commonDataPool.Description
	retval.Account = v.dataPool.commonDataPool.Account
	retval.Environment = v.dataPool.commonDataPool.Environment
	retval.CreatedAt = v.dataPool.commonDataPool.CreatedAt
	retval.ModifiedAt = v.dataPool.commonDataPool.ModifiedAt
	retval.CreatedBy = v.dataPool.commonDataPool.CreatedBy
	retval.ModifiedBy = v.dataPool.commonDataPool.ModifiedBy
	return &retval, nil
}

// metricDimensionsDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type metricDimensionsDimension struct {
	dimension `json:"-"`
}

// GetColumnName returns metricDimensionsDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *metricDimensionsDimension) GetColumnName() string { return v.dimension.ColumnName }

// GetType returns metricDimensionsDimension.Type, and is useful for accessing the field via an interface.
func (v *metricDimensionsDimension) GetType() string { return v.dimension.Type }

// GetIsNullable returns metricDimensionsDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *metricDimensionsDimension) GetIsNullable() bool { return v.dimension.IsNullable }

// GetIsUniqueKey returns metricDimensionsDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *metricDimensionsDimension) GetIsUniqueKey() bool { return v.dimension.IsUniqueKey }

func (v *metricDimensionsDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricDimensionsDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.metricDimensionsDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dimension)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricDimensionsDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *metricDimensionsDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricDimensionsDimension) __premarshalJSON() (*__premarshalmetricDimensionsDimension, error) {
	var retval __premarshalmetricDimensionsDimension

	retval.ColumnName = v.dimension.ColumnName
	retval.Type = v.dimension.Type
	retval.IsNullable = v.dimension.IsNullable
	retval.IsUniqueKey = v.dimension.IsUniqueKey
	return &retval, nil
}

// metricMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type metricMeasureDimension struct {
	dimension `json:"-"`
}

// GetColumnName returns metricMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *metricMeasureDimension) GetColumnName() string { return v.dimension.ColumnName }

// GetType returns metricMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *metricMeasureDimension) GetType() string { return v.dimension.Type }

// GetIsNullable returns metricMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *metricMeasureDimension) GetIsNullable() bool { return v.dimension.IsNullable }

// GetIsUniqueKey returns metricMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *metricMeasureDimension) GetIsUniqueKey() bool { return v.dimension.IsUniqueKey }

func (v *metricMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.metricMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dimension)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *metricMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricMeasureDimension) __premarshalJSON() (*__premarshalmetricMeasureDimension, error) {
	var retval __premarshalmetricMeasureDimension

	retval.ColumnName = v.dimension.ColumnName
	retval.Type = v.dimension.Type
	retval.IsNullable = v.dimension.IsNullable
	retval.IsUniqueKey = v.dimension.IsUniqueKey
	return &retval, nil
}

// metricSettingsCountDistinctMetricSettings includes the requested fields of the GraphQL type CountDistinctMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for count distinct Metrics.
type metricSettingsCountDistinctMetricSettings struct {
	Typename string `json:"__typename"`
	// Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included. To filter at query time, add Dimensions and use the `filter` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query-time
	Filters []metricSettingsCountDistinctMetricSettingsFiltersFilter `json:"filters"`
	// The dimension where the count distinct is going to be performed.
	Dimension metricSettingsCountDistinctMetricSettingsDimension `json:"dimension"`
}

// GetTypename returns metricSettingsCountDistinctMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettings) GetTypename() string { return v.Typename }

// GetFilters returns metricSettingsCountDistinctMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettings) GetFilters() []metricSettingsCountDistinctMetricSettingsFiltersFilter {
	return v.Filters
}

// GetDimension returns metricSettingsCountDistinctMetricSettings.Dimension, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettings) GetDimension() metricSettingsCountDistinctMetricSettingsDimension {
	return v.Dimension
}

// metricSettingsCountDistinctMetricSettingsDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type metricSettingsCountDistinctMetricSettingsDimension struct {
	dimension `json:"-"`
}

// GetColumnName returns metricSettingsCountDistinctMetricSettingsDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettingsDimension) GetColumnName() string {
	return v.dimension.ColumnName
}

// GetType returns metricSettingsCountDistinctMetricSettingsDimension.Type, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettingsDimension) GetType() string {
	return v.dimension.Type
}

// GetIsNullable returns metricSettingsCountDistinctMetricSettingsDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettingsDimension) GetIsNullable() bool {
	return v.dimension.IsNullable
}

// GetIsUniqueKey returns metricSettingsCountDistinctMetricSettingsDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettingsDimension) GetIsUniqueKey() bool {
	return v.dimension.IsUniqueKey
}

func (v *metricSettingsCountDistinctMetricSettingsDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricSettingsCountDistinctMetricSettingsDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.metricSettingsCountDistinctMetricSettingsDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dimension)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricSettingsCountDistinctMetricSettingsDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *metricSettingsCountDistinctMetricSettingsDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricSettingsCountDistinctMetricSettingsDimension) __premarshalJSON() (*__premarshalmetricSettingsCountDistinctMetricSettingsDimension, error) {
	var retval __premarshalmetricSettingsCountDistinctMetricSettingsDimension

	retval.ColumnName = v.dimension.ColumnName
	retval.Type = v.dimension.Type
	retval.IsNullable = v.dimension.IsNullable
	retval.IsUniqueKey = v.dimension.IsUniqueKey
	return &retval, nil
}

// metricSettingsCountDistinctMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
type metricSettingsCountDistinctMetricSettingsFiltersFilter struct {
	filter `json:"-"`
}

// GetColumn returns metricSettingsCountDistinctMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettingsFiltersFilter) GetColumn() string {
	return v.filter.Column
}

// GetOperator returns metricSettingsCountDistinctMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.filter.Operator
}

// GetValue returns metricSettingsCountDistinctMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *metricSettingsCountDistinctMetricSettingsFiltersFilter) GetValue() string {
	return v.filter.Value
}

func (v *metricSettingsCountDistinctMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricSettingsCountDistinctMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.metricSettingsCountDistinctMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.filter)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricSettingsCountDistinctMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value string `json:"value"`
}

func (v *metricSettingsCountDistinctMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricSettingsCountDistinctMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalmetricSettingsCountDistinctMetricSettingsFiltersFilter, error) {
	var retval __premarshalmetricSettingsCountDistinctMetricSettingsFiltersFilter

	retval.Column = v.filter.Column
	retval.Operator = v.filter.Operator
	retval.Value = v.filter.Value
	return &retval, nil
}

// metricSettingsCountMetricSettings includes the requested fields of the GraphQL type CountMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for count Metrics.
type metricSettingsCountMetricSettings struct {
	Typename string `json:"__typename"`
	// Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included. To filter at query time, add Dimensions and use the `filter` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query-time
	Filters []metricSettingsCountMetricSettingsFiltersFilter `json:"filters"`
}

// GetTypename returns metricSettingsCountMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *metricSettingsCountMetricSettings) GetTypename() string { return v.Typename }

// GetFilters returns metricSettingsCountMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *metricSettingsCountMetricSettings) GetFilters() []metricSettingsCountMetricSettingsFiltersFilter {
	return v.Filters
}

// metricSettingsCountMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
type metricSettingsCountMetricSettingsFiltersFilter struct {
	filter `json:"-"`
}

// GetColumn returns metricSettingsCountMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *metricSettingsCountMetricSettingsFiltersFilter) GetColumn() string { return v.filter.Column }

// GetOperator returns metricSettingsCountMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *metricSettingsCountMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.filter.Operator
}

// GetValue returns metricSettingsCountMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *metricSettingsCountMetricSettingsFiltersFilter) GetValue() string { return v.filter.Value }

func (v *metricSettingsCountMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricSettingsCountMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.metricSettingsCountMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.filter)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricSettingsCountMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value string `json:"value"`
}

func (v *metricSettingsCountMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricSettingsCountMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalmetricSettingsCountMetricSettingsFiltersFilter, error) {
	var retval __premarshalmetricSettingsCountMetricSettingsFiltersFilter

	retval.Column = v.filter.Column
	retval.Operator = v.filter.Operator
	retval.Value = v.filter.Value
	return &retval, nil
}

// metricSettingsMetricSettings includes the requested fields of the GraphQL interface MetricSettings.
//
// metricSettingsMetricSettings is implemented by the following types:
// metricSettingsCountMetricSettings
// metricSettingsSumMetricSettings
// metricSettingsCountDistinctMetricSettings
// The GraphQL type's documentation follows.
//
// A Metric's settings, depending on its type.
type metricSettingsMetricSettings interface {
	implementsGraphQLInterfacemetricSettingsMetricSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *metricSettingsCountMetricSettings) implementsGraphQLInterfacemetricSettingsMetricSettings() {
}
func (v *metricSettingsSumMetricSettings) implementsGraphQLInterfacemetricSettingsMetricSettings() {}
func (v *metricSettingsCountDistinctMetricSettings) implementsGraphQLInterfacemetricSettingsMetricSettings() {
}

func __unmarshalmetricSettingsMetricSettings(b []byte, v *metricSettingsMetricSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CountMetricSettings":
		*v = new(metricSettingsCountMetricSettings)
		return json.Unmarshal(b, *v)
	case "SumMetricSettings":
		*v = new(metricSettingsSumMetricSettings)
		return json.Unmarshal(b, *v)
	case "CountDistinctMetricSettings":
		*v = new(metricSettingsCountDistinctMetricSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MetricSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for metricSettingsMetricSettings: "%v"`, tn.TypeName)
	}
}

func __marshalmetricSettingsMetricSettings(v *metricSettingsMetricSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *metricSettingsCountMetricSettings:
		typename = "CountMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*metricSettingsCountMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *metricSettingsSumMetricSettings:
		typename = "SumMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*metricSettingsSumMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *metricSettingsCountDistinctMetricSettings:
		typename = "CountDistinctMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*metricSettingsCountDistinctMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for metricSettingsMetricSettings: "%T"`, v)
	}
}

// metricSettingsSumMetricSettings includes the requested fields of the GraphQL type SumMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for sum Metrics.
type metricSettingsSumMetricSettings struct {
	Typename string `json:"__typename"`
	// Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included. To filter at query time, add Dimensions and use the `filter` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query-time
	Filters []metricSettingsSumMetricSettingsFiltersFilter `json:"filters"`
	// The dimension to be summed.
	Measure metricSettingsSumMetricSettingsMeasureDimension `json:"measure"`
}

// GetTypename returns metricSettingsSumMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettings) GetTypename() string { return v.Typename }

// GetFilters returns metricSettingsSumMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettings) GetFilters() []metricSettingsSumMetricSettingsFiltersFilter {
	return v.Filters
}

// GetMeasure returns metricSettingsSumMetricSettings.Measure, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettings) GetMeasure() metricSettingsSumMetricSettingsMeasureDimension {
	return v.Measure
}

// metricSettingsSumMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
type metricSettingsSumMetricSettingsFiltersFilter struct {
	filter `json:"-"`
}

// GetColumn returns metricSettingsSumMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettingsFiltersFilter) GetColumn() string { return v.filter.Column }

// GetOperator returns metricSettingsSumMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.filter.Operator
}

// GetValue returns metricSettingsSumMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettingsFiltersFilter) GetValue() string { return v.filter.Value }

func (v *metricSettingsSumMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricSettingsSumMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.metricSettingsSumMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.filter)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricSettingsSumMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value string `json:"value"`
}

func (v *metricSettingsSumMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricSettingsSumMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalmetricSettingsSumMetricSettingsFiltersFilter, error) {
	var retval __premarshalmetricSettingsSumMetricSettingsFiltersFilter

	retval.Column = v.filter.Column
	retval.Operator = v.filter.Operator
	retval.Value = v.filter.Value
	return &retval, nil
}

// metricSettingsSumMetricSettingsMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type metricSettingsSumMetricSettingsMeasureDimension struct {
	dimension `json:"-"`
}

// GetColumnName returns metricSettingsSumMetricSettingsMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettingsMeasureDimension) GetColumnName() string {
	return v.dimension.ColumnName
}

// GetType returns metricSettingsSumMetricSettingsMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettingsMeasureDimension) GetType() string { return v.dimension.Type }

// GetIsNullable returns metricSettingsSumMetricSettingsMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettingsMeasureDimension) GetIsNullable() bool {
	return v.dimension.IsNullable
}

// GetIsUniqueKey returns metricSettingsSumMetricSettingsMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *metricSettingsSumMetricSettingsMeasureDimension) GetIsUniqueKey() bool {
	return v.dimension.IsUniqueKey
}

func (v *metricSettingsSumMetricSettingsMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricSettingsSumMetricSettingsMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.metricSettingsSumMetricSettingsMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dimension)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricSettingsSumMetricSettingsMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *metricSettingsSumMetricSettingsMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricSettingsSumMetricSettingsMeasureDimension) __premarshalJSON() (*__premarshalmetricSettingsSumMetricSettingsMeasureDimension, error) {
	var retval __premarshalmetricSettingsSumMetricSettingsMeasureDimension

	retval.ColumnName = v.dimension.ColumnName
	retval.Type = v.dimension.Type
	retval.IsNullable = v.dimension.IsNullable
	retval.IsUniqueKey = v.dimension.IsUniqueKey
	return &retval, nil
}

// metricTimestampDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type metricTimestampDimension struct {
	dimension `json:"-"`
}

// GetColumnName returns metricTimestampDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *metricTimestampDimension) GetColumnName() string { return v.dimension.ColumnName }

// GetType returns metricTimestampDimension.Type, and is useful for accessing the field via an interface.
func (v *metricTimestampDimension) GetType() string { return v.dimension.Type }

// GetIsNullable returns metricTimestampDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *metricTimestampDimension) GetIsNullable() bool { return v.dimension.IsNullable }

// GetIsUniqueKey returns metricTimestampDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *metricTimestampDimension) GetIsUniqueKey() bool { return v.dimension.IsUniqueKey }

func (v *metricTimestampDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*metricTimestampDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.metricTimestampDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dimension)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmetricTimestampDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *metricTimestampDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *metricTimestampDimension) __premarshalJSON() (*__premarshalmetricTimestampDimension, error) {
	var retval __premarshalmetricTimestampDimension

	retval.ColumnName = v.dimension.ColumnName
	retval.Type = v.dimension.Type
	retval.IsNullable = v.dimension.IsNullable
	retval.IsUniqueKey = v.dimension.IsUniqueKey
	return &retval, nil
}

// pageInfo includes the GraphQL fields of PageInfo requested by the fragment pageInfo.
type pageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns pageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *pageInfo) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns pageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *pageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns pageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *pageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns pageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *pageInfo) GetHasPreviousPage() bool { return v.HasPreviousPage }

// sync includes the GraphQL fields of Sync requested by the fragment sync.
type sync struct {
	// The ID of the Sync resource.
	Id string `json:"id"`
	// This is the ID of the query which generated the Sync in Snowflake. In the future, this will become private.
	QueryId string `json:"queryId"`
	// The status of the Sync (all Syncs begin as SYNCING before transitioning to SUCCEEDED or FAILED).
	Status SyncStatus `json:"status"`
	// The number of new records contained within the Sync, if known. This excludes filtered records.
	NewRecords string `json:"newRecords"`
	// The number of updated records contained within the Sync, if known. This excludes filtered records.
	UpdatedRecords string `json:"updatedRecords"`
	// The number of deleted records contained within the Sync, if known. This excludes filtered records.
	DeletedRecords string `json:"deletedRecords"`
	// The number of filtered records contained within the Sync, due to issues such as missing time dimension, if
	// known.
	InvalidRecords string `json:"invalidRecords"`
	// The time at which the Sync started.
	StartedAt time.Time `json:"startedAt"`
	// The time at which the Sync succeeded.
	SucceededAt time.Time `json:"succeededAt"`
	// The time at which the Sync failed.
	FailedAt time.Time `json:"failedAt"`
	// If the Sync failed, this represents the reason the Sync failed.
	Error      syncError `json:"error"`
	CreatedAt  time.Time `json:"createdAt"`
	CreatedBy  string    `json:"createdBy"`
	ModifiedAt time.Time `json:"modifiedAt"`
	ModifiedBy string    `json:"modifiedBy"`
}

// GetId returns sync.Id, and is useful for accessing the field via an interface.
func (v *sync) GetId() string { return v.Id }

// GetQueryId returns sync.QueryId, and is useful for accessing the field via an interface.
func (v *sync) GetQueryId() string { return v.QueryId }

// GetStatus returns sync.Status, and is useful for accessing the field via an interface.
func (v *sync) GetStatus() SyncStatus { return v.Status }

// GetNewRecords returns sync.NewRecords, and is useful for accessing the field via an interface.
func (v *sync) GetNewRecords() string { return v.NewRecords }

// GetUpdatedRecords returns sync.UpdatedRecords, and is useful for accessing the field via an interface.
func (v *sync) GetUpdatedRecords() string { return v.UpdatedRecords }

// GetDeletedRecords returns sync.DeletedRecords, and is useful for accessing the field via an interface.
func (v *sync) GetDeletedRecords() string { return v.DeletedRecords }

// GetInvalidRecords returns sync.InvalidRecords, and is useful for accessing the field via an interface.
func (v *sync) GetInvalidRecords() string { return v.InvalidRecords }

// GetStartedAt returns sync.StartedAt, and is useful for accessing the field via an interface.
func (v *sync) GetStartedAt() time.Time { return v.StartedAt }

// GetSucceededAt returns sync.SucceededAt, and is useful for accessing the field via an interface.
func (v *sync) GetSucceededAt() time.Time { return v.SucceededAt }

// GetFailedAt returns sync.FailedAt, and is useful for accessing the field via an interface.
func (v *sync) GetFailedAt() time.Time { return v.FailedAt }

// GetError returns sync.Error, and is useful for accessing the field via an interface.
func (v *sync) GetError() syncError { return v.Error }

// GetCreatedAt returns sync.CreatedAt, and is useful for accessing the field via an interface.
func (v *sync) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns sync.CreatedBy, and is useful for accessing the field via an interface.
func (v *sync) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedAt returns sync.ModifiedAt, and is useful for accessing the field via an interface.
func (v *sync) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetModifiedBy returns sync.ModifiedBy, and is useful for accessing the field via an interface.
func (v *sync) GetModifiedBy() string { return v.ModifiedBy }

// syncError includes the requested fields of the GraphQL type Error.
type syncError struct {
	Message string `json:"message"`
}

// GetMessage returns syncError.Message, and is useful for accessing the field via an interface.
func (v *syncError) GetMessage() string { return v.Message }

// tableIntrospection includes the GraphQL fields of TableIntrospection requested by the fragment tableIntrospection.
type tableIntrospection struct {
	DataSource tableIntrospectionDataSource `json:"dataSource"`
	Status     TableIntrospectionStatus     `json:"status"`
	CreatedAt  time.Time                    `json:"createdAt"`
	CreatedBy  string                       `json:"createdBy"`
	ModifiedAt time.Time                    `json:"modifiedAt"`
	ModifiedBy string                       `json:"modifiedBy"`
	NumTables  int                          `json:"numTables"`
}

// GetDataSource returns tableIntrospection.DataSource, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetDataSource() tableIntrospectionDataSource { return v.DataSource }

// GetStatus returns tableIntrospection.Status, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetStatus() TableIntrospectionStatus { return v.Status }

// GetCreatedAt returns tableIntrospection.CreatedAt, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns tableIntrospection.CreatedBy, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedAt returns tableIntrospection.ModifiedAt, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetModifiedBy returns tableIntrospection.ModifiedBy, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetModifiedBy() string { return v.ModifiedBy }

// GetNumTables returns tableIntrospection.NumTables, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetNumTables() int { return v.NumTables }

// tableIntrospectionDataSource includes the requested fields of the GraphQL type DataSource.
type tableIntrospectionDataSource struct {
	Id string `json:"id"`
}

// GetId returns tableIntrospectionDataSource.Id, and is useful for accessing the field via an interface.
func (v *tableIntrospectionDataSource) GetId() string { return v.Id }

func CreateCountDistinctMetric(
	ctx context.Context,
	client graphql.Client,
	input CreateCountDistinctMetricInput,
) (*CreateCountDistinctMetricResponse, error) {
	__input := __CreateCountDistinctMetricInput{
		Input: input,
	}
	var err error

	var retval CreateCountDistinctMetricResponse
	err = client.MakeRequest(
		ctx,
		"CreateCountDistinctMetric",
		`
mutation CreateCountDistinctMetric ($input: CreateCountDistinctMetricInput) {
	createCountDistinctMetric(input: $input) {
		__typename
		metric {
			... metric
		}
	}
}
fragment metric on Metric {
	... common
	id
	dataPool {
		... dataPool
	}
	dimensions {
		... dimension
	}
	timestamp {
		... dimension
	}
	measure {
		... dimension
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... filter
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... filter
			}
			measure {
				... dimension
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... filter
			}
			dimension {
				... dimension
			}
		}
	}
	type
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment filter on Filter {
	column
	operator
	value
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateCountMetric(
	ctx context.Context,
	client graphql.Client,
	input CreateCountMetricInput,
) (*CreateCountMetricResponse, error) {
	__input := __CreateCountMetricInput{
		Input: input,
	}
	var err error

	var retval CreateCountMetricResponse
	err = client.MakeRequest(
		ctx,
		"CreateCountMetric",
		`
mutation CreateCountMetric ($input: CreateCountMetricInput) {
	createCountMetric(input: $input) {
		__typename
		metric {
			... metric
		}
	}
}
fragment metric on Metric {
	... common
	id
	dataPool {
		... dataPool
	}
	dimensions {
		... dimension
	}
	timestamp {
		... dimension
	}
	measure {
		... dimension
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... filter
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... filter
			}
			measure {
				... dimension
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... filter
			}
			dimension {
				... dimension
			}
		}
	}
	type
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment filter on Filter {
	column
	operator
	value
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateDataPool(
	ctx context.Context,
	client graphql.Client,
	input CreateDataPoolInput,
) (*CreateDataPoolResponse, error) {
	__input := __CreateDataPoolInput{
		Input: input,
	}
	var err error

	var retval CreateDataPoolResponse
	err = client.MakeRequest(
		ctx,
		"CreateDataPool",
		`
mutation CreateDataPool ($input: createDataPoolInput!) {
	createDataPool(input: $input) {
		__typename
		... on DataPoolResponse {
			dataPool {
				... dataPool
			}
		}
		... on FailureResponse {
			error {
				... gqlError
			}
		}
	}
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment gqlError on Error {
	code
	message
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateSnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input CreateSnowflakeDataSourceInput,
) (*CreateSnowflakeDataSourceResponse, error) {
	__input := __CreateSnowflakeDataSourceInput{
		Input: input,
	}
	var err error

	var retval CreateSnowflakeDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"CreateSnowflakeDataSource",
		`
mutation CreateSnowflakeDataSource ($input: createSnowflakeDataSourceInput!) {
	createSnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... dataSource
			}
		}
		... on FailureResponse {
			error {
				... gqlError
			}
		}
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment gqlError on Error {
	code
	message
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateSumMetric(
	ctx context.Context,
	client graphql.Client,
	input CreateSumMetricInput,
) (*CreateSumMetricResponse, error) {
	__input := __CreateSumMetricInput{
		Input: input,
	}
	var err error

	var retval CreateSumMetricResponse
	err = client.MakeRequest(
		ctx,
		"CreateSumMetric",
		`
mutation CreateSumMetric ($input: CreateSumMetricInput) {
	createSumMetric(input: $input) {
		__typename
		metric {
			... metric
		}
	}
}
fragment metric on Metric {
	... common
	id
	dataPool {
		... dataPool
	}
	dimensions {
		... dimension
	}
	timestamp {
		... dimension
	}
	measure {
		... dimension
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... filter
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... filter
			}
			measure {
				... dimension
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... filter
			}
			dimension {
				... dimension
			}
		}
	}
	type
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment filter on Filter {
	column
	operator
	value
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataPool(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataPoolResponse, error) {
	__input := __DataPoolInput{
		Id: id,
	}
	var err error

	var retval DataPoolResponse
	err = client.MakeRequest(
		ctx,
		"DataPool",
		`
query DataPool ($id: ID!) {
	dataPool(id: $id) {
		... dataPool
	}
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataPoolByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DataPoolByNameResponse, error) {
	__input := __DataPoolByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DataPoolByNameResponse
	err = client.MakeRequest(
		ctx,
		"DataPoolByName",
		`
query DataPoolByName ($uniqueName: String!) {
	dataPool: dataPoolByName(uniqueName: $uniqueName) {
		... dataPool
	}
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataPools(
	ctx context.Context,
	client graphql.Client,
	first int,
	last int,
	after string,
	before string,
) (*DataPoolsResponse, error) {
	__input := __DataPoolsInput{
		First:  first,
		Last:   last,
		After:  after,
		Before: before,
	}
	var err error

	var retval DataPoolsResponse
	err = client.MakeRequest(
		ctx,
		"DataPools",
		`
query DataPools ($first: Int, $last: Int, $after: String, $before: String) {
	dataPools(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... pageInfo
		}
		edges {
			node {
				... dataPool
			}
		}
	}
}
fragment pageInfo on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataSourceResponse, error) {
	__input := __DataSourceInput{
		Id: id,
	}
	var err error

	var retval DataSourceResponse
	err = client.MakeRequest(
		ctx,
		"DataSource",
		`
query DataSource ($id: ID!) {
	dataSource(id: $id) {
		... dataSource
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DataSourceByNameResponse, error) {
	__input := __DataSourceByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DataSourceByNameResponse
	err = client.MakeRequest(
		ctx,
		"DataSourceByName",
		`
query DataSourceByName ($uniqueName: String!) {
	dataSource: dataSourceByName(uniqueName: $uniqueName) {
		... dataSource
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSources(
	ctx context.Context,
	client graphql.Client,
	first int,
	last int,
	after string,
	before string,
) (*DataSourcesResponse, error) {
	__input := __DataSourcesInput{
		First:  first,
		Last:   last,
		After:  after,
		Before: before,
	}
	var err error

	var retval DataSourcesResponse
	err = client.MakeRequest(
		ctx,
		"DataSources",
		`
query DataSources ($first: Int, $last: Int, $after: String, $before: String) {
	dataSources(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... pageInfo
		}
		edges {
			node {
				... dataSource
			}
		}
	}
}
fragment pageInfo on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataPool(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataPoolResponse, error) {
	__input := __DeleteDataPoolInput{
		Id: id,
	}
	var err error

	var retval DeleteDataPoolResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataPool",
		`
mutation DeleteDataPool ($id: ID!) {
	deleteDataPool(id: $id)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataPoolByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteDataPoolByNameResponse, error) {
	__input := __DeleteDataPoolByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DeleteDataPoolByNameResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataPoolByName",
		`
mutation DeleteDataPoolByName ($uniqueName: String!) {
	deleteDataPoolByName(uniqueName: $uniqueName)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataSourceResponse, error) {
	__input := __DeleteDataSourceInput{
		Id: id,
	}
	var err error

	var retval DeleteDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataSource",
		`
mutation DeleteDataSource ($id: ID!) {
	deleteDataSource(id: $id)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteDataSourceByNameResponse, error) {
	__input := __DeleteDataSourceByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DeleteDataSourceByNameResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataSourceByName",
		`
mutation DeleteDataSourceByName ($uniqueName: String!) {
	deleteDataSourceByName(uniqueName: $uniqueName)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteMetric(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteMetricResponse, error) {
	__input := __DeleteMetricInput{
		Id: id,
	}
	var err error

	var retval DeleteMetricResponse
	err = client.MakeRequest(
		ctx,
		"DeleteMetric",
		`
mutation DeleteMetric ($id: ID!) {
	deleteMetric(id: $id)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteMetricByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteMetricByNameResponse, error) {
	__input := __DeleteMetricByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DeleteMetricByNameResponse
	err = client.MakeRequest(
		ctx,
		"DeleteMetricByName",
		`
mutation DeleteMetricByName ($uniqueName: String!) {
	deleteMetricByName(uniqueName: $uniqueName)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func Metric(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*MetricResponse, error) {
	__input := __MetricInput{
		Id: id,
	}
	var err error

	var retval MetricResponse
	err = client.MakeRequest(
		ctx,
		"Metric",
		`
query Metric ($id: ID!) {
	metric(id: $id) {
		... metric
	}
}
fragment metric on Metric {
	... common
	id
	dataPool {
		... dataPool
	}
	dimensions {
		... dimension
	}
	timestamp {
		... dimension
	}
	measure {
		... dimension
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... filter
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... filter
			}
			measure {
				... dimension
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... filter
			}
			dimension {
				... dimension
			}
		}
	}
	type
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment filter on Filter {
	column
	operator
	value
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func MetricByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*MetricByNameResponse, error) {
	__input := __MetricByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval MetricByNameResponse
	err = client.MakeRequest(
		ctx,
		"MetricByName",
		`
query MetricByName ($uniqueName: String!) {
	metric: metricByName(uniqueName: $uniqueName) {
		... metric
	}
}
fragment metric on Metric {
	... common
	id
	dataPool {
		... dataPool
	}
	dimensions {
		... dimension
	}
	timestamp {
		... dimension
	}
	measure {
		... dimension
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... filter
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... filter
			}
			measure {
				... dimension
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... filter
			}
			dimension {
				... dimension
			}
		}
	}
	type
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment filter on Filter {
	column
	operator
	value
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func Metrics(
	ctx context.Context,
	client graphql.Client,
	first int,
	last int,
	after string,
	before string,
) (*MetricsResponse, error) {
	__input := __MetricsInput{
		First:  first,
		Last:   last,
		After:  after,
		Before: before,
	}
	var err error

	var retval MetricsResponse
	err = client.MakeRequest(
		ctx,
		"Metrics",
		`
query Metrics ($first: Int, $last: Int, $after: String, $before: String) {
	metrics(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... pageInfo
		}
		nodes {
			... metric
		}
		edges {
			cursor
			node {
				... metric
			}
		}
	}
}
fragment pageInfo on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment metric on Metric {
	... common
	id
	dataPool {
		... dataPool
	}
	dimensions {
		... dimension
	}
	timestamp {
		... dimension
	}
	measure {
		... dimension
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... filter
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... filter
			}
			measure {
				... dimension
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... filter
			}
			dimension {
				... dimension
			}
		}
	}
	type
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment filter on Filter {
	column
	operator
	value
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func ModifyDataPool(
	ctx context.Context,
	client graphql.Client,
	input ModifyDataPoolInput,
) (*ModifyDataPoolResponse, error) {
	__input := __ModifyDataPoolInput{
		Input: input,
	}
	var err error

	var retval ModifyDataPoolResponse
	err = client.MakeRequest(
		ctx,
		"ModifyDataPool",
		`
mutation ModifyDataPool ($input: modifyDataPoolInput!) {
	modifyDataPool(input: $input) {
		__typename
		... on DataPoolResponse {
			dataPool {
				... dataPool
			}
		}
		... on FailureResponse {
			error {
				... gqlError
			}
		}
	}
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment gqlError on Error {
	code
	message
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func ModifyMetric(
	ctx context.Context,
	client graphql.Client,
	input ModifyMetricInput,
) (*ModifyMetricResponse, error) {
	__input := __ModifyMetricInput{
		Input: input,
	}
	var err error

	var retval ModifyMetricResponse
	err = client.MakeRequest(
		ctx,
		"ModifyMetric",
		`
mutation ModifyMetric ($input: ModifyMetricInput) {
	modifyMetric(input: $input) {
		__typename
		metric {
			... metric
		}
	}
}
fragment metric on Metric {
	... common
	id
	dataPool {
		... dataPool
	}
	dimensions {
		... dimension
	}
	timestamp {
		... dimension
	}
	measure {
		... dimension
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... filter
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... filter
			}
			measure {
				... dimension
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... filter
			}
			dimension {
				... dimension
			}
		}
	}
	type
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment dataPool on DataPool {
	id
	... common
	dataSource {
		... dataSource
	}
	status
	error {
		message
	}
	table
	timestamp {
		... dimension
	}
	columns {
		nodes {
			... column
		}
	}
	availableMeasures {
		nodes {
			... column
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... sync
		}
	}
}
fragment dimension on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment filter on Filter {
	column
	operator
	value
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment sync on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func ModifySnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input ModifySnowflakeDataSourceInput,
) (*ModifySnowflakeDataSourceResponse, error) {
	__input := __ModifySnowflakeDataSourceInput{
		Input: input,
	}
	var err error

	var retval ModifySnowflakeDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"ModifySnowflakeDataSource",
		`
mutation ModifySnowflakeDataSource ($input: modifySnowflakeDataSourceInput!) {
	modifySnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... dataSource
			}
		}
		... on FailureResponse {
			error {
				... gqlError
			}
		}
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment gqlError on Error {
	code
	message
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
