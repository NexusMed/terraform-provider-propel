// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package cms

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse struct {
	Typename   string                                                                         `json:"__typename"`
	DataSource CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetTypename() string {
	return v.Typename
}

// GetDataSource returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetDataSource() CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	dataSource `json:"-"`
}

// GetId returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.dataSource.Id
}

// GetType returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.dataSource.Type
}

// GetStatus returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.dataSource.Status
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetError() dataSourceError {
	return v.dataSource.Error
}

// GetConnectionSettings returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse struct {
	Typename string                                                                 `json:"__typename"`
	Error    CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetTypename() string {
	return v.Typename
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetError() CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError {
	return v.Error
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	gqlError `json:"-"`
}

// GetCode returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetCode() int {
	return v.gqlError.Code
}

// GetMessage returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.gqlError.Message
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.gqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError

	retval.Code = v.gqlError.Code
	retval.Message = v.gqlError.Message
	return &retval, nil
}

type CreateSnowflakeDataSourceInput struct {
	UniqueName         string                           `json:"uniqueName"`
	Description        string                           `json:"description"`
	ConnectionSettings SnowflakeConnectionSettingsInput `json:"connectionSettings"`
}

// GetUniqueName returns CreateSnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateSnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetDescription() string { return v.Description }

// GetConnectionSettings returns CreateSnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetConnectionSettings() SnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// CreateSnowflakeDataSourceResponse is returned by CreateSnowflakeDataSource on success.
type CreateSnowflakeDataSourceResponse struct {
	CreateSnowflakeDataSource CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetCreateSnowflakeDataSource returns CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceResponse) GetCreateSnowflakeDataSource() CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse {
	return v.CreateSnowflakeDataSource
}

func (v *CreateSnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceResponse
		CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateSnowflakeDataSource
		src := firstPass.CreateSnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceResponse struct {
	CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
}

func (v *CreateSnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceResponse, error) {
	var retval __premarshalCreateSnowflakeDataSourceResponse

	{

		dst := &retval.CreateSnowflakeDataSource
		src := v.CreateSnowflakeDataSource
		var err error
		*dst, err = __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
		}
	}
	return &retval, nil
}

// DataSourceByNameDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceByNameDataSource struct {
	dataSource `json:"-"`
}

// GetId returns DataSourceByNameDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetId() string { return v.dataSource.Id }

// GetType returns DataSourceByNameDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetType() DataSourceType { return v.dataSource.Type }

// GetStatus returns DataSourceByNameDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetStatus() DataSourceStatus { return v.dataSource.Status }

// GetError returns DataSourceByNameDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetError() dataSourceError { return v.dataSource.Error }

// GetConnectionSettings returns DataSourceByNameDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns DataSourceByNameDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns DataSourceByNameDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns DataSourceByNameDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns DataSourceByNameDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns DataSourceByNameDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns DataSourceByNameDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns DataSourceByNameDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns DataSourceByNameDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceByNameDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceByNameDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns DataSourceByNameDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *DataSourceByNameDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceByNameDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceByNameDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceByNameDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceByNameDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceByNameDataSource) __premarshalJSON() (*__premarshalDataSourceByNameDataSource, error) {
	var retval __premarshalDataSourceByNameDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourceByNameDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceByNameResponse is returned by DataSourceByName on success.
type DataSourceByNameResponse struct {
	DataSource DataSourceByNameDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceByNameResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceByNameResponse) GetDataSource() DataSourceByNameDataSource { return v.DataSource }

type DataSourceCheckStatus string

const (
	DataSourceCheckStatusNotStarted DataSourceCheckStatus = "NOT_STARTED"
	DataSourceCheckStatusSucceeded  DataSourceCheckStatus = "SUCCEEDED"
	DataSourceCheckStatusFailed     DataSourceCheckStatus = "FAILED"
)

// DataSourceDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceDataSource struct {
	dataSource `json:"-"`
}

// GetId returns DataSourceDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetId() string { return v.dataSource.Id }

// GetType returns DataSourceDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetType() DataSourceType { return v.dataSource.Type }

// GetStatus returns DataSourceDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetStatus() DataSourceStatus { return v.dataSource.Status }

// GetError returns DataSourceDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetError() dataSourceError { return v.dataSource.Error }

// GetConnectionSettings returns DataSourceDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns DataSourceDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns DataSourceDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns DataSourceDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns DataSourceDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns DataSourceDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns DataSourceDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns DataSourceDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns DataSourceDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedBy() string { return v.dataSource.commonDataSource.CreatedBy }

// GetModifiedBy returns DataSourceDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *DataSourceDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataSource) __premarshalJSON() (*__premarshalDataSourceDataSource, error) {
	var retval __premarshalDataSourceDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourceDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceResponse is returned by DataSource on success.
type DataSourceResponse struct {
	DataSource DataSourceDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceResponse) GetDataSource() DataSourceDataSource { return v.DataSource }

type DataSourceStatus string

const (
	DataSourceStatusCreated    DataSourceStatus = "CREATED"
	DataSourceStatusConnecting DataSourceStatus = "CONNECTING"
	DataSourceStatusConnected  DataSourceStatus = "CONNECTED"
	DataSourceStatusBroken     DataSourceStatus = "BROKEN"
	DataSourceStatusDeleting   DataSourceStatus = "DELETING"
)

type DataSourceType string

const (
	DataSourceTypeSnowflake DataSourceType = "Snowflake"
)

// DataSourcesDataSourcesDataSourceConnection includes the requested fields of the GraphQL type DataSourceConnection.
type DataSourcesDataSourcesDataSourceConnection struct {
	PageInfo DataSourcesDataSourcesDataSourceConnectionPageInfo              `json:"pageInfo"`
	Edges    []DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge `json:"edges"`
}

// GetPageInfo returns DataSourcesDataSourcesDataSourceConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetPageInfo() DataSourcesDataSourcesDataSourceConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns DataSourcesDataSourcesDataSourceConnection.Edges, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetEdges() []DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge {
	return v.Edges
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge includes the requested fields of the GraphQL type DataSourceEdge.
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge struct {
	Node DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource `json:"node"`
}

// GetNode returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge.Node, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge) GetNode() DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource {
	return v.Node
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	dataSource `json:"-"`
}

// GetId returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetId() string {
	return v.dataSource.Id
}

// GetType returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetType() DataSourceType {
	return v.dataSource.Type
}

// GetStatus returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetStatus() DataSourceStatus {
	return v.dataSource.Status
}

// GetError returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetError() dataSourceError {
	return v.dataSource.Error
}

// GetConnectionSettings returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// DataSourcesDataSourcesDataSourceConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type DataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	pageInfo `json:"-"`
}

// GetStartCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetStartCursor() string {
	return v.pageInfo.StartCursor
}

// GetEndCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetEndCursor() string {
	return v.pageInfo.EndCursor
}

// GetHasNextPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasNextPage() bool {
	return v.pageInfo.HasNextPage
}

// GetHasPreviousPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasPreviousPage() bool {
	return v.pageInfo.HasPreviousPage
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	StartCursor string `json:"startCursor"`

	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo

	retval.StartCursor = v.pageInfo.StartCursor
	retval.EndCursor = v.pageInfo.EndCursor
	retval.HasNextPage = v.pageInfo.HasNextPage
	retval.HasPreviousPage = v.pageInfo.HasPreviousPage
	return &retval, nil
}

// DataSourcesResponse is returned by DataSources on success.
type DataSourcesResponse struct {
	DataSources DataSourcesDataSourcesDataSourceConnection `json:"dataSources"`
}

// GetDataSources returns DataSourcesResponse.DataSources, and is useful for accessing the field via an interface.
func (v *DataSourcesResponse) GetDataSources() DataSourcesDataSourcesDataSourceConnection {
	return v.DataSources
}

// DeleteDataSourceByNameResponse is returned by DeleteDataSourceByName on success.
type DeleteDataSourceByNameResponse struct {
	DeleteDataSourceByName string `json:"deleteDataSourceByName"`
}

// GetDeleteDataSourceByName returns DeleteDataSourceByNameResponse.DeleteDataSourceByName, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceByNameResponse) GetDeleteDataSourceByName() string {
	return v.DeleteDataSourceByName
}

// DeleteDataSourceResponse is returned by DeleteDataSource on success.
type DeleteDataSourceResponse struct {
	DeleteDataSource string `json:"deleteDataSource"`
}

// GetDeleteDataSource returns DeleteDataSourceResponse.DeleteDataSource, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceResponse) GetDeleteDataSource() string { return v.DeleteDataSource }

type IdOrUniqueName struct {
	Id         string `json:"id"`
	UniqueName string `json:"uniqueName"`
}

// GetId returns IdOrUniqueName.Id, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetId() string { return v.Id }

// GetUniqueName returns IdOrUniqueName.UniqueName, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetUniqueName() string { return v.UniqueName }

type ModifySnowflakeDataSourceInput struct {
	IdOrUniqueName     IdOrUniqueName                          `json:"idOrUniqueName"`
	UniqueName         string                                  `json:"uniqueName"`
	Description        string                                  `json:"description"`
	ConnectionSettings PartialSnowflakeConnectionSettingsInput `json:"connectionSettings"`
}

// GetIdOrUniqueName returns ModifySnowflakeDataSourceInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetIdOrUniqueName() IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifySnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns ModifySnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetDescription() string { return v.Description }

// GetConnectionSettings returns ModifySnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetConnectionSettings() PartialSnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse struct {
	Typename   string                                                                         `json:"__typename"`
	DataSource ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetTypename() string {
	return v.Typename
}

// GetDataSource returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetDataSource() ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	dataSource `json:"-"`
}

// GetId returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.dataSource.Id
}

// GetType returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.dataSource.Type
}

// GetStatus returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.dataSource.Status
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetError() dataSourceError {
	return v.dataSource.Error
}

// GetConnectionSettings returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.dataSource.ConnectionSettings
}

// GetTables returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTables() dataSourceTablesTableConnection {
	return v.dataSource.Tables
}

// GetChecks returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []dataSourceChecksDataSourceCheck {
	return v.dataSource.Checks
}

// GetTableIntrospections returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.dataSource.TableIntrospections
}

// GetUniqueName returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.dataSource.commonDataSource.UniqueName
}

// GetDescription returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.dataSource.commonDataSource.Description
}

// GetAccount returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetAccount() commonAccount {
	return v.dataSource.commonDataSource.Account
}

// GetEnvironment returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() commonEnvironment {
	return v.dataSource.commonDataSource.Environment
}

// GetCreatedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.dataSource.commonDataSource.CreatedAt
}

// GetModifiedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.dataSource.commonDataSource.ModifiedAt
}

// GetCreatedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.dataSource.commonDataSource.CreatedBy
}

// GetModifiedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.dataSource.commonDataSource.ModifiedBy
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.dataSource)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.dataSource.Id
	retval.Type = v.dataSource.Type
	retval.Status = v.dataSource.Status
	retval.Error = v.dataSource.Error
	{

		dst := &retval.ConnectionSettings
		src := v.dataSource.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.dataSource.Tables
	retval.Checks = v.dataSource.Checks
	retval.TableIntrospections = v.dataSource.TableIntrospections
	retval.UniqueName = v.dataSource.commonDataSource.UniqueName
	retval.Description = v.dataSource.commonDataSource.Description
	retval.Account = v.dataSource.commonDataSource.Account
	retval.Environment = v.dataSource.commonDataSource.Environment
	retval.CreatedAt = v.dataSource.commonDataSource.CreatedAt
	retval.ModifiedAt = v.dataSource.commonDataSource.ModifiedAt
	retval.CreatedBy = v.dataSource.commonDataSource.CreatedBy
	retval.ModifiedBy = v.dataSource.commonDataSource.ModifiedBy
	return &retval, nil
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse struct {
	Typename string                                                                 `json:"__typename"`
	Error    ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetTypename() string {
	return v.Typename
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetError() ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError {
	return v.Error
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	gqlError `json:"-"`
}

// GetCode returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetCode() int {
	return v.gqlError.Code
}

// GetMessage returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.gqlError.Message
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.gqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError

	retval.Code = v.gqlError.Code
	retval.Message = v.gqlError.Message
	return &retval, nil
}

// ModifySnowflakeDataSourceResponse is returned by ModifySnowflakeDataSource on success.
type ModifySnowflakeDataSourceResponse struct {
	ModifySnowflakeDataSource ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetModifySnowflakeDataSource returns ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceResponse) GetModifySnowflakeDataSource() ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse {
	return v.ModifySnowflakeDataSource
}

func (v *ModifySnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceResponse
		ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ModifySnowflakeDataSource
		src := firstPass.ModifySnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceResponse struct {
	ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
}

func (v *ModifySnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceResponse, error) {
	var retval __premarshalModifySnowflakeDataSourceResponse

	{

		dst := &retval.ModifySnowflakeDataSource
		src := v.ModifySnowflakeDataSource
		var err error
		*dst, err = __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
		}
	}
	return &retval, nil
}

type PartialSnowflakeConnectionSettingsInput struct {
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

// GetAccount returns PartialSnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetAccount() string { return v.Account }

// GetDatabase returns PartialSnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetDatabase() string { return v.Database }

// GetWarehouse returns PartialSnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetWarehouse() string { return v.Warehouse }

// GetSchema returns PartialSnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetSchema() string { return v.Schema }

// GetUsername returns PartialSnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetUsername() string { return v.Username }

// GetPassword returns PartialSnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetPassword() string { return v.Password }

// GetRole returns PartialSnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetRole() string { return v.Role }

type SnowflakeConnectionSettingsInput struct {
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

// GetAccount returns SnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetAccount() string { return v.Account }

// GetDatabase returns SnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetDatabase() string { return v.Database }

// GetWarehouse returns SnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetWarehouse() string { return v.Warehouse }

// GetSchema returns SnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetSchema() string { return v.Schema }

// GetUsername returns SnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetUsername() string { return v.Username }

// GetPassword returns SnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetPassword() string { return v.Password }

// GetRole returns SnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetRole() string { return v.Role }

type TableIntrospectionStatus string

const (
	TableIntrospectionStatusNotStarted TableIntrospectionStatus = "NOT_STARTED"
	TableIntrospectionStatusStarted    TableIntrospectionStatus = "STARTED"
	TableIntrospectionStatusSucceeded  TableIntrospectionStatus = "SUCCEEDED"
	TableIntrospectionStatusFailed     TableIntrospectionStatus = "FAILED"
)

// __CreateSnowflakeDataSourceInput is used internally by genqlient
type __CreateSnowflakeDataSourceInput struct {
	Input CreateSnowflakeDataSourceInput `json:"input"`
}

// GetInput returns __CreateSnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSnowflakeDataSourceInput) GetInput() CreateSnowflakeDataSourceInput { return v.Input }

// __DataSourceByNameInput is used internally by genqlient
type __DataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DataSourceInput is used internally by genqlient
type __DataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DataSourceInput) GetId() string { return v.Id }

// __DataSourcesInput is used internally by genqlient
type __DataSourcesInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns __DataSourcesInput.First, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetFirst() int { return v.First }

// GetLast returns __DataSourcesInput.Last, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetLast() int { return v.Last }

// GetAfter returns __DataSourcesInput.After, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetAfter() string { return v.After }

// GetBefore returns __DataSourcesInput.Before, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetBefore() string { return v.Before }

// __DeleteDataSourceByNameInput is used internally by genqlient
type __DeleteDataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteDataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteDataSourceInput is used internally by genqlient
type __DeleteDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceInput) GetId() string { return v.Id }

// __ModifySnowflakeDataSourceInput is used internally by genqlient
type __ModifySnowflakeDataSourceInput struct {
	Input ModifySnowflakeDataSourceInput `json:"input"`
}

// GetInput returns __ModifySnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifySnowflakeDataSourceInput) GetInput() ModifySnowflakeDataSourceInput { return v.Input }

// column includes the GraphQL fields of Column requested by the fragment column.
type column struct {
	Name         string    `json:"name"`
	Type         string    `json:"type"`
	Kind         string    `json:"kind"`
	IsNullable   bool      `json:"isNullable"`
	DefaultValue string    `json:"defaultValue"`
	IsPrimaryKey bool      `json:"isPrimaryKey"`
	IsUniqueKey  bool      `json:"isUniqueKey"`
	Comment      string    `json:"comment"`
	PolicyName   string    `json:"policyName"`
	CachedAt     time.Time `json:"cachedAt"`
	CreatedAt    time.Time `json:"createdAt"`
	CreatedBy    string    `json:"createdBy"`
}

// GetName returns column.Name, and is useful for accessing the field via an interface.
func (v *column) GetName() string { return v.Name }

// GetType returns column.Type, and is useful for accessing the field via an interface.
func (v *column) GetType() string { return v.Type }

// GetKind returns column.Kind, and is useful for accessing the field via an interface.
func (v *column) GetKind() string { return v.Kind }

// GetIsNullable returns column.IsNullable, and is useful for accessing the field via an interface.
func (v *column) GetIsNullable() bool { return v.IsNullable }

// GetDefaultValue returns column.DefaultValue, and is useful for accessing the field via an interface.
func (v *column) GetDefaultValue() string { return v.DefaultValue }

// GetIsPrimaryKey returns column.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *column) GetIsPrimaryKey() bool { return v.IsPrimaryKey }

// GetIsUniqueKey returns column.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *column) GetIsUniqueKey() bool { return v.IsUniqueKey }

// GetComment returns column.Comment, and is useful for accessing the field via an interface.
func (v *column) GetComment() string { return v.Comment }

// GetPolicyName returns column.PolicyName, and is useful for accessing the field via an interface.
func (v *column) GetPolicyName() string { return v.PolicyName }

// GetCachedAt returns column.CachedAt, and is useful for accessing the field via an interface.
func (v *column) GetCachedAt() time.Time { return v.CachedAt }

// GetCreatedAt returns column.CreatedAt, and is useful for accessing the field via an interface.
func (v *column) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns column.CreatedBy, and is useful for accessing the field via an interface.
func (v *column) GetCreatedBy() string { return v.CreatedBy }

// common includes the GraphQL fields of Common requested by the fragment common.
//
// common is implemented by the following types:
// commonApplication
// commonDataSource
// commonDataPool
// commonMetric
type common interface {
	implementsGraphQLInterfacecommon()
	// GetUniqueName returns the interface-field "uniqueName" from its implementation.
	GetUniqueName() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetAccount returns the interface-field "account" from its implementation.
	GetAccount() commonAccount
	// GetEnvironment returns the interface-field "environment" from its implementation.
	GetEnvironment() commonEnvironment
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetModifiedAt returns the interface-field "modifiedAt" from its implementation.
	GetModifiedAt() time.Time
	// GetCreatedBy returns the interface-field "createdBy" from its implementation.
	GetCreatedBy() string
	// GetModifiedBy returns the interface-field "modifiedBy" from its implementation.
	GetModifiedBy() string
}

func (v *commonApplication) implementsGraphQLInterfacecommon() {}
func (v *commonDataSource) implementsGraphQLInterfacecommon()  {}
func (v *commonDataPool) implementsGraphQLInterfacecommon()    {}
func (v *commonMetric) implementsGraphQLInterfacecommon()      {}

func __unmarshalcommon(b []byte, v *common) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Application":
		*v = new(commonApplication)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(commonDataSource)
		return json.Unmarshal(b, *v)
	case "DataPool":
		*v = new(commonDataPool)
		return json.Unmarshal(b, *v)
	case "Metric":
		*v = new(commonMetric)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Common.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for common: "%v"`, tn.TypeName)
	}
}

func __marshalcommon(v *common) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *commonApplication:
		typename = "Application"

		result := struct {
			TypeName string `json:"__typename"`
			*commonApplication
		}{typename, v}
		return json.Marshal(result)
	case *commonDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*commonDataSource
		}{typename, v}
		return json.Marshal(result)
	case *commonDataPool:
		typename = "DataPool"

		result := struct {
			TypeName string `json:"__typename"`
			*commonDataPool
		}{typename, v}
		return json.Marshal(result)
	case *commonMetric:
		typename = "Metric"

		result := struct {
			TypeName string `json:"__typename"`
			*commonMetric
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for common: "%T"`, v)
	}
}

// commonAccount includes the requested fields of the GraphQL type Account.
type commonAccount struct {
	Id string `json:"id"`
}

// GetId returns commonAccount.Id, and is useful for accessing the field via an interface.
func (v *commonAccount) GetId() string { return v.Id }

// common includes the GraphQL fields of Application requested by the fragment common.
type commonApplication struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonApplication.UniqueName, and is useful for accessing the field via an interface.
func (v *commonApplication) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonApplication.Description, and is useful for accessing the field via an interface.
func (v *commonApplication) GetDescription() string { return v.Description }

// GetAccount returns commonApplication.Account, and is useful for accessing the field via an interface.
func (v *commonApplication) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonApplication.Environment, and is useful for accessing the field via an interface.
func (v *commonApplication) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonApplication.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonApplication) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonApplication.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonApplication) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonApplication.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonApplication) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonApplication.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonApplication) GetModifiedBy() string { return v.ModifiedBy }

// common includes the GraphQL fields of DataPool requested by the fragment common.
type commonDataPool struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonDataPool.Description, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetDescription() string { return v.Description }

// GetAccount returns commonDataPool.Account, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonDataPool.Environment, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonDataPool) GetModifiedBy() string { return v.ModifiedBy }

// common includes the GraphQL fields of DataSource requested by the fragment common.
type commonDataSource struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonDataSource.Description, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetDescription() string { return v.Description }

// GetAccount returns commonDataSource.Account, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonDataSource.Environment, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonDataSource) GetModifiedBy() string { return v.ModifiedBy }

// commonEnvironment includes the requested fields of the GraphQL type Environment.
type commonEnvironment struct {
	Id string `json:"id"`
}

// GetId returns commonEnvironment.Id, and is useful for accessing the field via an interface.
func (v *commonEnvironment) GetId() string { return v.Id }

// common includes the GraphQL fields of Metric requested by the fragment common.
type commonMetric struct {
	UniqueName  string            `json:"uniqueName"`
	Description string            `json:"description"`
	Account     commonAccount     `json:"account"`
	Environment commonEnvironment `json:"environment"`
	CreatedAt   time.Time         `json:"createdAt"`
	ModifiedAt  time.Time         `json:"modifiedAt"`
	CreatedBy   string            `json:"createdBy"`
	ModifiedBy  string            `json:"modifiedBy"`
}

// GetUniqueName returns commonMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *commonMetric) GetUniqueName() string { return v.UniqueName }

// GetDescription returns commonMetric.Description, and is useful for accessing the field via an interface.
func (v *commonMetric) GetDescription() string { return v.Description }

// GetAccount returns commonMetric.Account, and is useful for accessing the field via an interface.
func (v *commonMetric) GetAccount() commonAccount { return v.Account }

// GetEnvironment returns commonMetric.Environment, and is useful for accessing the field via an interface.
func (v *commonMetric) GetEnvironment() commonEnvironment { return v.Environment }

// GetCreatedAt returns commonMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *commonMetric) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns commonMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *commonMetric) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns commonMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *commonMetric) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns commonMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *commonMetric) GetModifiedBy() string { return v.ModifiedBy }

// dataSource includes the GraphQL fields of DataSource requested by the fragment dataSource.
type dataSource struct {
	Id                 string `json:"id"`
	commonDataSource   `json:"-"`
	Type               DataSourceType                  `json:"type"`
	Status             DataSourceStatus                `json:"status"`
	Error              dataSourceError                 `json:"error"`
	ConnectionSettings dataSourceConnectionSettings    `json:"-"`
	Tables             dataSourceTablesTableConnection `json:"tables"`
	// A list of checks performed on the Data Source during its most recent connection attempt.
	Checks              []dataSourceChecksDataSourceCheck                         `json:"checks"`
	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`
}

// GetId returns dataSource.Id, and is useful for accessing the field via an interface.
func (v *dataSource) GetId() string { return v.Id }

// GetType returns dataSource.Type, and is useful for accessing the field via an interface.
func (v *dataSource) GetType() DataSourceType { return v.Type }

// GetStatus returns dataSource.Status, and is useful for accessing the field via an interface.
func (v *dataSource) GetStatus() DataSourceStatus { return v.Status }

// GetError returns dataSource.Error, and is useful for accessing the field via an interface.
func (v *dataSource) GetError() dataSourceError { return v.Error }

// GetConnectionSettings returns dataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *dataSource) GetConnectionSettings() dataSourceConnectionSettings {
	return v.ConnectionSettings
}

// GetTables returns dataSource.Tables, and is useful for accessing the field via an interface.
func (v *dataSource) GetTables() dataSourceTablesTableConnection { return v.Tables }

// GetChecks returns dataSource.Checks, and is useful for accessing the field via an interface.
func (v *dataSource) GetChecks() []dataSourceChecksDataSourceCheck { return v.Checks }

// GetTableIntrospections returns dataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *dataSource) GetTableIntrospections() dataSourceTableIntrospectionsTableIntrospectionConnection {
	return v.TableIntrospections
}

// GetUniqueName returns dataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *dataSource) GetUniqueName() string { return v.commonDataSource.UniqueName }

// GetDescription returns dataSource.Description, and is useful for accessing the field via an interface.
func (v *dataSource) GetDescription() string { return v.commonDataSource.Description }

// GetAccount returns dataSource.Account, and is useful for accessing the field via an interface.
func (v *dataSource) GetAccount() commonAccount { return v.commonDataSource.Account }

// GetEnvironment returns dataSource.Environment, and is useful for accessing the field via an interface.
func (v *dataSource) GetEnvironment() commonEnvironment { return v.commonDataSource.Environment }

// GetCreatedAt returns dataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSource) GetCreatedAt() time.Time { return v.commonDataSource.CreatedAt }

// GetModifiedAt returns dataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *dataSource) GetModifiedAt() time.Time { return v.commonDataSource.ModifiedAt }

// GetCreatedBy returns dataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSource) GetCreatedBy() string { return v.commonDataSource.CreatedBy }

// GetModifiedBy returns dataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *dataSource) GetModifiedBy() string { return v.commonDataSource.ModifiedBy }

func (v *dataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSource
		ConnectionSettings json.RawMessage `json:"connectionSettings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.commonDataSource)
	if err != nil {
		return err
	}

	{
		dst := &v.ConnectionSettings
		src := firstPass.ConnectionSettings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshaldataSourceConnectionSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal dataSource.ConnectionSettings: %w", err)
			}
		}
	}
	return nil
}

type __premarshaldataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error dataSourceError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables dataSourceTablesTableConnection `json:"tables"`

	Checks []dataSourceChecksDataSourceCheck `json:"checks"`

	TableIntrospections dataSourceTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account commonAccount `json:"account"`

	Environment commonEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *dataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSource) __premarshalJSON() (*__premarshaldataSource, error) {
	var retval __premarshaldataSource

	retval.Id = v.Id
	retval.Type = v.Type
	retval.Status = v.Status
	retval.Error = v.Error
	{

		dst := &retval.ConnectionSettings
		src := v.ConnectionSettings
		var err error
		*dst, err = __marshaldataSourceConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal dataSource.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.Tables
	retval.Checks = v.Checks
	retval.TableIntrospections = v.TableIntrospections
	retval.UniqueName = v.commonDataSource.UniqueName
	retval.Description = v.commonDataSource.Description
	retval.Account = v.commonDataSource.Account
	retval.Environment = v.commonDataSource.Environment
	retval.CreatedAt = v.commonDataSource.CreatedAt
	retval.ModifiedAt = v.commonDataSource.ModifiedAt
	retval.CreatedBy = v.commonDataSource.CreatedBy
	retval.ModifiedBy = v.commonDataSource.ModifiedBy
	return &retval, nil
}

// dataSourceChecksDataSourceCheck includes the requested fields of the GraphQL type DataSourceCheck.
type dataSourceChecksDataSourceCheck struct {
	// The name of the Data Source check to be performed.
	Name string `json:"name"`
	// A description of the Data Source check to be performed.
	Description string `json:"description"`
	// The status of the Data Source check (all checks begin as NOT_STARTED before transitioning to SUCCEEDED or FAILED).
	Status DataSourceCheckStatus `json:"status"`
	// If the Data Source check failed, this field includes a descriptive error message.
	Error dataSourceChecksDataSourceCheckError `json:"error"`
	// The time at which the Data Source check was performed.
	CheckedAt time.Time `json:"checkedAt"`
}

// GetName returns dataSourceChecksDataSourceCheck.Name, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetName() string { return v.Name }

// GetDescription returns dataSourceChecksDataSourceCheck.Description, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetDescription() string { return v.Description }

// GetStatus returns dataSourceChecksDataSourceCheck.Status, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetStatus() DataSourceCheckStatus { return v.Status }

// GetError returns dataSourceChecksDataSourceCheck.Error, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetError() dataSourceChecksDataSourceCheckError {
	return v.Error
}

// GetCheckedAt returns dataSourceChecksDataSourceCheck.CheckedAt, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheck) GetCheckedAt() time.Time { return v.CheckedAt }

// dataSourceChecksDataSourceCheckError includes the requested fields of the GraphQL type Error.
type dataSourceChecksDataSourceCheckError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns dataSourceChecksDataSourceCheckError.Code, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheckError) GetCode() int { return v.Code }

// GetMessage returns dataSourceChecksDataSourceCheckError.Message, and is useful for accessing the field via an interface.
func (v *dataSourceChecksDataSourceCheckError) GetMessage() string { return v.Message }

// dataSourceConnectionSettings includes the requested fields of the GraphQL interface ConnectionSettings.
//
// dataSourceConnectionSettings is implemented by the following types:
// dataSourceConnectionSettingsSnowflakeConnectionSettings
type dataSourceConnectionSettings interface {
	implementsGraphQLInterfacedataSourceConnectionSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) implementsGraphQLInterfacedataSourceConnectionSettings() {
}

func __unmarshaldataSourceConnectionSettings(b []byte, v *dataSourceConnectionSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "SnowflakeConnectionSettings":
		*v = new(dataSourceConnectionSettingsSnowflakeConnectionSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ConnectionSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for dataSourceConnectionSettings: "%v"`, tn.TypeName)
	}
}

func __marshaldataSourceConnectionSettings(v *dataSourceConnectionSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *dataSourceConnectionSettingsSnowflakeConnectionSettings:
		typename = "SnowflakeConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*dataSourceConnectionSettingsSnowflakeConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for dataSourceConnectionSettings: "%T"`, v)
	}
}

// dataSourceConnectionSettingsSnowflakeConnectionSettings includes the requested fields of the GraphQL type SnowflakeConnectionSettings.
type dataSourceConnectionSettingsSnowflakeConnectionSettings struct {
	Typename  string `json:"__typename"`
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Role      string `json:"role"`
}

// GetTypename returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetTypename() string {
	return v.Typename
}

// GetAccount returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Account, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetAccount() string {
	return v.Account
}

// GetDatabase returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Database, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetDatabase() string {
	return v.Database
}

// GetWarehouse returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Warehouse, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetWarehouse() string {
	return v.Warehouse
}

// GetSchema returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Schema, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetSchema() string { return v.Schema }

// GetUsername returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Username, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetUsername() string {
	return v.Username
}

// GetRole returns dataSourceConnectionSettingsSnowflakeConnectionSettings.Role, and is useful for accessing the field via an interface.
func (v *dataSourceConnectionSettingsSnowflakeConnectionSettings) GetRole() string { return v.Role }

// dataSourceError includes the requested fields of the GraphQL type Error.
type dataSourceError struct {
	Message string `json:"message"`
}

// GetMessage returns dataSourceError.Message, and is useful for accessing the field via an interface.
func (v *dataSourceError) GetMessage() string { return v.Message }

// dataSourceTableIntrospectionsTableIntrospectionConnection includes the requested fields of the GraphQL type TableIntrospectionConnection.
type dataSourceTableIntrospectionsTableIntrospectionConnection struct {
	Nodes []dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection `json:"nodes"`
}

// GetNodes returns dataSourceTableIntrospectionsTableIntrospectionConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnection) GetNodes() []dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection {
	return v.Nodes
}

// dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection includes the requested fields of the GraphQL type TableIntrospection.
type dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	tableIntrospection `json:"-"`
}

// GetDataSource returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.DataSource, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetDataSource() tableIntrospectionDataSource {
	return v.tableIntrospection.DataSource
}

// GetStatus returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.Status, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetStatus() TableIntrospectionStatus {
	return v.tableIntrospection.Status
}

// GetCreatedAt returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedAt() time.Time {
	return v.tableIntrospection.CreatedAt
}

// GetCreatedBy returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedBy() string {
	return v.tableIntrospection.CreatedBy
}

// GetModifiedAt returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedAt() time.Time {
	return v.tableIntrospection.ModifiedAt
}

// GetModifiedBy returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedBy() string {
	return v.tableIntrospection.ModifiedBy
}

// GetNumTables returns dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.NumTables, and is useful for accessing the field via an interface.
func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetNumTables() int {
	return v.tableIntrospection.NumTables
}

func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tableIntrospection)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	DataSource tableIntrospectionDataSource `json:"dataSource"`

	Status TableIntrospectionStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedAt time.Time `json:"modifiedAt"`

	ModifiedBy string `json:"modifiedBy"`

	NumTables int `json:"numTables"`
}

func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) __premarshalJSON() (*__premarshaldataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection, error) {
	var retval __premarshaldataSourceTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection

	retval.DataSource = v.tableIntrospection.DataSource
	retval.Status = v.tableIntrospection.Status
	retval.CreatedAt = v.tableIntrospection.CreatedAt
	retval.CreatedBy = v.tableIntrospection.CreatedBy
	retval.ModifiedAt = v.tableIntrospection.ModifiedAt
	retval.ModifiedBy = v.tableIntrospection.ModifiedBy
	retval.NumTables = v.tableIntrospection.NumTables
	return &retval, nil
}

// dataSourceTablesTableConnection includes the requested fields of the GraphQL type TableConnection.
type dataSourceTablesTableConnection struct {
	Nodes []dataSourceTablesTableConnectionNodesTable `json:"nodes"`
}

// GetNodes returns dataSourceTablesTableConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnection) GetNodes() []dataSourceTablesTableConnectionNodesTable {
	return v.Nodes
}

// dataSourceTablesTableConnectionNodesTable includes the requested fields of the GraphQL type Table.
type dataSourceTablesTableConnectionNodesTable struct {
	Name                string                                                                       `json:"name"`
	AvailableTimestamps dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection `json:"availableTimestamps"`
	AvailableMeasures   dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection   `json:"availableMeasures"`
}

// GetName returns dataSourceTablesTableConnectionNodesTable.Name, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTable) GetName() string { return v.Name }

// GetAvailableTimestamps returns dataSourceTablesTableConnectionNodesTable.AvailableTimestamps, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTable) GetAvailableTimestamps() dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection {
	return v.AvailableTimestamps
}

// GetAvailableMeasures returns dataSourceTablesTableConnectionNodesTable.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTable) GetAvailableMeasures() dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection {
	return v.AvailableMeasures
}

// dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection struct {
	Nodes []dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnection) GetNodes() []dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn {
	return v.Nodes
}

// dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn struct {
	column `json:"-"`
}

// GetName returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetName() string {
	return v.column.Name
}

// GetType returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetType() string {
	return v.column.Type
}

// GetKind returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetKind() string {
	return v.column.Kind
}

// GetIsNullable returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.column.IsNullable
}

// GetDefaultValue returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.column.DefaultValue
}

// GetIsPrimaryKey returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.column.IsPrimaryKey
}

// GetIsUniqueKey returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.column.IsUniqueKey
}

// GetComment returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetComment() string {
	return v.column.Comment
}

// GetPolicyName returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetPolicyName() string {
	return v.column.PolicyName
}

// GetCachedAt returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.column.CachedAt
}

// GetCreatedAt returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.column.CreatedAt
}

// GetCreatedBy returns dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.column.CreatedBy
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.column)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) __premarshalJSON() (*__premarshaldataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn, error) {
	var retval __premarshaldataSourceTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn

	retval.Name = v.column.Name
	retval.Type = v.column.Type
	retval.Kind = v.column.Kind
	retval.IsNullable = v.column.IsNullable
	retval.DefaultValue = v.column.DefaultValue
	retval.IsPrimaryKey = v.column.IsPrimaryKey
	retval.IsUniqueKey = v.column.IsUniqueKey
	retval.Comment = v.column.Comment
	retval.PolicyName = v.column.PolicyName
	retval.CachedAt = v.column.CachedAt
	retval.CreatedAt = v.column.CreatedAt
	retval.CreatedBy = v.column.CreatedBy
	return &retval, nil
}

// dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection struct {
	Nodes []dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnection) GetNodes() []dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn {
	return v.Nodes
}

// dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn struct {
	column `json:"-"`
}

// GetName returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetName() string {
	return v.column.Name
}

// GetType returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetType() string {
	return v.column.Type
}

// GetKind returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetKind() string {
	return v.column.Kind
}

// GetIsNullable returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.column.IsNullable
}

// GetDefaultValue returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.column.DefaultValue
}

// GetIsPrimaryKey returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.column.IsPrimaryKey
}

// GetIsUniqueKey returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.column.IsUniqueKey
}

// GetComment returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetComment() string {
	return v.column.Comment
}

// GetPolicyName returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetPolicyName() string {
	return v.column.PolicyName
}

// GetCachedAt returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.column.CachedAt
}

// GetCreatedAt returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.column.CreatedAt
}

// GetCreatedBy returns dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.column.CreatedBy
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.column)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *dataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) __premarshalJSON() (*__premarshaldataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn, error) {
	var retval __premarshaldataSourceTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn

	retval.Name = v.column.Name
	retval.Type = v.column.Type
	retval.Kind = v.column.Kind
	retval.IsNullable = v.column.IsNullable
	retval.DefaultValue = v.column.DefaultValue
	retval.IsPrimaryKey = v.column.IsPrimaryKey
	retval.IsUniqueKey = v.column.IsUniqueKey
	retval.Comment = v.column.Comment
	retval.PolicyName = v.column.PolicyName
	retval.CachedAt = v.column.CachedAt
	retval.CreatedAt = v.column.CreatedAt
	retval.CreatedBy = v.column.CreatedBy
	return &retval, nil
}

// gqlError includes the GraphQL fields of Error requested by the fragment gqlError.
type gqlError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns gqlError.Code, and is useful for accessing the field via an interface.
func (v *gqlError) GetCode() int { return v.Code }

// GetMessage returns gqlError.Message, and is useful for accessing the field via an interface.
func (v *gqlError) GetMessage() string { return v.Message }

// pageInfo includes the GraphQL fields of PageInfo requested by the fragment pageInfo.
type pageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns pageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *pageInfo) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns pageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *pageInfo) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns pageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *pageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns pageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *pageInfo) GetHasPreviousPage() bool { return v.HasPreviousPage }

// tableIntrospection includes the GraphQL fields of TableIntrospection requested by the fragment tableIntrospection.
type tableIntrospection struct {
	DataSource tableIntrospectionDataSource `json:"dataSource"`
	Status     TableIntrospectionStatus     `json:"status"`
	CreatedAt  time.Time                    `json:"createdAt"`
	CreatedBy  string                       `json:"createdBy"`
	ModifiedAt time.Time                    `json:"modifiedAt"`
	ModifiedBy string                       `json:"modifiedBy"`
	NumTables  int                          `json:"numTables"`
}

// GetDataSource returns tableIntrospection.DataSource, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetDataSource() tableIntrospectionDataSource { return v.DataSource }

// GetStatus returns tableIntrospection.Status, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetStatus() TableIntrospectionStatus { return v.Status }

// GetCreatedAt returns tableIntrospection.CreatedAt, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns tableIntrospection.CreatedBy, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedAt returns tableIntrospection.ModifiedAt, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetModifiedBy returns tableIntrospection.ModifiedBy, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetModifiedBy() string { return v.ModifiedBy }

// GetNumTables returns tableIntrospection.NumTables, and is useful for accessing the field via an interface.
func (v *tableIntrospection) GetNumTables() int { return v.NumTables }

// tableIntrospectionDataSource includes the requested fields of the GraphQL type DataSource.
type tableIntrospectionDataSource struct {
	Id string `json:"id"`
}

// GetId returns tableIntrospectionDataSource.Id, and is useful for accessing the field via an interface.
func (v *tableIntrospectionDataSource) GetId() string { return v.Id }

func CreateSnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input CreateSnowflakeDataSourceInput,
) (*CreateSnowflakeDataSourceResponse, error) {
	__input := __CreateSnowflakeDataSourceInput{
		Input: input,
	}
	var err error

	var retval CreateSnowflakeDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"CreateSnowflakeDataSource",
		`
mutation CreateSnowflakeDataSource ($input: createSnowflakeDataSourceInput!) {
	createSnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... dataSource
			}
		}
		... on FailureResponse {
			error {
				... gqlError
			}
		}
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment gqlError on Error {
	code
	message
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataSourceResponse, error) {
	__input := __DataSourceInput{
		Id: id,
	}
	var err error

	var retval DataSourceResponse
	err = client.MakeRequest(
		ctx,
		"DataSource",
		`
query DataSource ($id: ID!) {
	dataSource(id: $id) {
		... dataSource
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DataSourceByNameResponse, error) {
	__input := __DataSourceByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DataSourceByNameResponse
	err = client.MakeRequest(
		ctx,
		"DataSourceByName",
		`
query DataSourceByName ($uniqueName: String!) {
	dataSource: dataSourceByName(uniqueName: $uniqueName) {
		... dataSource
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSources(
	ctx context.Context,
	client graphql.Client,
	first int,
	last int,
	after string,
	before string,
) (*DataSourcesResponse, error) {
	__input := __DataSourcesInput{
		First:  first,
		Last:   last,
		After:  after,
		Before: before,
	}
	var err error

	var retval DataSourcesResponse
	err = client.MakeRequest(
		ctx,
		"DataSources",
		`
query DataSources ($first: Int, $last: Int, $after: String, $before: String) {
	dataSources(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... pageInfo
		}
		edges {
			node {
				... dataSource
			}
		}
	}
}
fragment pageInfo on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataSourceResponse, error) {
	__input := __DeleteDataSourceInput{
		Id: id,
	}
	var err error

	var retval DeleteDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataSource",
		`
mutation DeleteDataSource ($id: ID!) {
	deleteDataSource(id: $id)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteDataSourceByNameResponse, error) {
	__input := __DeleteDataSourceByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DeleteDataSourceByNameResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataSourceByName",
		`
mutation DeleteDataSourceByName ($uniqueName: String!) {
	deleteDataSourceByName(uniqueName: $uniqueName)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func ModifySnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input ModifySnowflakeDataSourceInput,
) (*ModifySnowflakeDataSourceResponse, error) {
	__input := __ModifySnowflakeDataSourceInput{
		Input: input,
	}
	var err error

	var retval ModifySnowflakeDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"ModifySnowflakeDataSource",
		`
mutation ModifySnowflakeDataSource ($input: modifySnowflakeDataSourceInput!) {
	modifySnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... dataSource
			}
		}
		... on FailureResponse {
			error {
				... gqlError
			}
		}
	}
}
fragment dataSource on DataSource {
	id
	... common
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... column
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... column
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... tableIntrospection
		}
	}
}
fragment gqlError on Error {
	code
	message
}
fragment common on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment column on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment tableIntrospection on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
