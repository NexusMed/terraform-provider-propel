// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// ColumnData includes the GraphQL fields of Column requested by the fragment ColumnData.
type ColumnData struct {
	Name         string    `json:"name"`
	Type         string    `json:"type"`
	Kind         string    `json:"kind"`
	IsNullable   bool      `json:"isNullable"`
	DefaultValue string    `json:"defaultValue"`
	IsPrimaryKey bool      `json:"isPrimaryKey"`
	IsUniqueKey  bool      `json:"isUniqueKey"`
	Comment      string    `json:"comment"`
	PolicyName   string    `json:"policyName"`
	CachedAt     time.Time `json:"cachedAt"`
	CreatedAt    time.Time `json:"createdAt"`
	CreatedBy    string    `json:"createdBy"`
}

// GetName returns ColumnData.Name, and is useful for accessing the field via an interface.
func (v *ColumnData) GetName() string { return v.Name }

// GetType returns ColumnData.Type, and is useful for accessing the field via an interface.
func (v *ColumnData) GetType() string { return v.Type }

// GetKind returns ColumnData.Kind, and is useful for accessing the field via an interface.
func (v *ColumnData) GetKind() string { return v.Kind }

// GetIsNullable returns ColumnData.IsNullable, and is useful for accessing the field via an interface.
func (v *ColumnData) GetIsNullable() bool { return v.IsNullable }

// GetDefaultValue returns ColumnData.DefaultValue, and is useful for accessing the field via an interface.
func (v *ColumnData) GetDefaultValue() string { return v.DefaultValue }

// GetIsPrimaryKey returns ColumnData.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *ColumnData) GetIsPrimaryKey() bool { return v.IsPrimaryKey }

// GetIsUniqueKey returns ColumnData.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *ColumnData) GetIsUniqueKey() bool { return v.IsUniqueKey }

// GetComment returns ColumnData.Comment, and is useful for accessing the field via an interface.
func (v *ColumnData) GetComment() string { return v.Comment }

// GetPolicyName returns ColumnData.PolicyName, and is useful for accessing the field via an interface.
func (v *ColumnData) GetPolicyName() string { return v.PolicyName }

// GetCachedAt returns ColumnData.CachedAt, and is useful for accessing the field via an interface.
func (v *ColumnData) GetCachedAt() time.Time { return v.CachedAt }

// GetCreatedAt returns ColumnData.CreatedAt, and is useful for accessing the field via an interface.
func (v *ColumnData) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns ColumnData.CreatedBy, and is useful for accessing the field via an interface.
func (v *ColumnData) GetCreatedBy() string { return v.CreatedBy }

// CommonData includes the GraphQL fields of Common requested by the fragment CommonData.
//
// CommonData is implemented by the following types:
// CommonDataApplication
// CommonDataDataSource
// CommonDataDataPool
// CommonDataMetric
type CommonData interface {
	implementsGraphQLInterfaceCommonData()
	// GetUniqueName returns the interface-field "uniqueName" from its implementation.
	GetUniqueName() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetAccount returns the interface-field "account" from its implementation.
	GetAccount() CommonDataAccount
	// GetEnvironment returns the interface-field "environment" from its implementation.
	GetEnvironment() CommonDataEnvironment
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() time.Time
	// GetModifiedAt returns the interface-field "modifiedAt" from its implementation.
	GetModifiedAt() time.Time
	// GetCreatedBy returns the interface-field "createdBy" from its implementation.
	GetCreatedBy() string
	// GetModifiedBy returns the interface-field "modifiedBy" from its implementation.
	GetModifiedBy() string
}

func (v *CommonDataApplication) implementsGraphQLInterfaceCommonData() {}
func (v *CommonDataDataSource) implementsGraphQLInterfaceCommonData()  {}
func (v *CommonDataDataPool) implementsGraphQLInterfaceCommonData()    {}
func (v *CommonDataMetric) implementsGraphQLInterfaceCommonData()      {}

func __unmarshalCommonData(b []byte, v *CommonData) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Application":
		*v = new(CommonDataApplication)
		return json.Unmarshal(b, *v)
	case "DataSource":
		*v = new(CommonDataDataSource)
		return json.Unmarshal(b, *v)
	case "DataPool":
		*v = new(CommonDataDataPool)
		return json.Unmarshal(b, *v)
	case "Metric":
		*v = new(CommonDataMetric)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Common.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CommonData: "%v"`, tn.TypeName)
	}
}

func __marshalCommonData(v *CommonData) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CommonDataApplication:
		typename = "Application"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataApplication
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataDataSource:
		typename = "DataSource"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataDataSource
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataDataPool:
		typename = "DataPool"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataDataPool
		}{typename, v}
		return json.Marshal(result)
	case *CommonDataMetric:
		typename = "Metric"

		result := struct {
			TypeName string `json:"__typename"`
			*CommonDataMetric
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CommonData: "%T"`, v)
	}
}

// CommonDataAccount includes the requested fields of the GraphQL type Account.
type CommonDataAccount struct {
	Id string `json:"id"`
}

// GetId returns CommonDataAccount.Id, and is useful for accessing the field via an interface.
func (v *CommonDataAccount) GetId() string { return v.Id }

// CommonData includes the GraphQL fields of Application requested by the fragment CommonData.
type CommonDataApplication struct {
	UniqueName  string                `json:"uniqueName"`
	Description string                `json:"description"`
	Account     CommonDataAccount     `json:"account"`
	Environment CommonDataEnvironment `json:"environment"`
	CreatedAt   time.Time             `json:"createdAt"`
	ModifiedAt  time.Time             `json:"modifiedAt"`
	CreatedBy   string                `json:"createdBy"`
	ModifiedBy  string                `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataApplication.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataApplication.Description, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetDescription() string { return v.Description }

// GetAccount returns CommonDataApplication.Account, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetAccount() CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataApplication.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetEnvironment() CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataApplication.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataApplication.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataApplication.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataApplication.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataApplication) GetModifiedBy() string { return v.ModifiedBy }

// CommonData includes the GraphQL fields of DataPool requested by the fragment CommonData.
type CommonDataDataPool struct {
	UniqueName  string                `json:"uniqueName"`
	Description string                `json:"description"`
	Account     CommonDataAccount     `json:"account"`
	Environment CommonDataEnvironment `json:"environment"`
	CreatedAt   time.Time             `json:"createdAt"`
	ModifiedAt  time.Time             `json:"modifiedAt"`
	CreatedBy   string                `json:"createdBy"`
	ModifiedBy  string                `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataDataPool.Description, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetDescription() string { return v.Description }

// GetAccount returns CommonDataDataPool.Account, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetAccount() CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataDataPool.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetEnvironment() CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataPool) GetModifiedBy() string { return v.ModifiedBy }

// CommonData includes the GraphQL fields of DataSource requested by the fragment CommonData.
type CommonDataDataSource struct {
	UniqueName  string                `json:"uniqueName"`
	Description string                `json:"description"`
	Account     CommonDataAccount     `json:"account"`
	Environment CommonDataEnvironment `json:"environment"`
	CreatedAt   time.Time             `json:"createdAt"`
	ModifiedAt  time.Time             `json:"modifiedAt"`
	CreatedBy   string                `json:"createdBy"`
	ModifiedBy  string                `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataDataSource.Description, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetDescription() string { return v.Description }

// GetAccount returns CommonDataDataSource.Account, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetAccount() CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetEnvironment() CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataDataSource) GetModifiedBy() string { return v.ModifiedBy }

// CommonDataEnvironment includes the requested fields of the GraphQL type Environment.
type CommonDataEnvironment struct {
	Id string `json:"id"`
}

// GetId returns CommonDataEnvironment.Id, and is useful for accessing the field via an interface.
func (v *CommonDataEnvironment) GetId() string { return v.Id }

// CommonData includes the GraphQL fields of Metric requested by the fragment CommonData.
type CommonDataMetric struct {
	UniqueName  string                `json:"uniqueName"`
	Description string                `json:"description"`
	Account     CommonDataAccount     `json:"account"`
	Environment CommonDataEnvironment `json:"environment"`
	CreatedAt   time.Time             `json:"createdAt"`
	ModifiedAt  time.Time             `json:"modifiedAt"`
	CreatedBy   string                `json:"createdBy"`
	ModifiedBy  string                `json:"modifiedBy"`
}

// GetUniqueName returns CommonDataMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CommonDataMetric.Description, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetDescription() string { return v.Description }

// GetAccount returns CommonDataMetric.Account, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetAccount() CommonDataAccount { return v.Account }

// GetEnvironment returns CommonDataMetric.Environment, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetEnvironment() CommonDataEnvironment { return v.Environment }

// GetCreatedAt returns CommonDataMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetCreatedAt() time.Time { return v.CreatedAt }

// GetModifiedAt returns CommonDataMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetCreatedBy returns CommonDataMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedBy returns CommonDataMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CommonDataMetric) GetModifiedBy() string { return v.ModifiedBy }

// CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse struct {
	Typename string                                                                 `json:"__typename"`
	Metric   CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse) GetTypename() string {
	return v.Typename
}

// GetMetric returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse) GetMetric() CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric {
	return v.Metric
}

// CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetId() string {
	return v.MetricData.Id
}

// GetDataPool returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDataPool() MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetTimestamp() MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetMeasure() MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetType returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetUniqueName returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetAccount() CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric, error) {
	var retval __premarshalCreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateCountDistinctMetricCreateCountDistinctMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// Settings to create a new count distinct Metric.
type CreateCountDistinctMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name.
	UniqueName string `json:"uniqueName"`
	// The Metric's description.
	Description string `json:"description"`
	// The Metric's filters. Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included.
	Filters []FilterInput `json:"filters"`
	// The Metric's dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []DimensionInput `json:"dimensions"`
	// The dimension over which the count distinct is going to be performed.
	Dimension DimensionInput `json:"dimension"`
	// Employee-only API for overriding a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetDataPool returns CreateCountDistinctMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateCountDistinctMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateCountDistinctMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDescription() string { return v.Description }

// GetFilters returns CreateCountDistinctMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetFilters() []FilterInput { return v.Filters }

// GetDimensions returns CreateCountDistinctMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDimensions() []DimensionInput { return v.Dimensions }

// GetDimension returns CreateCountDistinctMetricInput.Dimension, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetDimension() DimensionInput { return v.Dimension }

// GetQuerySource returns CreateCountDistinctMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// CreateCountDistinctMetricResponse is returned by CreateCountDistinctMetric on success.
type CreateCountDistinctMetricResponse struct {
	CreateCountDistinctMetric CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse `json:"createCountDistinctMetric"`
}

// GetCreateCountDistinctMetric returns CreateCountDistinctMetricResponse.CreateCountDistinctMetric, and is useful for accessing the field via an interface.
func (v *CreateCountDistinctMetricResponse) GetCreateCountDistinctMetric() CreateCountDistinctMetricCreateCountDistinctMetricMetricResponse {
	return v.CreateCountDistinctMetric
}

// CreateCountMetricCreateCountMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type CreateCountMetricCreateCountMetricMetricResponse struct {
	Typename string                                                 `json:"__typename"`
	Metric   CreateCountMetricCreateCountMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateCountMetricCreateCountMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponse) GetTypename() string { return v.Typename }

// GetMetric returns CreateCountMetricCreateCountMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponse) GetMetric() CreateCountMetricCreateCountMetricMetricResponseMetric {
	return v.Metric
}

// CreateCountMetricCreateCountMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type CreateCountMetricCreateCountMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateCountMetricCreateCountMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetId() string {
	return v.MetricData.Id
}

// GetDataPool returns CreateCountMetricCreateCountMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDataPool() MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateCountMetricCreateCountMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateCountMetricCreateCountMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetTimestamp() MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateCountMetricCreateCountMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetMeasure() MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateCountMetricCreateCountMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetType returns CreateCountMetricCreateCountMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetUniqueName returns CreateCountMetricCreateCountMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateCountMetricCreateCountMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateCountMetricCreateCountMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetAccount() CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateCountMetricCreateCountMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateCountMetricCreateCountMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateCountMetricCreateCountMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateCountMetricCreateCountMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateCountMetricCreateCountMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCountMetricCreateCountMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCountMetricCreateCountMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCountMetricCreateCountMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCountMetricCreateCountMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateCountMetricCreateCountMetricMetricResponseMetric, error) {
	var retval __premarshalCreateCountMetricCreateCountMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateCountMetricCreateCountMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// Settings to create a new count Metric.
type CreateCountMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name.
	UniqueName string `json:"uniqueName"`
	// The Metric's description.
	Description string `json:"description"`
	// The Metric's filters. Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included.
	Filters []FilterInput `json:"filters"`
	// The Metric's dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []DimensionInput `json:"dimensions"`
	// Employee-only API for overriding a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetDataPool returns CreateCountMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateCountMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateCountMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDescription() string { return v.Description }

// GetFilters returns CreateCountMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetFilters() []FilterInput { return v.Filters }

// GetDimensions returns CreateCountMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetDimensions() []DimensionInput { return v.Dimensions }

// GetQuerySource returns CreateCountMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *CreateCountMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// CreateCountMetricResponse is returned by CreateCountMetric on success.
type CreateCountMetricResponse struct {
	CreateCountMetric CreateCountMetricCreateCountMetricMetricResponse `json:"createCountMetric"`
}

// GetCreateCountMetric returns CreateCountMetricResponse.CreateCountMetric, and is useful for accessing the field via an interface.
func (v *CreateCountMetricResponse) GetCreateCountMetric() CreateCountMetricCreateCountMetricMetricResponse {
	return v.CreateCountMetric
}

// CreateDataPoolCreateDataPoolDataPoolOrFailureResponse includes the requested fields of the GraphQL interface DataPoolOrFailureResponse.
//
// CreateDataPoolCreateDataPoolDataPoolOrFailureResponse is implemented by the following types:
// CreateDataPoolCreateDataPoolDataPoolResponse
// CreateDataPoolCreateDataPoolFailureResponse
type CreateDataPoolCreateDataPoolDataPoolOrFailureResponse interface {
	implementsGraphQLInterfaceCreateDataPoolCreateDataPoolDataPoolOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponse) implementsGraphQLInterfaceCreateDataPoolCreateDataPoolDataPoolOrFailureResponse() {
}
func (v *CreateDataPoolCreateDataPoolFailureResponse) implementsGraphQLInterfaceCreateDataPoolCreateDataPoolDataPoolOrFailureResponse() {
}

func __unmarshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(b []byte, v *CreateDataPoolCreateDataPoolDataPoolOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataPoolResponse":
		*v = new(CreateDataPoolCreateDataPoolDataPoolResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(CreateDataPoolCreateDataPoolFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataPoolOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateDataPoolCreateDataPoolDataPoolOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(v *CreateDataPoolCreateDataPoolDataPoolOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateDataPoolCreateDataPoolDataPoolResponse:
		typename = "DataPoolResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateDataPoolCreateDataPoolDataPoolResponse
		}{typename, v}
		return json.Marshal(result)
	case *CreateDataPoolCreateDataPoolFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateDataPoolCreateDataPoolFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateDataPoolCreateDataPoolDataPoolOrFailureResponse: "%T"`, v)
	}
}

// CreateDataPoolCreateDataPoolDataPoolResponse includes the requested fields of the GraphQL type DataPoolResponse.
type CreateDataPoolCreateDataPoolDataPoolResponse struct {
	Typename string                                               `json:"__typename"`
	DataPool CreateDataPoolCreateDataPoolDataPoolResponseDataPool `json:"dataPool"`
}

// GetTypename returns CreateDataPoolCreateDataPoolDataPoolResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponse) GetTypename() string { return v.Typename }

// GetDataPool returns CreateDataPoolCreateDataPoolDataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponse) GetDataPool() CreateDataPoolCreateDataPoolDataPoolResponseDataPool {
	return v.DataPool
}

// CreateDataPoolCreateDataPoolDataPoolResponseDataPool includes the requested fields of the GraphQL type DataPool.
type CreateDataPoolCreateDataPoolDataPoolResponseDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Id, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetId() string {
	return v.DataPoolData.Id
}

// GetDataSource returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetDataSource() DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Status, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetStatus() DataPoolStatus {
	return v.DataPoolData.Status
}

// GetError returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Error, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetError() DataPoolDataError {
	return v.DataPoolData.Error
}

// GetTable returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Table, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetTable() string {
	return v.DataPoolData.Table
}

// GetTimestamp returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetTimestamp() DataPoolDataTimestampDimension {
	return v.DataPoolData.Timestamp
}

// GetColumns returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Columns, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetColumns() DataPoolDataColumnsColumnConnection {
	return v.DataPoolData.Columns
}

// GetAvailableMeasures returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetAvailableMeasures() DataPoolDataAvailableMeasuresColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetSetupTasks() []DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetSyncs() DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetUniqueName returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Account, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetAccount() CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.Environment, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetEnvironment() CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns CreateDataPoolCreateDataPoolDataPoolResponseDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolCreateDataPoolDataPoolResponseDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolCreateDataPoolDataPoolResponseDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataPoolCreateDataPoolDataPoolResponseDataPool struct {
	Id string `json:"id"`

	DataSource DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Timestamp DataPoolDataTimestampDimension `json:"timestamp"`

	Columns DataPoolDataColumnsColumnConnection `json:"columns"`

	AvailableMeasures DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs DataPoolDataSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolCreateDataPoolDataPoolResponseDataPool) __premarshalJSON() (*__premarshalCreateDataPoolCreateDataPoolDataPoolResponseDataPool, error) {
	var retval __premarshalCreateDataPoolCreateDataPoolDataPoolResponseDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// CreateDataPoolCreateDataPoolFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type CreateDataPoolCreateDataPoolFailureResponse struct {
	Typename string                                           `json:"__typename"`
	Error    CreateDataPoolCreateDataPoolFailureResponseError `json:"error"`
}

// GetTypename returns CreateDataPoolCreateDataPoolFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponse) GetTypename() string { return v.Typename }

// GetError returns CreateDataPoolCreateDataPoolFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponse) GetError() CreateDataPoolCreateDataPoolFailureResponseError {
	return v.Error
}

// CreateDataPoolCreateDataPoolFailureResponseError includes the requested fields of the GraphQL type Error.
type CreateDataPoolCreateDataPoolFailureResponseError struct {
	GqlError `json:"-"`
}

// GetCode returns CreateDataPoolCreateDataPoolFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponseError) GetCode() int { return v.GqlError.Code }

// GetMessage returns CreateDataPoolCreateDataPoolFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *CreateDataPoolCreateDataPoolFailureResponseError) GetMessage() string {
	return v.GqlError.Message
}

func (v *CreateDataPoolCreateDataPoolFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolCreateDataPoolFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolCreateDataPoolFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDataPoolCreateDataPoolFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *CreateDataPoolCreateDataPoolFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolCreateDataPoolFailureResponseError) __premarshalJSON() (*__premarshalCreateDataPoolCreateDataPoolFailureResponseError, error) {
	var retval __premarshalCreateDataPoolCreateDataPoolFailureResponseError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

type CreateDataPoolInput struct {
	DataSource          IdOrUniqueName `json:"dataSource"`
	Table               string         `json:"table"`
	Timestamp           DimensionInput `json:"timestamp"`
	UniqueName          string         `json:"uniqueName"`
	Description         string         `json:"description"`
	DataRetentionInDays int            `json:"dataRetentionInDays"`
	// Employee-only API for overriding a Data Pool's syncDestination.
	SyncDestination TableLocationInput `json:"syncDestination"`
}

// GetDataSource returns CreateDataPoolInput.DataSource, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetDataSource() IdOrUniqueName { return v.DataSource }

// GetTable returns CreateDataPoolInput.Table, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetTable() string { return v.Table }

// GetTimestamp returns CreateDataPoolInput.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetTimestamp() DimensionInput { return v.Timestamp }

// GetUniqueName returns CreateDataPoolInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateDataPoolInput.Description, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetDescription() string { return v.Description }

// GetDataRetentionInDays returns CreateDataPoolInput.DataRetentionInDays, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetDataRetentionInDays() int { return v.DataRetentionInDays }

// GetSyncDestination returns CreateDataPoolInput.SyncDestination, and is useful for accessing the field via an interface.
func (v *CreateDataPoolInput) GetSyncDestination() TableLocationInput { return v.SyncDestination }

// CreateDataPoolResponse is returned by CreateDataPool on success.
type CreateDataPoolResponse struct {
	CreateDataPool CreateDataPoolCreateDataPoolDataPoolOrFailureResponse `json:"-"`
}

// GetCreateDataPool returns CreateDataPoolResponse.CreateDataPool, and is useful for accessing the field via an interface.
func (v *CreateDataPoolResponse) GetCreateDataPool() CreateDataPoolCreateDataPoolDataPoolOrFailureResponse {
	return v.CreateDataPool
}

func (v *CreateDataPoolResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDataPoolResponse
		CreateDataPool json.RawMessage `json:"createDataPool"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDataPoolResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateDataPool
		src := firstPass.CreateDataPool
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CreateDataPoolResponse.CreateDataPool: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateDataPoolResponse struct {
	CreateDataPool json.RawMessage `json:"createDataPool"`
}

func (v *CreateDataPoolResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDataPoolResponse) __premarshalJSON() (*__premarshalCreateDataPoolResponse, error) {
	var retval __premarshalCreateDataPoolResponse

	{

		dst := &retval.CreateDataPool
		src := v.CreateDataPool
		var err error
		*dst, err = __marshalCreateDataPoolCreateDataPoolDataPoolOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateDataPoolResponse.CreateDataPool: %w", err)
		}
	}
	return &retval, nil
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse struct {
	Typename   string                                                                         `json:"__typename"`
	DataSource CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetTypename() string {
	return v.Typename
}

// GetDataSource returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponse) GetDataSource() CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetError() DataSourceDataError {
	return v.DataSourceData.Error
}

// GetConnectionSettings returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTables() DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetAccount() CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error DataSourceDataError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables DataSourceDataTablesTableConnection `json:"tables"`

	Checks []DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse struct {
	Typename string                                                                 `json:"__typename"`
	Error    CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetTypename() string {
	return v.Typename
}

// GetError returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponse) GetError() CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError {
	return v.Error
}

// CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
type CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	GqlError `json:"-"`
}

// GetCode returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetCode() int {
	return v.GqlError.Code
}

// GetMessage returns CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.GqlError.Message
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceFailureResponseError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

type CreateSnowflakeDataSourceInput struct {
	UniqueName         string                           `json:"uniqueName"`
	Description        string                           `json:"description"`
	ConnectionSettings SnowflakeConnectionSettingsInput `json:"connectionSettings"`
}

// GetUniqueName returns CreateSnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateSnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetDescription() string { return v.Description }

// GetConnectionSettings returns CreateSnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceInput) GetConnectionSettings() SnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// CreateSnowflakeDataSourceResponse is returned by CreateSnowflakeDataSource on success.
type CreateSnowflakeDataSourceResponse struct {
	CreateSnowflakeDataSource CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetCreateSnowflakeDataSource returns CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *CreateSnowflakeDataSourceResponse) GetCreateSnowflakeDataSource() CreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse {
	return v.CreateSnowflakeDataSource
}

func (v *CreateSnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSnowflakeDataSourceResponse
		CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateSnowflakeDataSource
		src := firstPass.CreateSnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateSnowflakeDataSourceResponse struct {
	CreateSnowflakeDataSource json.RawMessage `json:"createSnowflakeDataSource"`
}

func (v *CreateSnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalCreateSnowflakeDataSourceResponse, error) {
	var retval __premarshalCreateSnowflakeDataSourceResponse

	{

		dst := &retval.CreateSnowflakeDataSource
		src := v.CreateSnowflakeDataSource
		var err error
		*dst, err = __marshalCreateSnowflakeDataSourceCreateSnowflakeDataSourceDataSourceOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSnowflakeDataSourceResponse.CreateSnowflakeDataSource: %w", err)
		}
	}
	return &retval, nil
}

// CreateSumMetricCreateSumMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type CreateSumMetricCreateSumMetricMetricResponse struct {
	Typename string                                             `json:"__typename"`
	Metric   CreateSumMetricCreateSumMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns CreateSumMetricCreateSumMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponse) GetTypename() string { return v.Typename }

// GetMetric returns CreateSumMetricCreateSumMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponse) GetMetric() CreateSumMetricCreateSumMetricMetricResponseMetric {
	return v.Metric
}

// CreateSumMetricCreateSumMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type CreateSumMetricCreateSumMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns CreateSumMetricCreateSumMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetId() string { return v.MetricData.Id }

// GetDataPool returns CreateSumMetricCreateSumMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDataPool() MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns CreateSumMetricCreateSumMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns CreateSumMetricCreateSumMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetTimestamp() MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns CreateSumMetricCreateSumMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetMeasure() MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns CreateSumMetricCreateSumMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetType returns CreateSumMetricCreateSumMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetUniqueName returns CreateSumMetricCreateSumMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns CreateSumMetricCreateSumMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns CreateSumMetricCreateSumMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetAccount() CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns CreateSumMetricCreateSumMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns CreateSumMetricCreateSumMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns CreateSumMetricCreateSumMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns CreateSumMetricCreateSumMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns CreateSumMetricCreateSumMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateSumMetricCreateSumMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateSumMetricCreateSumMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateSumMetricCreateSumMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateSumMetricCreateSumMetricMetricResponseMetric) __premarshalJSON() (*__premarshalCreateSumMetricCreateSumMetricMetricResponseMetric, error) {
	var retval __premarshalCreateSumMetricCreateSumMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateSumMetricCreateSumMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// Settings to create a new sum Metric.
type CreateSumMetricInput struct {
	// The Data Pool that powers this Metric.
	DataPool string `json:"dataPool"`
	// The Metric's unique name.
	UniqueName string `json:"uniqueName"`
	// The Metric's description.
	Description string `json:"description"`
	// The Metric's filters. Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included.
	Filters []FilterInput `json:"filters"`
	// The Metric's dimensions. Dimensions define the columns that will be available to filter the Metric at query time.
	Dimensions []DimensionInput `json:"dimensions"`
	// The column to be summed.
	Measure DimensionInput `json:"measure"`
	// Employee-only API for overriding a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetDataPool returns CreateSumMetricInput.DataPool, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDataPool() string { return v.DataPool }

// GetUniqueName returns CreateSumMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns CreateSumMetricInput.Description, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDescription() string { return v.Description }

// GetFilters returns CreateSumMetricInput.Filters, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetFilters() []FilterInput { return v.Filters }

// GetDimensions returns CreateSumMetricInput.Dimensions, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetDimensions() []DimensionInput { return v.Dimensions }

// GetMeasure returns CreateSumMetricInput.Measure, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetMeasure() DimensionInput { return v.Measure }

// GetQuerySource returns CreateSumMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *CreateSumMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// CreateSumMetricResponse is returned by CreateSumMetric on success.
type CreateSumMetricResponse struct {
	CreateSumMetric CreateSumMetricCreateSumMetricMetricResponse `json:"createSumMetric"`
}

// GetCreateSumMetric returns CreateSumMetricResponse.CreateSumMetric, and is useful for accessing the field via an interface.
func (v *CreateSumMetricResponse) GetCreateSumMetric() CreateSumMetricCreateSumMetricMetricResponse {
	return v.CreateSumMetric
}

// DataPoolByNameDataPool includes the requested fields of the GraphQL type DataPool.
type DataPoolByNameDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns DataPoolByNameDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetId() string { return v.DataPoolData.Id }

// GetDataSource returns DataPoolByNameDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetDataSource() DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns DataPoolByNameDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetStatus() DataPoolStatus { return v.DataPoolData.Status }

// GetError returns DataPoolByNameDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetError() DataPoolDataError { return v.DataPoolData.Error }

// GetTable returns DataPoolByNameDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetTable() string { return v.DataPoolData.Table }

// GetTimestamp returns DataPoolByNameDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetTimestamp() DataPoolDataTimestampDimension {
	return v.DataPoolData.Timestamp
}

// GetColumns returns DataPoolByNameDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetColumns() DataPoolDataColumnsColumnConnection {
	return v.DataPoolData.Columns
}

// GetAvailableMeasures returns DataPoolByNameDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetAvailableMeasures() DataPoolDataAvailableMeasuresColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns DataPoolByNameDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetSetupTasks() []DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns DataPoolByNameDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetSyncs() DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetUniqueName returns DataPoolByNameDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns DataPoolByNameDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns DataPoolByNameDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetAccount() CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns DataPoolByNameDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetEnvironment() CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolByNameDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns DataPoolByNameDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolByNameDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns DataPoolByNameDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolByNameDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *DataPoolByNameDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolByNameDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolByNameDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolByNameDataPool struct {
	Id string `json:"id"`

	DataSource DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Timestamp DataPoolDataTimestampDimension `json:"timestamp"`

	Columns DataPoolDataColumnsColumnConnection `json:"columns"`

	AvailableMeasures DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs DataPoolDataSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolByNameDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolByNameDataPool) __premarshalJSON() (*__premarshalDataPoolByNameDataPool, error) {
	var retval __premarshalDataPoolByNameDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolByNameResponse is returned by DataPoolByName on success.
type DataPoolByNameResponse struct {
	DataPool DataPoolByNameDataPool `json:"dataPool"`
}

// GetDataPool returns DataPoolByNameResponse.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolByNameResponse) GetDataPool() DataPoolByNameDataPool { return v.DataPool }

// DataPoolData includes the GraphQL fields of DataPool requested by the fragment DataPoolData.
type DataPoolData struct {
	Id                 string `json:"id"`
	CommonDataDataPool `json:"-"`
	DataSource         DataPoolDataDataSource                        `json:"dataSource"`
	Status             DataPoolStatus                                `json:"status"`
	Error              DataPoolDataError                             `json:"error"`
	Table              string                                        `json:"table"`
	Timestamp          DataPoolDataTimestampDimension                `json:"timestamp"`
	Columns            DataPoolDataColumnsColumnConnection           `json:"columns"`
	AvailableMeasures  DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`
	// A list of setup tasks performed on the Data Pool during its most recent setup attempt.
	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`
	Syncs      DataPoolDataSyncsSyncConnection           `json:"syncs"`
}

// GetId returns DataPoolData.Id, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetId() string { return v.Id }

// GetDataSource returns DataPoolData.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetDataSource() DataPoolDataDataSource { return v.DataSource }

// GetStatus returns DataPoolData.Status, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetStatus() DataPoolStatus { return v.Status }

// GetError returns DataPoolData.Error, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetError() DataPoolDataError { return v.Error }

// GetTable returns DataPoolData.Table, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetTable() string { return v.Table }

// GetTimestamp returns DataPoolData.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetTimestamp() DataPoolDataTimestampDimension { return v.Timestamp }

// GetColumns returns DataPoolData.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetColumns() DataPoolDataColumnsColumnConnection { return v.Columns }

// GetAvailableMeasures returns DataPoolData.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetAvailableMeasures() DataPoolDataAvailableMeasuresColumnConnection {
	return v.AvailableMeasures
}

// GetSetupTasks returns DataPoolData.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetSetupTasks() []DataPoolDataSetupTasksDataPoolSetupTask { return v.SetupTasks }

// GetSyncs returns DataPoolData.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetSyncs() DataPoolDataSyncsSyncConnection { return v.Syncs }

// GetUniqueName returns DataPoolData.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetUniqueName() string { return v.CommonDataDataPool.UniqueName }

// GetDescription returns DataPoolData.Description, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetDescription() string { return v.CommonDataDataPool.Description }

// GetAccount returns DataPoolData.Account, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetAccount() CommonDataAccount { return v.CommonDataDataPool.Account }

// GetEnvironment returns DataPoolData.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetEnvironment() CommonDataEnvironment {
	return v.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolData.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetCreatedAt() time.Time { return v.CommonDataDataPool.CreatedAt }

// GetModifiedAt returns DataPoolData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetModifiedAt() time.Time { return v.CommonDataDataPool.ModifiedAt }

// GetCreatedBy returns DataPoolData.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetCreatedBy() string { return v.CommonDataDataPool.CreatedBy }

// GetModifiedBy returns DataPoolData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolData) GetModifiedBy() string { return v.CommonDataDataPool.ModifiedBy }

func (v *DataPoolData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolData
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataDataPool)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolData struct {
	Id string `json:"id"`

	DataSource DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Timestamp DataPoolDataTimestampDimension `json:"timestamp"`

	Columns DataPoolDataColumnsColumnConnection `json:"columns"`

	AvailableMeasures DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs DataPoolDataSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolData) __premarshalJSON() (*__premarshalDataPoolData, error) {
	var retval __premarshalDataPoolData

	retval.Id = v.Id
	retval.DataSource = v.DataSource
	retval.Status = v.Status
	retval.Error = v.Error
	retval.Table = v.Table
	retval.Timestamp = v.Timestamp
	retval.Columns = v.Columns
	retval.AvailableMeasures = v.AvailableMeasures
	retval.SetupTasks = v.SetupTasks
	retval.Syncs = v.Syncs
	retval.UniqueName = v.CommonDataDataPool.UniqueName
	retval.Description = v.CommonDataDataPool.Description
	retval.Account = v.CommonDataDataPool.Account
	retval.Environment = v.CommonDataDataPool.Environment
	retval.CreatedAt = v.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolDataAvailableMeasuresColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type DataPoolDataAvailableMeasuresColumnConnection struct {
	Nodes []DataPoolDataAvailableMeasuresColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns DataPoolDataAvailableMeasuresColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnection) GetNodes() []DataPoolDataAvailableMeasuresColumnConnectionNodesColumn {
	return v.Nodes
}

// DataPoolDataAvailableMeasuresColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type DataPoolDataAvailableMeasuresColumnConnectionNodesColumn struct {
	ColumnData `json:"-"`
}

// GetName returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetName() string {
	return v.ColumnData.Name
}

// GetType returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetType() string {
	return v.ColumnData.Type
}

// GetKind returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetKind() string {
	return v.ColumnData.Kind
}

// GetIsNullable returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.ColumnData.IsNullable
}

// GetDefaultValue returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.ColumnData.DefaultValue
}

// GetIsPrimaryKey returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.ColumnData.IsPrimaryKey
}

// GetIsUniqueKey returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.ColumnData.IsUniqueKey
}

// GetComment returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetComment() string {
	return v.ColumnData.Comment
}

// GetPolicyName returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetPolicyName() string {
	return v.ColumnData.PolicyName
}

// GetCachedAt returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.ColumnData.CachedAt
}

// GetCreatedAt returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.ColumnData.CreatedAt
}

// GetCreatedBy returns DataPoolDataAvailableMeasuresColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.ColumnData.CreatedBy
}

func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataAvailableMeasuresColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataAvailableMeasuresColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ColumnData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataAvailableMeasuresColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataAvailableMeasuresColumnConnectionNodesColumn) __premarshalJSON() (*__premarshalDataPoolDataAvailableMeasuresColumnConnectionNodesColumn, error) {
	var retval __premarshalDataPoolDataAvailableMeasuresColumnConnectionNodesColumn

	retval.Name = v.ColumnData.Name
	retval.Type = v.ColumnData.Type
	retval.Kind = v.ColumnData.Kind
	retval.IsNullable = v.ColumnData.IsNullable
	retval.DefaultValue = v.ColumnData.DefaultValue
	retval.IsPrimaryKey = v.ColumnData.IsPrimaryKey
	retval.IsUniqueKey = v.ColumnData.IsUniqueKey
	retval.Comment = v.ColumnData.Comment
	retval.PolicyName = v.ColumnData.PolicyName
	retval.CachedAt = v.ColumnData.CachedAt
	retval.CreatedAt = v.ColumnData.CreatedAt
	retval.CreatedBy = v.ColumnData.CreatedBy
	return &retval, nil
}

// DataPoolDataColumnsColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type DataPoolDataColumnsColumnConnection struct {
	Nodes []DataPoolDataColumnsColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns DataPoolDataColumnsColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnection) GetNodes() []DataPoolDataColumnsColumnConnectionNodesColumn {
	return v.Nodes
}

// DataPoolDataColumnsColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type DataPoolDataColumnsColumnConnectionNodesColumn struct {
	ColumnData `json:"-"`
}

// GetName returns DataPoolDataColumnsColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetName() string { return v.ColumnData.Name }

// GetType returns DataPoolDataColumnsColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetType() string { return v.ColumnData.Type }

// GetKind returns DataPoolDataColumnsColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetKind() string { return v.ColumnData.Kind }

// GetIsNullable returns DataPoolDataColumnsColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.ColumnData.IsNullable
}

// GetDefaultValue returns DataPoolDataColumnsColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.ColumnData.DefaultValue
}

// GetIsPrimaryKey returns DataPoolDataColumnsColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.ColumnData.IsPrimaryKey
}

// GetIsUniqueKey returns DataPoolDataColumnsColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.ColumnData.IsUniqueKey
}

// GetComment returns DataPoolDataColumnsColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetComment() string {
	return v.ColumnData.Comment
}

// GetPolicyName returns DataPoolDataColumnsColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetPolicyName() string {
	return v.ColumnData.PolicyName
}

// GetCachedAt returns DataPoolDataColumnsColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.ColumnData.CachedAt
}

// GetCreatedAt returns DataPoolDataColumnsColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.ColumnData.CreatedAt
}

// GetCreatedBy returns DataPoolDataColumnsColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataColumnsColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.ColumnData.CreatedBy
}

func (v *DataPoolDataColumnsColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataColumnsColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataColumnsColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ColumnData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataColumnsColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *DataPoolDataColumnsColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataColumnsColumnConnectionNodesColumn) __premarshalJSON() (*__premarshalDataPoolDataColumnsColumnConnectionNodesColumn, error) {
	var retval __premarshalDataPoolDataColumnsColumnConnectionNodesColumn

	retval.Name = v.ColumnData.Name
	retval.Type = v.ColumnData.Type
	retval.Kind = v.ColumnData.Kind
	retval.IsNullable = v.ColumnData.IsNullable
	retval.DefaultValue = v.ColumnData.DefaultValue
	retval.IsPrimaryKey = v.ColumnData.IsPrimaryKey
	retval.IsUniqueKey = v.ColumnData.IsUniqueKey
	retval.Comment = v.ColumnData.Comment
	retval.PolicyName = v.ColumnData.PolicyName
	retval.CachedAt = v.ColumnData.CachedAt
	retval.CreatedAt = v.ColumnData.CreatedAt
	retval.CreatedBy = v.ColumnData.CreatedBy
	return &retval, nil
}

// DataPoolDataDataSource includes the requested fields of the GraphQL type DataSource.
type DataPoolDataDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataPoolDataDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetId() string { return v.DataSourceData.Id }

// GetType returns DataPoolDataDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetType() DataSourceType { return v.DataSourceData.Type }

// GetStatus returns DataPoolDataDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetStatus() DataSourceStatus { return v.DataSourceData.Status }

// GetError returns DataPoolDataDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetError() DataSourceDataError { return v.DataSourceData.Error }

// GetConnectionSettings returns DataPoolDataDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataPoolDataDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetTables() DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataPoolDataDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetChecks() []DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataPoolDataDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetTableIntrospections() DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataPoolDataDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataPoolDataDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataPoolDataDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetAccount() CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataPoolDataDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetEnvironment() CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataPoolDataDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataPoolDataDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataPoolDataDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataPoolDataDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataPoolDataDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error DataSourceDataError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables DataSourceDataTablesTableConnection `json:"tables"`

	Checks []DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataDataSource) __premarshalJSON() (*__premarshalDataPoolDataDataSource, error) {
	var retval __premarshalDataPoolDataDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataPoolDataDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataPoolDataError includes the requested fields of the GraphQL type Error.
type DataPoolDataError struct {
	Message string `json:"message"`
}

// GetMessage returns DataPoolDataError.Message, and is useful for accessing the field via an interface.
func (v *DataPoolDataError) GetMessage() string { return v.Message }

// DataPoolDataPool includes the requested fields of the GraphQL type DataPool.
type DataPoolDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns DataPoolDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetId() string { return v.DataPoolData.Id }

// GetDataSource returns DataPoolDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetDataSource() DataPoolDataDataSource { return v.DataPoolData.DataSource }

// GetStatus returns DataPoolDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetStatus() DataPoolStatus { return v.DataPoolData.Status }

// GetError returns DataPoolDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetError() DataPoolDataError { return v.DataPoolData.Error }

// GetTable returns DataPoolDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetTable() string { return v.DataPoolData.Table }

// GetTimestamp returns DataPoolDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetTimestamp() DataPoolDataTimestampDimension {
	return v.DataPoolData.Timestamp
}

// GetColumns returns DataPoolDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetColumns() DataPoolDataColumnsColumnConnection {
	return v.DataPoolData.Columns
}

// GetAvailableMeasures returns DataPoolDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetAvailableMeasures() DataPoolDataAvailableMeasuresColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns DataPoolDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetSetupTasks() []DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns DataPoolDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetSyncs() DataPoolDataSyncsSyncConnection { return v.DataPoolData.Syncs }

// GetUniqueName returns DataPoolDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns DataPoolDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns DataPoolDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetAccount() CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns DataPoolDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetEnvironment() CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns DataPoolDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetCreatedBy() string { return v.DataPoolData.CommonDataDataPool.CreatedBy }

// GetModifiedBy returns DataPoolDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *DataPoolDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataPool struct {
	Id string `json:"id"`

	DataSource DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Timestamp DataPoolDataTimestampDimension `json:"timestamp"`

	Columns DataPoolDataColumnsColumnConnection `json:"columns"`

	AvailableMeasures DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs DataPoolDataSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataPool) __premarshalJSON() (*__premarshalDataPoolDataPool, error) {
	var retval __premarshalDataPoolDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolDataSetupTasksDataPoolSetupTask includes the requested fields of the GraphQL type DataPoolSetupTask.
type DataPoolDataSetupTasksDataPoolSetupTask struct {
	// The name of the Data Pool setup task to be performed.
	Name string `json:"name"`
	// A description of the Data Pool setup task to be performed.
	Description string `json:"description"`
	// The status of the Data Pool setup task (all setup tasks begin as NOT_STARTED before transitioning to SUCCEEDED or FAILED).
	Status DataPoolSetupTaskStatus `json:"status"`
	// If the Data Pool setup task failed, this field includes a descriptive error message.
	Error DataPoolDataSetupTasksDataPoolSetupTaskError `json:"error"`
	// The time at which the Data Pool setup task was completed.
	CompletedAt time.Time `json:"completedAt"`
}

// GetName returns DataPoolDataSetupTasksDataPoolSetupTask.Name, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetName() string { return v.Name }

// GetDescription returns DataPoolDataSetupTasksDataPoolSetupTask.Description, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetDescription() string { return v.Description }

// GetStatus returns DataPoolDataSetupTasksDataPoolSetupTask.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetStatus() DataPoolSetupTaskStatus {
	return v.Status
}

// GetError returns DataPoolDataSetupTasksDataPoolSetupTask.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetError() DataPoolDataSetupTasksDataPoolSetupTaskError {
	return v.Error
}

// GetCompletedAt returns DataPoolDataSetupTasksDataPoolSetupTask.CompletedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTask) GetCompletedAt() time.Time { return v.CompletedAt }

// DataPoolDataSetupTasksDataPoolSetupTaskError includes the requested fields of the GraphQL type Error.
type DataPoolDataSetupTasksDataPoolSetupTaskError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns DataPoolDataSetupTasksDataPoolSetupTaskError.Code, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTaskError) GetCode() int { return v.Code }

// GetMessage returns DataPoolDataSetupTasksDataPoolSetupTaskError.Message, and is useful for accessing the field via an interface.
func (v *DataPoolDataSetupTasksDataPoolSetupTaskError) GetMessage() string { return v.Message }

// DataPoolDataSyncsSyncConnection includes the requested fields of the GraphQL type SyncConnection.
type DataPoolDataSyncsSyncConnection struct {
	Nodes []DataPoolDataSyncsSyncConnectionNodesSync `json:"nodes"`
}

// GetNodes returns DataPoolDataSyncsSyncConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnection) GetNodes() []DataPoolDataSyncsSyncConnectionNodesSync {
	return v.Nodes
}

// DataPoolDataSyncsSyncConnectionNodesSync includes the requested fields of the GraphQL type Sync.
type DataPoolDataSyncsSyncConnectionNodesSync struct {
	SyncData `json:"-"`
}

// GetId returns DataPoolDataSyncsSyncConnectionNodesSync.Id, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetId() string { return v.SyncData.Id }

// GetQueryId returns DataPoolDataSyncsSyncConnectionNodesSync.QueryId, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetQueryId() string { return v.SyncData.QueryId }

// GetStatus returns DataPoolDataSyncsSyncConnectionNodesSync.Status, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetStatus() SyncStatus { return v.SyncData.Status }

// GetNewRecords returns DataPoolDataSyncsSyncConnectionNodesSync.NewRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetNewRecords() string {
	return v.SyncData.NewRecords
}

// GetUpdatedRecords returns DataPoolDataSyncsSyncConnectionNodesSync.UpdatedRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetUpdatedRecords() string {
	return v.SyncData.UpdatedRecords
}

// GetDeletedRecords returns DataPoolDataSyncsSyncConnectionNodesSync.DeletedRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetDeletedRecords() string {
	return v.SyncData.DeletedRecords
}

// GetInvalidRecords returns DataPoolDataSyncsSyncConnectionNodesSync.InvalidRecords, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetInvalidRecords() string {
	return v.SyncData.InvalidRecords
}

// GetStartedAt returns DataPoolDataSyncsSyncConnectionNodesSync.StartedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetStartedAt() time.Time {
	return v.SyncData.StartedAt
}

// GetSucceededAt returns DataPoolDataSyncsSyncConnectionNodesSync.SucceededAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetSucceededAt() time.Time {
	return v.SyncData.SucceededAt
}

// GetFailedAt returns DataPoolDataSyncsSyncConnectionNodesSync.FailedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetFailedAt() time.Time {
	return v.SyncData.FailedAt
}

// GetError returns DataPoolDataSyncsSyncConnectionNodesSync.Error, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetError() SyncDataError { return v.SyncData.Error }

// GetCreatedAt returns DataPoolDataSyncsSyncConnectionNodesSync.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetCreatedAt() time.Time {
	return v.SyncData.CreatedAt
}

// GetCreatedBy returns DataPoolDataSyncsSyncConnectionNodesSync.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetCreatedBy() string { return v.SyncData.CreatedBy }

// GetModifiedAt returns DataPoolDataSyncsSyncConnectionNodesSync.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetModifiedAt() time.Time {
	return v.SyncData.ModifiedAt
}

// GetModifiedBy returns DataPoolDataSyncsSyncConnectionNodesSync.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolDataSyncsSyncConnectionNodesSync) GetModifiedBy() string {
	return v.SyncData.ModifiedBy
}

func (v *DataPoolDataSyncsSyncConnectionNodesSync) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataSyncsSyncConnectionNodesSync
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataSyncsSyncConnectionNodesSync = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SyncData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataSyncsSyncConnectionNodesSync struct {
	Id string `json:"id"`

	QueryId string `json:"queryId"`

	Status SyncStatus `json:"status"`

	NewRecords string `json:"newRecords"`

	UpdatedRecords string `json:"updatedRecords"`

	DeletedRecords string `json:"deletedRecords"`

	InvalidRecords string `json:"invalidRecords"`

	StartedAt time.Time `json:"startedAt"`

	SucceededAt time.Time `json:"succeededAt"`

	FailedAt time.Time `json:"failedAt"`

	Error SyncDataError `json:"error"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedAt time.Time `json:"modifiedAt"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolDataSyncsSyncConnectionNodesSync) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataSyncsSyncConnectionNodesSync) __premarshalJSON() (*__premarshalDataPoolDataSyncsSyncConnectionNodesSync, error) {
	var retval __premarshalDataPoolDataSyncsSyncConnectionNodesSync

	retval.Id = v.SyncData.Id
	retval.QueryId = v.SyncData.QueryId
	retval.Status = v.SyncData.Status
	retval.NewRecords = v.SyncData.NewRecords
	retval.UpdatedRecords = v.SyncData.UpdatedRecords
	retval.DeletedRecords = v.SyncData.DeletedRecords
	retval.InvalidRecords = v.SyncData.InvalidRecords
	retval.StartedAt = v.SyncData.StartedAt
	retval.SucceededAt = v.SyncData.SucceededAt
	retval.FailedAt = v.SyncData.FailedAt
	retval.Error = v.SyncData.Error
	retval.CreatedAt = v.SyncData.CreatedAt
	retval.CreatedBy = v.SyncData.CreatedBy
	retval.ModifiedAt = v.SyncData.ModifiedAt
	retval.ModifiedBy = v.SyncData.ModifiedBy
	return &retval, nil
}

// DataPoolDataTimestampDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type DataPoolDataTimestampDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns DataPoolDataTimestampDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *DataPoolDataTimestampDimension) GetColumnName() string { return v.DimensionData.ColumnName }

// GetType returns DataPoolDataTimestampDimension.Type, and is useful for accessing the field via an interface.
func (v *DataPoolDataTimestampDimension) GetType() string { return v.DimensionData.Type }

// GetIsNullable returns DataPoolDataTimestampDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *DataPoolDataTimestampDimension) GetIsNullable() bool { return v.DimensionData.IsNullable }

// GetIsUniqueKey returns DataPoolDataTimestampDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *DataPoolDataTimestampDimension) GetIsUniqueKey() bool { return v.DimensionData.IsUniqueKey }

func (v *DataPoolDataTimestampDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolDataTimestampDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolDataTimestampDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolDataTimestampDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *DataPoolDataTimestampDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolDataTimestampDimension) __premarshalJSON() (*__premarshalDataPoolDataTimestampDimension, error) {
	var retval __premarshalDataPoolDataTimestampDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// DataPoolResponse is returned by DataPool on success.
type DataPoolResponse struct {
	DataPool DataPoolDataPool `json:"dataPool"`
}

// GetDataPool returns DataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *DataPoolResponse) GetDataPool() DataPoolDataPool { return v.DataPool }

type DataPoolSetupTaskStatus string

const (
	DataPoolSetupTaskStatusNotStarted DataPoolSetupTaskStatus = "NOT_STARTED"
	DataPoolSetupTaskStatusSucceeded  DataPoolSetupTaskStatus = "SUCCEEDED"
	DataPoolSetupTaskStatusFailed     DataPoolSetupTaskStatus = "FAILED"
)

type DataPoolStatus string

const (
	// The Data Pool has been created. We will attempt to set it up soon.
	DataPoolStatusCreated DataPoolStatus = "CREATED"
	// We are attempting to setup the Data Pool
	DataPoolStatusPending DataPoolStatus = "PENDING"
	// The Data Pool is setup and serving data. Check its Syncs to monitor data ingestion.
	DataPoolStatusLive DataPoolStatus = "LIVE"
	// We could not setup the Data Pool. Check its setup tasks before re-attempting setup.
	DataPoolStatusSetupFailed DataPoolStatus = "SETUP_FAILED"
	DataPoolStatusConnecting  DataPoolStatus = "CONNECTING"
	DataPoolStatusConnected   DataPoolStatus = "CONNECTED"
	DataPoolStatusBroken      DataPoolStatus = "BROKEN"
	DataPoolStatusPausing     DataPoolStatus = "PAUSING"
	DataPoolStatusPaused      DataPoolStatus = "PAUSED"
	// We are deleting the Data Pool and all of its associated data.
	DataPoolStatusDeleting DataPoolStatus = "DELETING"
)

// DataPoolsDataPoolsDataPoolConnection includes the requested fields of the GraphQL type DataPoolConnection.
type DataPoolsDataPoolsDataPoolConnection struct {
	PageInfo DataPoolsDataPoolsDataPoolConnectionPageInfo            `json:"pageInfo"`
	Edges    []DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge `json:"edges"`
}

// GetPageInfo returns DataPoolsDataPoolsDataPoolConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnection) GetPageInfo() DataPoolsDataPoolsDataPoolConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns DataPoolsDataPoolsDataPoolConnection.Edges, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnection) GetEdges() []DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge {
	return v.Edges
}

// DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge includes the requested fields of the GraphQL type DataPoolEdge.
type DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge struct {
	Node DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool `json:"node"`
}

// GetNode returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge.Node, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdge) GetNode() DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool {
	return v.Node
}

// DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool includes the requested fields of the GraphQL type DataPool.
type DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Id, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetId() string {
	return v.DataPoolData.Id
}

// GetDataSource returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetDataSource() DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Status, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetStatus() DataPoolStatus {
	return v.DataPoolData.Status
}

// GetError returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Error, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetError() DataPoolDataError {
	return v.DataPoolData.Error
}

// GetTable returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Table, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetTable() string {
	return v.DataPoolData.Table
}

// GetTimestamp returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetTimestamp() DataPoolDataTimestampDimension {
	return v.DataPoolData.Timestamp
}

// GetColumns returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Columns, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetColumns() DataPoolDataColumnsColumnConnection {
	return v.DataPoolData.Columns
}

// GetAvailableMeasures returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetAvailableMeasures() DataPoolDataAvailableMeasuresColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetSetupTasks() []DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetSyncs() DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetUniqueName returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Description, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Account, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetAccount() CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.Environment, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetEnvironment() CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool struct {
	Id string `json:"id"`

	DataSource DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Timestamp DataPoolDataTimestampDimension `json:"timestamp"`

	Columns DataPoolDataColumnsColumnConnection `json:"columns"`

	AvailableMeasures DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs DataPoolDataSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool) __premarshalJSON() (*__premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool, error) {
	var retval __premarshalDataPoolsDataPoolsDataPoolConnectionEdgesDataPoolEdgeNodeDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// DataPoolsDataPoolsDataPoolConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type DataPoolsDataPoolsDataPoolConnectionPageInfo struct {
	PageInfoData `json:"-"`
}

// GetStartCursor returns DataPoolsDataPoolsDataPoolConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetStartCursor() string {
	return v.PageInfoData.StartCursor
}

// GetEndCursor returns DataPoolsDataPoolsDataPoolConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetEndCursor() string {
	return v.PageInfoData.EndCursor
}

// GetHasNextPage returns DataPoolsDataPoolsDataPoolConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoData.HasNextPage
}

// GetHasPreviousPage returns DataPoolsDataPoolsDataPoolConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoData.HasPreviousPage
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataPoolsDataPoolsDataPoolConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataPoolsDataPoolsDataPoolConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo struct {
	StartCursor string `json:"startCursor"`

	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataPoolsDataPoolsDataPoolConnectionPageInfo) __premarshalJSON() (*__premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo, error) {
	var retval __premarshalDataPoolsDataPoolsDataPoolConnectionPageInfo

	retval.StartCursor = v.PageInfoData.StartCursor
	retval.EndCursor = v.PageInfoData.EndCursor
	retval.HasNextPage = v.PageInfoData.HasNextPage
	retval.HasPreviousPage = v.PageInfoData.HasPreviousPage
	return &retval, nil
}

// DataPoolsResponse is returned by DataPools on success.
type DataPoolsResponse struct {
	DataPools DataPoolsDataPoolsDataPoolConnection `json:"dataPools"`
}

// GetDataPools returns DataPoolsResponse.DataPools, and is useful for accessing the field via an interface.
func (v *DataPoolsResponse) GetDataPools() DataPoolsDataPoolsDataPoolConnection { return v.DataPools }

// DataSourceByNameDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceByNameDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataSourceByNameDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetId() string { return v.DataSourceData.Id }

// GetType returns DataSourceByNameDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetType() DataSourceType { return v.DataSourceData.Type }

// GetStatus returns DataSourceByNameDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetStatus() DataSourceStatus { return v.DataSourceData.Status }

// GetError returns DataSourceByNameDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetError() DataSourceDataError { return v.DataSourceData.Error }

// GetConnectionSettings returns DataSourceByNameDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataSourceByNameDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTables() DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataSourceByNameDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetChecks() []DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataSourceByNameDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetTableIntrospections() DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataSourceByNameDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataSourceByNameDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataSourceByNameDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetAccount() CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataSourceByNameDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetEnvironment() CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourceByNameDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceByNameDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceByNameDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataSourceByNameDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceByNameDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataSourceByNameDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceByNameDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceByNameDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceByNameDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error DataSourceDataError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables DataSourceDataTablesTableConnection `json:"tables"`

	Checks []DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceByNameDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceByNameDataSource) __premarshalJSON() (*__premarshalDataSourceByNameDataSource, error) {
	var retval __premarshalDataSourceByNameDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourceByNameDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceByNameResponse is returned by DataSourceByName on success.
type DataSourceByNameResponse struct {
	DataSource DataSourceByNameDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceByNameResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceByNameResponse) GetDataSource() DataSourceByNameDataSource { return v.DataSource }

type DataSourceCheckStatus string

const (
	DataSourceCheckStatusNotStarted DataSourceCheckStatus = "NOT_STARTED"
	DataSourceCheckStatusSucceeded  DataSourceCheckStatus = "SUCCEEDED"
	DataSourceCheckStatusFailed     DataSourceCheckStatus = "FAILED"
)

// DataSourceData includes the GraphQL fields of DataSource requested by the fragment DataSourceData.
type DataSourceData struct {
	Id                   string `json:"id"`
	CommonDataDataSource `json:"-"`
	Type                 DataSourceType                      `json:"type"`
	Status               DataSourceStatus                    `json:"status"`
	Error                DataSourceDataError                 `json:"error"`
	ConnectionSettings   DataSourceDataConnectionSettings    `json:"-"`
	Tables               DataSourceDataTablesTableConnection `json:"tables"`
	// A list of checks performed on the Data Source during its most recent connection attempt.
	Checks              []DataSourceDataChecksDataSourceCheck                         `json:"checks"`
	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`
}

// GetId returns DataSourceData.Id, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetId() string { return v.Id }

// GetType returns DataSourceData.Type, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetType() DataSourceType { return v.Type }

// GetStatus returns DataSourceData.Status, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetStatus() DataSourceStatus { return v.Status }

// GetError returns DataSourceData.Error, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetError() DataSourceDataError { return v.Error }

// GetConnectionSettings returns DataSourceData.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.ConnectionSettings
}

// GetTables returns DataSourceData.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetTables() DataSourceDataTablesTableConnection { return v.Tables }

// GetChecks returns DataSourceData.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetChecks() []DataSourceDataChecksDataSourceCheck { return v.Checks }

// GetTableIntrospections returns DataSourceData.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetTableIntrospections() DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.TableIntrospections
}

// GetUniqueName returns DataSourceData.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetUniqueName() string { return v.CommonDataDataSource.UniqueName }

// GetDescription returns DataSourceData.Description, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetDescription() string { return v.CommonDataDataSource.Description }

// GetAccount returns DataSourceData.Account, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetAccount() CommonDataAccount { return v.CommonDataDataSource.Account }

// GetEnvironment returns DataSourceData.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetEnvironment() CommonDataEnvironment {
	return v.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourceData.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetCreatedAt() time.Time { return v.CommonDataDataSource.CreatedAt }

// GetModifiedAt returns DataSourceData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetModifiedAt() time.Time { return v.CommonDataDataSource.ModifiedAt }

// GetCreatedBy returns DataSourceData.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetCreatedBy() string { return v.CommonDataDataSource.CreatedBy }

// GetModifiedBy returns DataSourceData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceData) GetModifiedBy() string { return v.CommonDataDataSource.ModifiedBy }

func (v *DataSourceData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceData
		ConnectionSettings json.RawMessage `json:"connectionSettings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataDataSource)
	if err != nil {
		return err
	}

	{
		dst := &v.ConnectionSettings
		src := firstPass.ConnectionSettings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDataSourceDataConnectionSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal DataSourceData.ConnectionSettings: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDataSourceData struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error DataSourceDataError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables DataSourceDataTablesTableConnection `json:"tables"`

	Checks []DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceData) __premarshalJSON() (*__premarshalDataSourceData, error) {
	var retval __premarshalDataSourceData

	retval.Id = v.Id
	retval.Type = v.Type
	retval.Status = v.Status
	retval.Error = v.Error
	{

		dst := &retval.ConnectionSettings
		src := v.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.Tables
	retval.Checks = v.Checks
	retval.TableIntrospections = v.TableIntrospections
	retval.UniqueName = v.CommonDataDataSource.UniqueName
	retval.Description = v.CommonDataDataSource.Description
	retval.Account = v.CommonDataDataSource.Account
	retval.Environment = v.CommonDataDataSource.Environment
	retval.CreatedAt = v.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceDataChecksDataSourceCheck includes the requested fields of the GraphQL type DataSourceCheck.
type DataSourceDataChecksDataSourceCheck struct {
	// The name of the Data Source check to be performed.
	Name string `json:"name"`
	// A description of the Data Source check to be performed.
	Description string `json:"description"`
	// The status of the Data Source check (all checks begin as NOT_STARTED before transitioning to SUCCEEDED or FAILED).
	Status DataSourceCheckStatus `json:"status"`
	// If the Data Source check failed, this field includes a descriptive error message.
	Error DataSourceDataChecksDataSourceCheckError `json:"error"`
	// The time at which the Data Source check was performed.
	CheckedAt time.Time `json:"checkedAt"`
}

// GetName returns DataSourceDataChecksDataSourceCheck.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetName() string { return v.Name }

// GetDescription returns DataSourceDataChecksDataSourceCheck.Description, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetDescription() string { return v.Description }

// GetStatus returns DataSourceDataChecksDataSourceCheck.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetStatus() DataSourceCheckStatus { return v.Status }

// GetError returns DataSourceDataChecksDataSourceCheck.Error, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetError() DataSourceDataChecksDataSourceCheckError {
	return v.Error
}

// GetCheckedAt returns DataSourceDataChecksDataSourceCheck.CheckedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheck) GetCheckedAt() time.Time { return v.CheckedAt }

// DataSourceDataChecksDataSourceCheckError includes the requested fields of the GraphQL type Error.
type DataSourceDataChecksDataSourceCheckError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns DataSourceDataChecksDataSourceCheckError.Code, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheckError) GetCode() int { return v.Code }

// GetMessage returns DataSourceDataChecksDataSourceCheckError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceDataChecksDataSourceCheckError) GetMessage() string { return v.Message }

// DataSourceDataConnectionSettings includes the requested fields of the GraphQL interface ConnectionSettings.
//
// DataSourceDataConnectionSettings is implemented by the following types:
// DataSourceDataConnectionSettingsSnowflakeConnectionSettings
type DataSourceDataConnectionSettings interface {
	implementsGraphQLInterfaceDataSourceDataConnectionSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) implementsGraphQLInterfaceDataSourceDataConnectionSettings() {
}

func __unmarshalDataSourceDataConnectionSettings(b []byte, v *DataSourceDataConnectionSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "SnowflakeConnectionSettings":
		*v = new(DataSourceDataConnectionSettingsSnowflakeConnectionSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ConnectionSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DataSourceDataConnectionSettings: "%v"`, tn.TypeName)
	}
}

func __marshalDataSourceDataConnectionSettings(v *DataSourceDataConnectionSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DataSourceDataConnectionSettingsSnowflakeConnectionSettings:
		typename = "SnowflakeConnectionSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*DataSourceDataConnectionSettingsSnowflakeConnectionSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DataSourceDataConnectionSettings: "%T"`, v)
	}
}

// DataSourceDataConnectionSettingsSnowflakeConnectionSettings includes the requested fields of the GraphQL type SnowflakeConnectionSettings.
type DataSourceDataConnectionSettingsSnowflakeConnectionSettings struct {
	Typename  string `json:"__typename"`
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Role      string `json:"role"`
}

// GetTypename returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Typename, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetTypename() string {
	return v.Typename
}

// GetAccount returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Account, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetAccount() string {
	return v.Account
}

// GetDatabase returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Database, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetDatabase() string {
	return v.Database
}

// GetWarehouse returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Warehouse, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetWarehouse() string {
	return v.Warehouse
}

// GetSchema returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Schema, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetSchema() string {
	return v.Schema
}

// GetUsername returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Username, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetUsername() string {
	return v.Username
}

// GetRole returns DataSourceDataConnectionSettingsSnowflakeConnectionSettings.Role, and is useful for accessing the field via an interface.
func (v *DataSourceDataConnectionSettingsSnowflakeConnectionSettings) GetRole() string { return v.Role }

// DataSourceDataError includes the requested fields of the GraphQL type Error.
type DataSourceDataError struct {
	Message string `json:"message"`
}

// GetMessage returns DataSourceDataError.Message, and is useful for accessing the field via an interface.
func (v *DataSourceDataError) GetMessage() string { return v.Message }

// DataSourceDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourceDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataSourceDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetId() string { return v.DataSourceData.Id }

// GetType returns DataSourceDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetType() DataSourceType { return v.DataSourceData.Type }

// GetStatus returns DataSourceDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetStatus() DataSourceStatus { return v.DataSourceData.Status }

// GetError returns DataSourceDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetError() DataSourceDataError { return v.DataSourceData.Error }

// GetConnectionSettings returns DataSourceDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataSourceDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTables() DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataSourceDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetChecks() []DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataSourceDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetTableIntrospections() DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataSourceDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataSourceDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataSourceDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetAccount() CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataSourceDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetEnvironment() CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourceDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataSourceDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourceDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataSourceDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataSourceDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error DataSourceDataError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables DataSourceDataTablesTableConnection `json:"tables"`

	Checks []DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourceDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataSource) __premarshalJSON() (*__premarshalDataSourceDataSource, error) {
	var retval __premarshalDataSourceDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourceDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourceDataTableIntrospectionsTableIntrospectionConnection includes the requested fields of the GraphQL type TableIntrospectionConnection.
type DataSourceDataTableIntrospectionsTableIntrospectionConnection struct {
	Nodes []DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection `json:"nodes"`
}

// GetNodes returns DataSourceDataTableIntrospectionsTableIntrospectionConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnection) GetNodes() []DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection {
	return v.Nodes
}

// DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection includes the requested fields of the GraphQL type TableIntrospection.
type DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	TableIntrospectionData `json:"-"`
}

// GetDataSource returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetDataSource() TableIntrospectionDataDataSource {
	return v.TableIntrospectionData.DataSource
}

// GetStatus returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.Status, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetStatus() TableIntrospectionStatus {
	return v.TableIntrospectionData.Status
}

// GetCreatedAt returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedAt() time.Time {
	return v.TableIntrospectionData.CreatedAt
}

// GetCreatedBy returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetCreatedBy() string {
	return v.TableIntrospectionData.CreatedBy
}

// GetModifiedAt returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedAt() time.Time {
	return v.TableIntrospectionData.ModifiedAt
}

// GetModifiedBy returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetModifiedBy() string {
	return v.TableIntrospectionData.ModifiedBy
}

// GetNumTables returns DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection.NumTables, and is useful for accessing the field via an interface.
func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) GetNumTables() int {
	return v.TableIntrospectionData.NumTables
}

func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TableIntrospectionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection struct {
	DataSource TableIntrospectionDataDataSource `json:"dataSource"`

	Status TableIntrospectionStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedAt time.Time `json:"modifiedAt"`

	ModifiedBy string `json:"modifiedBy"`

	NumTables int `json:"numTables"`
}

func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection) __premarshalJSON() (*__premarshalDataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection, error) {
	var retval __premarshalDataSourceDataTableIntrospectionsTableIntrospectionConnectionNodesTableIntrospection

	retval.DataSource = v.TableIntrospectionData.DataSource
	retval.Status = v.TableIntrospectionData.Status
	retval.CreatedAt = v.TableIntrospectionData.CreatedAt
	retval.CreatedBy = v.TableIntrospectionData.CreatedBy
	retval.ModifiedAt = v.TableIntrospectionData.ModifiedAt
	retval.ModifiedBy = v.TableIntrospectionData.ModifiedBy
	retval.NumTables = v.TableIntrospectionData.NumTables
	return &retval, nil
}

// DataSourceDataTablesTableConnection includes the requested fields of the GraphQL type TableConnection.
type DataSourceDataTablesTableConnection struct {
	Nodes []DataSourceDataTablesTableConnectionNodesTable `json:"nodes"`
}

// GetNodes returns DataSourceDataTablesTableConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnection) GetNodes() []DataSourceDataTablesTableConnectionNodesTable {
	return v.Nodes
}

// DataSourceDataTablesTableConnectionNodesTable includes the requested fields of the GraphQL type Table.
type DataSourceDataTablesTableConnectionNodesTable struct {
	Name                string                                                                           `json:"name"`
	AvailableTimestamps DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnection `json:"availableTimestamps"`
	AvailableMeasures   DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnection   `json:"availableMeasures"`
}

// GetName returns DataSourceDataTablesTableConnectionNodesTable.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTable) GetName() string { return v.Name }

// GetAvailableTimestamps returns DataSourceDataTablesTableConnectionNodesTable.AvailableTimestamps, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTable) GetAvailableTimestamps() DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnection {
	return v.AvailableTimestamps
}

// GetAvailableMeasures returns DataSourceDataTablesTableConnectionNodesTable.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTable) GetAvailableMeasures() DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnection {
	return v.AvailableMeasures
}

// DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnection struct {
	Nodes []DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnection) GetNodes() []DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn {
	return v.Nodes
}

// DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn struct {
	ColumnData `json:"-"`
}

// GetName returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetName() string {
	return v.ColumnData.Name
}

// GetType returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetType() string {
	return v.ColumnData.Type
}

// GetKind returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetKind() string {
	return v.ColumnData.Kind
}

// GetIsNullable returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.ColumnData.IsNullable
}

// GetDefaultValue returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.ColumnData.DefaultValue
}

// GetIsPrimaryKey returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.ColumnData.IsPrimaryKey
}

// GetIsUniqueKey returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.ColumnData.IsUniqueKey
}

// GetComment returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetComment() string {
	return v.ColumnData.Comment
}

// GetPolicyName returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetPolicyName() string {
	return v.ColumnData.PolicyName
}

// GetCachedAt returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.ColumnData.CachedAt
}

// GetCreatedAt returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.ColumnData.CreatedAt
}

// GetCreatedBy returns DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.ColumnData.CreatedBy
}

func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ColumnData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn) __premarshalJSON() (*__premarshalDataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn, error) {
	var retval __premarshalDataSourceDataTablesTableConnectionNodesTableAvailableMeasuresColumnConnectionNodesColumn

	retval.Name = v.ColumnData.Name
	retval.Type = v.ColumnData.Type
	retval.Kind = v.ColumnData.Kind
	retval.IsNullable = v.ColumnData.IsNullable
	retval.DefaultValue = v.ColumnData.DefaultValue
	retval.IsPrimaryKey = v.ColumnData.IsPrimaryKey
	retval.IsUniqueKey = v.ColumnData.IsUniqueKey
	retval.Comment = v.ColumnData.Comment
	retval.PolicyName = v.ColumnData.PolicyName
	retval.CachedAt = v.ColumnData.CachedAt
	retval.CreatedAt = v.ColumnData.CreatedAt
	retval.CreatedBy = v.ColumnData.CreatedBy
	return &retval, nil
}

// DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnection includes the requested fields of the GraphQL type ColumnConnection.
type DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnection struct {
	Nodes []DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn `json:"nodes"`
}

// GetNodes returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnection.Nodes, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnection) GetNodes() []DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn {
	return v.Nodes
}

// DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn includes the requested fields of the GraphQL type Column.
type DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn struct {
	ColumnData `json:"-"`
}

// GetName returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Name, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetName() string {
	return v.ColumnData.Name
}

// GetType returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Type, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetType() string {
	return v.ColumnData.Type
}

// GetKind returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Kind, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetKind() string {
	return v.ColumnData.Kind
}

// GetIsNullable returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsNullable, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsNullable() bool {
	return v.ColumnData.IsNullable
}

// GetDefaultValue returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.DefaultValue, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetDefaultValue() string {
	return v.ColumnData.DefaultValue
}

// GetIsPrimaryKey returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsPrimaryKey, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsPrimaryKey() bool {
	return v.ColumnData.IsPrimaryKey
}

// GetIsUniqueKey returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetIsUniqueKey() bool {
	return v.ColumnData.IsUniqueKey
}

// GetComment returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.Comment, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetComment() string {
	return v.ColumnData.Comment
}

// GetPolicyName returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.PolicyName, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetPolicyName() string {
	return v.ColumnData.PolicyName
}

// GetCachedAt returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CachedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCachedAt() time.Time {
	return v.ColumnData.CachedAt
}

// GetCreatedAt returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCreatedAt() time.Time {
	return v.ColumnData.CreatedAt
}

// GetCreatedBy returns DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) GetCreatedBy() string {
	return v.ColumnData.CreatedBy
}

func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ColumnData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn struct {
	Name string `json:"name"`

	Type string `json:"type"`

	Kind string `json:"kind"`

	IsNullable bool `json:"isNullable"`

	DefaultValue string `json:"defaultValue"`

	IsPrimaryKey bool `json:"isPrimaryKey"`

	IsUniqueKey bool `json:"isUniqueKey"`

	Comment string `json:"comment"`

	PolicyName string `json:"policyName"`

	CachedAt time.Time `json:"cachedAt"`

	CreatedAt time.Time `json:"createdAt"`

	CreatedBy string `json:"createdBy"`
}

func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn) __premarshalJSON() (*__premarshalDataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn, error) {
	var retval __premarshalDataSourceDataTablesTableConnectionNodesTableAvailableTimestampsColumnConnectionNodesColumn

	retval.Name = v.ColumnData.Name
	retval.Type = v.ColumnData.Type
	retval.Kind = v.ColumnData.Kind
	retval.IsNullable = v.ColumnData.IsNullable
	retval.DefaultValue = v.ColumnData.DefaultValue
	retval.IsPrimaryKey = v.ColumnData.IsPrimaryKey
	retval.IsUniqueKey = v.ColumnData.IsUniqueKey
	retval.Comment = v.ColumnData.Comment
	retval.PolicyName = v.ColumnData.PolicyName
	retval.CachedAt = v.ColumnData.CachedAt
	retval.CreatedAt = v.ColumnData.CreatedAt
	retval.CreatedBy = v.ColumnData.CreatedBy
	return &retval, nil
}

// DataSourceResponse is returned by DataSource on success.
type DataSourceResponse struct {
	DataSource DataSourceDataSource `json:"dataSource"`
}

// GetDataSource returns DataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *DataSourceResponse) GetDataSource() DataSourceDataSource { return v.DataSource }

type DataSourceStatus string

const (
	DataSourceStatusCreated    DataSourceStatus = "CREATED"
	DataSourceStatusConnecting DataSourceStatus = "CONNECTING"
	DataSourceStatusConnected  DataSourceStatus = "CONNECTED"
	DataSourceStatusBroken     DataSourceStatus = "BROKEN"
	DataSourceStatusDeleting   DataSourceStatus = "DELETING"
)

type DataSourceType string

const (
	DataSourceTypeSnowflake DataSourceType = "Snowflake"
)

// DataSourcesDataSourcesDataSourceConnection includes the requested fields of the GraphQL type DataSourceConnection.
type DataSourcesDataSourcesDataSourceConnection struct {
	PageInfo DataSourcesDataSourcesDataSourceConnectionPageInfo              `json:"pageInfo"`
	Edges    []DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge `json:"edges"`
}

// GetPageInfo returns DataSourcesDataSourcesDataSourceConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetPageInfo() DataSourcesDataSourcesDataSourceConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns DataSourcesDataSourcesDataSourceConnection.Edges, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnection) GetEdges() []DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge {
	return v.Edges
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge includes the requested fields of the GraphQL type DataSourceEdge.
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge struct {
	Node DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource `json:"node"`
}

// GetNode returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge.Node, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdge) GetNode() DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource {
	return v.Node
}

// DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource includes the requested fields of the GraphQL type DataSource.
type DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Id, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Type, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Status, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Error, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetError() DataSourceDataError {
	return v.DataSourceData.Error
}

// GetConnectionSettings returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Tables, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTables() DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Checks, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetChecks() []DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetTableIntrospections() DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Description, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Account, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetAccount() CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.Environment, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetEnvironment() CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error DataSourceDataError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables DataSourceDataTablesTableConnection `json:"tables"`

	Checks []DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal DataSourcesDataSourcesDataSourceConnectionEdgesDataSourceEdgeNodeDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// DataSourcesDataSourcesDataSourceConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type DataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	PageInfoData `json:"-"`
}

// GetStartCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetStartCursor() string {
	return v.PageInfoData.StartCursor
}

// GetEndCursor returns DataSourcesDataSourcesDataSourceConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetEndCursor() string {
	return v.PageInfoData.EndCursor
}

// GetHasNextPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoData.HasNextPage
}

// GetHasPreviousPage returns DataSourcesDataSourcesDataSourceConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoData.HasPreviousPage
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DataSourcesDataSourcesDataSourceConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.DataSourcesDataSourcesDataSourceConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo struct {
	StartCursor string `json:"startCursor"`

	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DataSourcesDataSourcesDataSourceConnectionPageInfo) __premarshalJSON() (*__premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo, error) {
	var retval __premarshalDataSourcesDataSourcesDataSourceConnectionPageInfo

	retval.StartCursor = v.PageInfoData.StartCursor
	retval.EndCursor = v.PageInfoData.EndCursor
	retval.HasNextPage = v.PageInfoData.HasNextPage
	retval.HasPreviousPage = v.PageInfoData.HasPreviousPage
	return &retval, nil
}

// DataSourcesResponse is returned by DataSources on success.
type DataSourcesResponse struct {
	DataSources DataSourcesDataSourcesDataSourceConnection `json:"dataSources"`
}

// GetDataSources returns DataSourcesResponse.DataSources, and is useful for accessing the field via an interface.
func (v *DataSourcesResponse) GetDataSources() DataSourcesDataSourcesDataSourceConnection {
	return v.DataSources
}

// DeleteDataPoolByNameResponse is returned by DeleteDataPoolByName on success.
type DeleteDataPoolByNameResponse struct {
	DeleteDataPoolByName string `json:"deleteDataPoolByName"`
}

// GetDeleteDataPoolByName returns DeleteDataPoolByNameResponse.DeleteDataPoolByName, and is useful for accessing the field via an interface.
func (v *DeleteDataPoolByNameResponse) GetDeleteDataPoolByName() string {
	return v.DeleteDataPoolByName
}

// DeleteDataPoolResponse is returned by DeleteDataPool on success.
type DeleteDataPoolResponse struct {
	DeleteDataPool string `json:"deleteDataPool"`
}

// GetDeleteDataPool returns DeleteDataPoolResponse.DeleteDataPool, and is useful for accessing the field via an interface.
func (v *DeleteDataPoolResponse) GetDeleteDataPool() string { return v.DeleteDataPool }

// DeleteDataSourceByNameResponse is returned by DeleteDataSourceByName on success.
type DeleteDataSourceByNameResponse struct {
	DeleteDataSourceByName string `json:"deleteDataSourceByName"`
}

// GetDeleteDataSourceByName returns DeleteDataSourceByNameResponse.DeleteDataSourceByName, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceByNameResponse) GetDeleteDataSourceByName() string {
	return v.DeleteDataSourceByName
}

// DeleteDataSourceResponse is returned by DeleteDataSource on success.
type DeleteDataSourceResponse struct {
	DeleteDataSource string `json:"deleteDataSource"`
}

// GetDeleteDataSource returns DeleteDataSourceResponse.DeleteDataSource, and is useful for accessing the field via an interface.
func (v *DeleteDataSourceResponse) GetDeleteDataSource() string { return v.DeleteDataSource }

// DeleteMetricByNameResponse is returned by DeleteMetricByName on success.
type DeleteMetricByNameResponse struct {
	DeleteMetricByName string `json:"deleteMetricByName"`
}

// GetDeleteMetricByName returns DeleteMetricByNameResponse.DeleteMetricByName, and is useful for accessing the field via an interface.
func (v *DeleteMetricByNameResponse) GetDeleteMetricByName() string { return v.DeleteMetricByName }

// DeleteMetricResponse is returned by DeleteMetric on success.
type DeleteMetricResponse struct {
	DeleteMetric string `json:"deleteMetric"`
}

// GetDeleteMetric returns DeleteMetricResponse.DeleteMetric, and is useful for accessing the field via an interface.
func (v *DeleteMetricResponse) GetDeleteMetric() string { return v.DeleteMetric }

// DimensionData includes the GraphQL fields of Dimension requested by the fragment DimensionData.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type DimensionData struct {
	// The column name it represents.
	ColumnName string `json:"columnName"`
	// The column data type.
	Type string `json:"type"`
	// Whether the column is nullable.
	IsNullable bool `json:"isNullable"`
	// Whether the column is a unique key.
	IsUniqueKey bool `json:"isUniqueKey"`
}

// GetColumnName returns DimensionData.ColumnName, and is useful for accessing the field via an interface.
func (v *DimensionData) GetColumnName() string { return v.ColumnName }

// GetType returns DimensionData.Type, and is useful for accessing the field via an interface.
func (v *DimensionData) GetType() string { return v.Type }

// GetIsNullable returns DimensionData.IsNullable, and is useful for accessing the field via an interface.
func (v *DimensionData) GetIsNullable() bool { return v.IsNullable }

// GetIsUniqueKey returns DimensionData.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *DimensionData) GetIsUniqueKey() bool { return v.IsUniqueKey }

type DimensionInput struct {
	ColumnName string `json:"columnName"`
}

// GetColumnName returns DimensionInput.ColumnName, and is useful for accessing the field via an interface.
func (v *DimensionInput) GetColumnName() string { return v.ColumnName }

// FilterData includes the GraphQL fields of Filter requested by the fragment FilterData.
type FilterData struct {
	Column   string         `json:"column"`
	Operator FilterOperator `json:"operator"`
	Value    string         `json:"value"`
}

// GetColumn returns FilterData.Column, and is useful for accessing the field via an interface.
func (v *FilterData) GetColumn() string { return v.Column }

// GetOperator returns FilterData.Operator, and is useful for accessing the field via an interface.
func (v *FilterData) GetOperator() FilterOperator { return v.Operator }

// GetValue returns FilterData.Value, and is useful for accessing the field via an interface.
func (v *FilterData) GetValue() string { return v.Value }

type FilterInput struct {
	Column   string         `json:"column"`
	Operator FilterOperator `json:"operator"`
	Value    string         `json:"value"`
}

// GetColumn returns FilterInput.Column, and is useful for accessing the field via an interface.
func (v *FilterInput) GetColumn() string { return v.Column }

// GetOperator returns FilterInput.Operator, and is useful for accessing the field via an interface.
func (v *FilterInput) GetOperator() FilterOperator { return v.Operator }

// GetValue returns FilterInput.Value, and is useful for accessing the field via an interface.
func (v *FilterInput) GetValue() string { return v.Value }

type FilterOperator string

const (
	FilterOperatorEquals               FilterOperator = "EQUALS"
	FilterOperatorNotEquals            FilterOperator = "NOT_EQUALS"
	FilterOperatorGreaterThan          FilterOperator = "GREATER_THAN"
	FilterOperatorGreaterThanOrEqualTo FilterOperator = "GREATER_THAN_OR_EQUAL_TO"
	FilterOperatorLessThan             FilterOperator = "LESS_THAN"
	FilterOperatorLessThanOrEqualTo    FilterOperator = "LESS_THAN_OR_EQUAL_TO"
)

// GqlError includes the GraphQL fields of Error requested by the fragment GqlError.
type GqlError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns GqlError.Code, and is useful for accessing the field via an interface.
func (v *GqlError) GetCode() int { return v.Code }

// GetMessage returns GqlError.Message, and is useful for accessing the field via an interface.
func (v *GqlError) GetMessage() string { return v.Message }

type IdOrUniqueName struct {
	Id         string `json:"id"`
	UniqueName string `json:"uniqueName"`
}

// GetId returns IdOrUniqueName.Id, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetId() string { return v.Id }

// GetUniqueName returns IdOrUniqueName.UniqueName, and is useful for accessing the field via an interface.
func (v *IdOrUniqueName) GetUniqueName() string { return v.UniqueName }

// MetricByNameMetric includes the requested fields of the GraphQL type Metric.
type MetricByNameMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricByNameMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetId() string { return v.MetricData.Id }

// GetDataPool returns MetricByNameMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDataPool() MetricDataDataPool { return v.MetricData.DataPool }

// GetDimensions returns MetricByNameMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricByNameMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetTimestamp() MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns MetricByNameMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetMeasure() MetricDataMeasureDimension { return v.MetricData.Measure }

// GetSettings returns MetricByNameMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetType returns MetricByNameMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetType() MetricType { return v.MetricData.Type }

// GetUniqueName returns MetricByNameMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetUniqueName() string { return v.MetricData.CommonDataMetric.UniqueName }

// GetDescription returns MetricByNameMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns MetricByNameMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetAccount() CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns MetricByNameMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricByNameMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetCreatedAt() time.Time { return v.MetricData.CommonDataMetric.CreatedAt }

// GetModifiedAt returns MetricByNameMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns MetricByNameMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetCreatedBy() string { return v.MetricData.CommonDataMetric.CreatedBy }

// GetModifiedBy returns MetricByNameMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricByNameMetric) GetModifiedBy() string { return v.MetricData.CommonDataMetric.ModifiedBy }

func (v *MetricByNameMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricByNameMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricByNameMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricByNameMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricByNameMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricByNameMetric) __premarshalJSON() (*__premarshalMetricByNameMetric, error) {
	var retval __premarshalMetricByNameMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricByNameMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricByNameResponse is returned by MetricByName on success.
type MetricByNameResponse struct {
	Metric MetricByNameMetric `json:"metric"`
}

// GetMetric returns MetricByNameResponse.Metric, and is useful for accessing the field via an interface.
func (v *MetricByNameResponse) GetMetric() MetricByNameMetric { return v.Metric }

// MetricData includes the GraphQL fields of Metric requested by the fragment MetricData.
type MetricData struct {
	CommonDataMetric `json:"-"`
	Id               string `json:"id"`
	// The Data Pool that powers this Metric.
	DataPool   MetricDataDataPool              `json:"dataPool"`
	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`
	Timestamp  MetricDataTimestampDimension    `json:"timestamp"`
	Measure    MetricDataMeasureDimension      `json:"measure"`
	// The settings for the Metric. The settings are specific to the Metric's type.
	Settings MetricDataSettingsMetricSettings `json:"-"`
	// The Metric's type. The different Metric types determine how the values are calculated.
	Type MetricType `json:"type"`
}

// GetId returns MetricData.Id, and is useful for accessing the field via an interface.
func (v *MetricData) GetId() string { return v.Id }

// GetDataPool returns MetricData.DataPool, and is useful for accessing the field via an interface.
func (v *MetricData) GetDataPool() MetricDataDataPool { return v.DataPool }

// GetDimensions returns MetricData.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricData) GetDimensions() []MetricDataDimensionsDimension { return v.Dimensions }

// GetTimestamp returns MetricData.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricData) GetTimestamp() MetricDataTimestampDimension { return v.Timestamp }

// GetMeasure returns MetricData.Measure, and is useful for accessing the field via an interface.
func (v *MetricData) GetMeasure() MetricDataMeasureDimension { return v.Measure }

// GetSettings returns MetricData.Settings, and is useful for accessing the field via an interface.
func (v *MetricData) GetSettings() MetricDataSettingsMetricSettings { return v.Settings }

// GetType returns MetricData.Type, and is useful for accessing the field via an interface.
func (v *MetricData) GetType() MetricType { return v.Type }

// GetUniqueName returns MetricData.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricData) GetUniqueName() string { return v.CommonDataMetric.UniqueName }

// GetDescription returns MetricData.Description, and is useful for accessing the field via an interface.
func (v *MetricData) GetDescription() string { return v.CommonDataMetric.Description }

// GetAccount returns MetricData.Account, and is useful for accessing the field via an interface.
func (v *MetricData) GetAccount() CommonDataAccount { return v.CommonDataMetric.Account }

// GetEnvironment returns MetricData.Environment, and is useful for accessing the field via an interface.
func (v *MetricData) GetEnvironment() CommonDataEnvironment { return v.CommonDataMetric.Environment }

// GetCreatedAt returns MetricData.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricData) GetCreatedAt() time.Time { return v.CommonDataMetric.CreatedAt }

// GetModifiedAt returns MetricData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricData) GetModifiedAt() time.Time { return v.CommonDataMetric.ModifiedAt }

// GetCreatedBy returns MetricData.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricData) GetCreatedBy() string { return v.CommonDataMetric.CreatedBy }

// GetModifiedBy returns MetricData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricData) GetModifiedBy() string { return v.CommonDataMetric.ModifiedBy }

func (v *MetricData) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricData
		Settings json.RawMessage `json:"settings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricData = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CommonDataMetric)
	if err != nil {
		return err
	}

	{
		dst := &v.Settings
		src := firstPass.Settings
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalMetricDataSettingsMetricSettings(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal MetricData.Settings: %w", err)
			}
		}
	}
	return nil
}

type __premarshalMetricData struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricData) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricData) __premarshalJSON() (*__premarshalMetricData, error) {
	var retval __premarshalMetricData

	retval.Id = v.Id
	retval.DataPool = v.DataPool
	retval.Dimensions = v.Dimensions
	retval.Timestamp = v.Timestamp
	retval.Measure = v.Measure
	{

		dst := &retval.Settings
		src := v.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.Type
	retval.UniqueName = v.CommonDataMetric.UniqueName
	retval.Description = v.CommonDataMetric.Description
	retval.Account = v.CommonDataMetric.Account
	retval.Environment = v.CommonDataMetric.Environment
	retval.CreatedAt = v.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricDataDataPool includes the requested fields of the GraphQL type DataPool.
type MetricDataDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns MetricDataDataPool.Id, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetId() string { return v.DataPoolData.Id }

// GetDataSource returns MetricDataDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetDataSource() DataPoolDataDataSource { return v.DataPoolData.DataSource }

// GetStatus returns MetricDataDataPool.Status, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetStatus() DataPoolStatus { return v.DataPoolData.Status }

// GetError returns MetricDataDataPool.Error, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetError() DataPoolDataError { return v.DataPoolData.Error }

// GetTable returns MetricDataDataPool.Table, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetTable() string { return v.DataPoolData.Table }

// GetTimestamp returns MetricDataDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetTimestamp() DataPoolDataTimestampDimension {
	return v.DataPoolData.Timestamp
}

// GetColumns returns MetricDataDataPool.Columns, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetColumns() DataPoolDataColumnsColumnConnection {
	return v.DataPoolData.Columns
}

// GetAvailableMeasures returns MetricDataDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetAvailableMeasures() DataPoolDataAvailableMeasuresColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns MetricDataDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetSetupTasks() []DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns MetricDataDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetSyncs() DataPoolDataSyncsSyncConnection { return v.DataPoolData.Syncs }

// GetUniqueName returns MetricDataDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns MetricDataDataPool.Description, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns MetricDataDataPool.Account, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetAccount() CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns MetricDataDataPool.Environment, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetEnvironment() CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns MetricDataDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns MetricDataDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns MetricDataDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns MetricDataDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricDataDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *MetricDataDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataDataPool struct {
	Id string `json:"id"`

	DataSource DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Timestamp DataPoolDataTimestampDimension `json:"timestamp"`

	Columns DataPoolDataColumnsColumnConnection `json:"columns"`

	AvailableMeasures DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs DataPoolDataSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricDataDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataDataPool) __premarshalJSON() (*__premarshalMetricDataDataPool, error) {
	var retval __premarshalMetricDataDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// MetricDataDimensionsDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataDimensionsDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataDimensionsDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetColumnName() string { return v.DimensionData.ColumnName }

// GetType returns MetricDataDimensionsDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetType() string { return v.DimensionData.Type }

// GetIsNullable returns MetricDataDimensionsDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetIsNullable() bool { return v.DimensionData.IsNullable }

// GetIsUniqueKey returns MetricDataDimensionsDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataDimensionsDimension) GetIsUniqueKey() bool { return v.DimensionData.IsUniqueKey }

func (v *MetricDataDimensionsDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataDimensionsDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataDimensionsDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataDimensionsDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *MetricDataDimensionsDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataDimensionsDimension) __premarshalJSON() (*__premarshalMetricDataDimensionsDimension, error) {
	var retval __premarshalMetricDataDimensionsDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataMeasureDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetColumnName() string { return v.DimensionData.ColumnName }

// GetType returns MetricDataMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetType() string { return v.DimensionData.Type }

// GetIsNullable returns MetricDataMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetIsNullable() bool { return v.DimensionData.IsNullable }

// GetIsUniqueKey returns MetricDataMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataMeasureDimension) GetIsUniqueKey() bool { return v.DimensionData.IsUniqueKey }

func (v *MetricDataMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *MetricDataMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataMeasureDimension) __premarshalJSON() (*__premarshalMetricDataMeasureDimension, error) {
	var retval __premarshalMetricDataMeasureDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataSettingsCountDistinctMetricSettings includes the requested fields of the GraphQL type CountDistinctMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for count distinct Metrics.
type MetricDataSettingsCountDistinctMetricSettings struct {
	Typename string `json:"__typename"`
	// Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included. To filter at query time, add Dimensions and use the `filter` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query-time
	Filters []MetricDataSettingsCountDistinctMetricSettingsFiltersFilter `json:"filters"`
	// The dimension where the count distinct is going to be performed.
	Dimension MetricDataSettingsCountDistinctMetricSettingsDimension `json:"dimension"`
}

// GetTypename returns MetricDataSettingsCountDistinctMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettings) GetTypename() string { return v.Typename }

// GetFilters returns MetricDataSettingsCountDistinctMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettings) GetFilters() []MetricDataSettingsCountDistinctMetricSettingsFiltersFilter {
	return v.Filters
}

// GetDimension returns MetricDataSettingsCountDistinctMetricSettings.Dimension, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettings) GetDimension() MetricDataSettingsCountDistinctMetricSettingsDimension {
	return v.Dimension
}

// MetricDataSettingsCountDistinctMetricSettingsDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataSettingsCountDistinctMetricSettingsDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataSettingsCountDistinctMetricSettingsDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetColumnName() string {
	return v.DimensionData.ColumnName
}

// GetType returns MetricDataSettingsCountDistinctMetricSettingsDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetType() string {
	return v.DimensionData.Type
}

// GetIsNullable returns MetricDataSettingsCountDistinctMetricSettingsDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetIsNullable() bool {
	return v.DimensionData.IsNullable
}

// GetIsUniqueKey returns MetricDataSettingsCountDistinctMetricSettingsDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) GetIsUniqueKey() bool {
	return v.DimensionData.IsUniqueKey
}

func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsCountDistinctMetricSettingsDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsCountDistinctMetricSettingsDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsCountDistinctMetricSettingsDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsCountDistinctMetricSettingsDimension) __premarshalJSON() (*__premarshalMetricDataSettingsCountDistinctMetricSettingsDimension, error) {
	var retval __premarshalMetricDataSettingsCountDistinctMetricSettingsDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataSettingsCountDistinctMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
type MetricDataSettingsCountDistinctMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsCountDistinctMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) GetValue() string {
	return v.FilterData.Value
}

func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsCountDistinctMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsCountDistinctMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsCountDistinctMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value string `json:"value"`
}

func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsCountDistinctMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsCountDistinctMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsCountDistinctMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	return &retval, nil
}

// MetricDataSettingsCountMetricSettings includes the requested fields of the GraphQL type CountMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for count Metrics.
type MetricDataSettingsCountMetricSettings struct {
	Typename string `json:"__typename"`
	// Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included. To filter at query time, add Dimensions and use the `filter` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query-time
	Filters []MetricDataSettingsCountMetricSettingsFiltersFilter `json:"filters"`
}

// GetTypename returns MetricDataSettingsCountMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettings) GetTypename() string { return v.Typename }

// GetFilters returns MetricDataSettingsCountMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettings) GetFilters() []MetricDataSettingsCountMetricSettingsFiltersFilter {
	return v.Filters
}

// MetricDataSettingsCountMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
type MetricDataSettingsCountMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsCountMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsCountMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsCountMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) GetValue() string {
	return v.FilterData.Value
}

func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsCountMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsCountMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsCountMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value string `json:"value"`
}

func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsCountMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsCountMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsCountMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	return &retval, nil
}

// MetricDataSettingsMetricSettings includes the requested fields of the GraphQL interface MetricSettings.
//
// MetricDataSettingsMetricSettings is implemented by the following types:
// MetricDataSettingsCountMetricSettings
// MetricDataSettingsSumMetricSettings
// MetricDataSettingsCountDistinctMetricSettings
// The GraphQL type's documentation follows.
//
// A Metric's settings, depending on its type.
type MetricDataSettingsMetricSettings interface {
	implementsGraphQLInterfaceMetricDataSettingsMetricSettings()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *MetricDataSettingsCountMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsSumMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}
func (v *MetricDataSettingsCountDistinctMetricSettings) implementsGraphQLInterfaceMetricDataSettingsMetricSettings() {
}

func __unmarshalMetricDataSettingsMetricSettings(b []byte, v *MetricDataSettingsMetricSettings) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CountMetricSettings":
		*v = new(MetricDataSettingsCountMetricSettings)
		return json.Unmarshal(b, *v)
	case "SumMetricSettings":
		*v = new(MetricDataSettingsSumMetricSettings)
		return json.Unmarshal(b, *v)
	case "CountDistinctMetricSettings":
		*v = new(MetricDataSettingsCountDistinctMetricSettings)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MetricSettings.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for MetricDataSettingsMetricSettings: "%v"`, tn.TypeName)
	}
}

func __marshalMetricDataSettingsMetricSettings(v *MetricDataSettingsMetricSettings) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *MetricDataSettingsCountMetricSettings:
		typename = "CountMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsCountMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsSumMetricSettings:
		typename = "SumMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsSumMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case *MetricDataSettingsCountDistinctMetricSettings:
		typename = "CountDistinctMetricSettings"

		result := struct {
			TypeName string `json:"__typename"`
			*MetricDataSettingsCountDistinctMetricSettings
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for MetricDataSettingsMetricSettings: "%T"`, v)
	}
}

// MetricDataSettingsSumMetricSettings includes the requested fields of the GraphQL type SumMetricSettings.
// The GraphQL type's documentation follows.
//
// Settings for sum Metrics.
type MetricDataSettingsSumMetricSettings struct {
	Typename string `json:"__typename"`
	// Filters allow defining a Metric with a subset of records from the given Data Pool. If no filters are present, all records will be included. To filter at query time, add Dimensions and use the `filter` property on the `timeSeriesInput`, `counterInput`, or `leaderboardInput` objects. There is no need to add `filters` to be able to filter at query-time
	Filters []MetricDataSettingsSumMetricSettingsFiltersFilter `json:"filters"`
	// The dimension to be summed.
	Measure MetricDataSettingsSumMetricSettingsMeasureDimension `json:"measure"`
}

// GetTypename returns MetricDataSettingsSumMetricSettings.Typename, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettings) GetTypename() string { return v.Typename }

// GetFilters returns MetricDataSettingsSumMetricSettings.Filters, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettings) GetFilters() []MetricDataSettingsSumMetricSettingsFiltersFilter {
	return v.Filters
}

// GetMeasure returns MetricDataSettingsSumMetricSettings.Measure, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettings) GetMeasure() MetricDataSettingsSumMetricSettingsMeasureDimension {
	return v.Measure
}

// MetricDataSettingsSumMetricSettingsFiltersFilter includes the requested fields of the GraphQL type Filter.
type MetricDataSettingsSumMetricSettingsFiltersFilter struct {
	FilterData `json:"-"`
}

// GetColumn returns MetricDataSettingsSumMetricSettingsFiltersFilter.Column, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetColumn() string {
	return v.FilterData.Column
}

// GetOperator returns MetricDataSettingsSumMetricSettingsFiltersFilter.Operator, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetOperator() FilterOperator {
	return v.FilterData.Operator
}

// GetValue returns MetricDataSettingsSumMetricSettingsFiltersFilter.Value, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) GetValue() string {
	return v.FilterData.Value
}

func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsSumMetricSettingsFiltersFilter
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsSumMetricSettingsFiltersFilter = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FilterData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsSumMetricSettingsFiltersFilter struct {
	Column string `json:"column"`

	Operator FilterOperator `json:"operator"`

	Value string `json:"value"`
}

func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsSumMetricSettingsFiltersFilter) __premarshalJSON() (*__premarshalMetricDataSettingsSumMetricSettingsFiltersFilter, error) {
	var retval __premarshalMetricDataSettingsSumMetricSettingsFiltersFilter

	retval.Column = v.FilterData.Column
	retval.Operator = v.FilterData.Operator
	retval.Value = v.FilterData.Value
	return &retval, nil
}

// MetricDataSettingsSumMetricSettingsMeasureDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataSettingsSumMetricSettingsMeasureDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataSettingsSumMetricSettingsMeasureDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetColumnName() string {
	return v.DimensionData.ColumnName
}

// GetType returns MetricDataSettingsSumMetricSettingsMeasureDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetType() string {
	return v.DimensionData.Type
}

// GetIsNullable returns MetricDataSettingsSumMetricSettingsMeasureDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetIsNullable() bool {
	return v.DimensionData.IsNullable
}

// GetIsUniqueKey returns MetricDataSettingsSumMetricSettingsMeasureDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) GetIsUniqueKey() bool {
	return v.DimensionData.IsUniqueKey
}

func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataSettingsSumMetricSettingsMeasureDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataSettingsSumMetricSettingsMeasureDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataSettingsSumMetricSettingsMeasureDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataSettingsSumMetricSettingsMeasureDimension) __premarshalJSON() (*__premarshalMetricDataSettingsSumMetricSettingsMeasureDimension, error) {
	var retval __premarshalMetricDataSettingsSumMetricSettingsMeasureDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricDataTimestampDimension includes the requested fields of the GraphQL type Dimension.
// The GraphQL type's documentation follows.
//
// The Dimension object that represents a column in a table.
type MetricDataTimestampDimension struct {
	DimensionData `json:"-"`
}

// GetColumnName returns MetricDataTimestampDimension.ColumnName, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetColumnName() string { return v.DimensionData.ColumnName }

// GetType returns MetricDataTimestampDimension.Type, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetType() string { return v.DimensionData.Type }

// GetIsNullable returns MetricDataTimestampDimension.IsNullable, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetIsNullable() bool { return v.DimensionData.IsNullable }

// GetIsUniqueKey returns MetricDataTimestampDimension.IsUniqueKey, and is useful for accessing the field via an interface.
func (v *MetricDataTimestampDimension) GetIsUniqueKey() bool { return v.DimensionData.IsUniqueKey }

func (v *MetricDataTimestampDimension) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricDataTimestampDimension
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricDataTimestampDimension = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DimensionData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricDataTimestampDimension struct {
	ColumnName string `json:"columnName"`

	Type string `json:"type"`

	IsNullable bool `json:"isNullable"`

	IsUniqueKey bool `json:"isUniqueKey"`
}

func (v *MetricDataTimestampDimension) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricDataTimestampDimension) __premarshalJSON() (*__premarshalMetricDataTimestampDimension, error) {
	var retval __premarshalMetricDataTimestampDimension

	retval.ColumnName = v.DimensionData.ColumnName
	retval.Type = v.DimensionData.Type
	retval.IsNullable = v.DimensionData.IsNullable
	retval.IsUniqueKey = v.DimensionData.IsUniqueKey
	return &retval, nil
}

// MetricMetric includes the requested fields of the GraphQL type Metric.
type MetricMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetId() string { return v.MetricData.Id }

// GetDataPool returns MetricMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDataPool() MetricDataDataPool { return v.MetricData.DataPool }

// GetDimensions returns MetricMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetTimestamp() MetricDataTimestampDimension { return v.MetricData.Timestamp }

// GetMeasure returns MetricMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetMeasure() MetricDataMeasureDimension { return v.MetricData.Measure }

// GetSettings returns MetricMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetSettings() MetricDataSettingsMetricSettings { return v.MetricData.Settings }

// GetType returns MetricMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetType() MetricType { return v.MetricData.Type }

// GetUniqueName returns MetricMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetUniqueName() string { return v.MetricData.CommonDataMetric.UniqueName }

// GetDescription returns MetricMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetDescription() string { return v.MetricData.CommonDataMetric.Description }

// GetAccount returns MetricMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetAccount() CommonDataAccount { return v.MetricData.CommonDataMetric.Account }

// GetEnvironment returns MetricMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetCreatedAt() time.Time { return v.MetricData.CommonDataMetric.CreatedAt }

// GetModifiedAt returns MetricMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetModifiedAt() time.Time { return v.MetricData.CommonDataMetric.ModifiedAt }

// GetCreatedBy returns MetricMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetCreatedBy() string { return v.MetricData.CommonDataMetric.CreatedBy }

// GetModifiedBy returns MetricMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricMetric) GetModifiedBy() string { return v.MetricData.CommonDataMetric.ModifiedBy }

func (v *MetricMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricMetric) __premarshalJSON() (*__premarshalMetricMetric, error) {
	var retval __premarshalMetricMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricResponse is returned by Metric on success.
type MetricResponse struct {
	Metric MetricMetric `json:"metric"`
}

// GetMetric returns MetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *MetricResponse) GetMetric() MetricMetric { return v.Metric }

type MetricType string

const (
	// Counts the number of records that meet the filter criteria.
	MetricTypeCount MetricType = "COUNT"
	// Sums a specified column for every row that meets the filter criteria.
	MetricTypeSum MetricType = "SUM"
	// Counts the number of different records in the provided column.
	MetricTypeCountDistinct MetricType = "COUNT_DISTINCT"
)

// MetricsMetricsMetricConnection includes the requested fields of the GraphQL type MetricConnection.
type MetricsMetricsMetricConnection struct {
	PageInfo MetricsMetricsMetricConnectionPageInfo          `json:"pageInfo"`
	Nodes    []MetricsMetricsMetricConnectionNodesMetric     `json:"nodes"`
	Edges    []MetricsMetricsMetricConnectionEdgesMetricEdge `json:"edges"`
}

// GetPageInfo returns MetricsMetricsMetricConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetPageInfo() MetricsMetricsMetricConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns MetricsMetricsMetricConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetNodes() []MetricsMetricsMetricConnectionNodesMetric {
	return v.Nodes
}

// GetEdges returns MetricsMetricsMetricConnection.Edges, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnection) GetEdges() []MetricsMetricsMetricConnectionEdgesMetricEdge {
	return v.Edges
}

// MetricsMetricsMetricConnectionEdgesMetricEdge includes the requested fields of the GraphQL type MetricEdge.
type MetricsMetricsMetricConnectionEdgesMetricEdge struct {
	Cursor string                                                  `json:"cursor"`
	Node   MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric `json:"node"`
}

// GetCursor returns MetricsMetricsMetricConnectionEdgesMetricEdge.Cursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdge) GetCursor() string { return v.Cursor }

// GetNode returns MetricsMetricsMetricConnectionEdgesMetricEdge.Node, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdge) GetNode() MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric {
	return v.Node
}

// MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric includes the requested fields of the GraphQL type Metric.
type MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetId() string {
	return v.MetricData.Id
}

// GetDataPool returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDataPool() MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetTimestamp() MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetMeasure() MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetType returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetType() MetricType {
	return v.MetricData.Type
}

// GetUniqueName returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetAccount() CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric, error) {
	var retval __premarshalMetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricsMetricsMetricConnectionEdgesMetricEdgeNodeMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricsMetricsMetricConnectionNodesMetric includes the requested fields of the GraphQL type Metric.
type MetricsMetricsMetricConnectionNodesMetric struct {
	MetricData `json:"-"`
}

// GetId returns MetricsMetricsMetricConnectionNodesMetric.Id, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetId() string { return v.MetricData.Id }

// GetDataPool returns MetricsMetricsMetricConnectionNodesMetric.DataPool, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDataPool() MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns MetricsMetricsMetricConnectionNodesMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns MetricsMetricsMetricConnectionNodesMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetTimestamp() MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns MetricsMetricsMetricConnectionNodesMetric.Measure, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetMeasure() MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns MetricsMetricsMetricConnectionNodesMetric.Settings, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetType returns MetricsMetricsMetricConnectionNodesMetric.Type, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetType() MetricType { return v.MetricData.Type }

// GetUniqueName returns MetricsMetricsMetricConnectionNodesMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns MetricsMetricsMetricConnectionNodesMetric.Description, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns MetricsMetricsMetricConnectionNodesMetric.Account, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetAccount() CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns MetricsMetricsMetricConnectionNodesMetric.Environment, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns MetricsMetricsMetricConnectionNodesMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns MetricsMetricsMetricConnectionNodesMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns MetricsMetricsMetricConnectionNodesMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns MetricsMetricsMetricConnectionNodesMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionNodesMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *MetricsMetricsMetricConnectionNodesMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionNodesMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionNodesMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionNodesMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *MetricsMetricsMetricConnectionNodesMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionNodesMetric) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionNodesMetric, error) {
	var retval __premarshalMetricsMetricsMetricConnectionNodesMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal MetricsMetricsMetricConnectionNodesMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// MetricsMetricsMetricConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type MetricsMetricsMetricConnectionPageInfo struct {
	PageInfoData `json:"-"`
}

// GetStartCursor returns MetricsMetricsMetricConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetStartCursor() string {
	return v.PageInfoData.StartCursor
}

// GetEndCursor returns MetricsMetricsMetricConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetEndCursor() string {
	return v.PageInfoData.EndCursor
}

// GetHasNextPage returns MetricsMetricsMetricConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoData.HasNextPage
}

// GetHasPreviousPage returns MetricsMetricsMetricConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *MetricsMetricsMetricConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoData.HasPreviousPage
}

func (v *MetricsMetricsMetricConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MetricsMetricsMetricConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.MetricsMetricsMetricConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMetricsMetricsMetricConnectionPageInfo struct {
	StartCursor string `json:"startCursor"`

	EndCursor string `json:"endCursor"`

	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *MetricsMetricsMetricConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MetricsMetricsMetricConnectionPageInfo) __premarshalJSON() (*__premarshalMetricsMetricsMetricConnectionPageInfo, error) {
	var retval __premarshalMetricsMetricsMetricConnectionPageInfo

	retval.StartCursor = v.PageInfoData.StartCursor
	retval.EndCursor = v.PageInfoData.EndCursor
	retval.HasNextPage = v.PageInfoData.HasNextPage
	retval.HasPreviousPage = v.PageInfoData.HasPreviousPage
	return &retval, nil
}

// MetricsResponse is returned by Metrics on success.
type MetricsResponse struct {
	Metrics MetricsMetricsMetricConnection `json:"metrics"`
}

// GetMetrics returns MetricsResponse.Metrics, and is useful for accessing the field via an interface.
func (v *MetricsResponse) GetMetrics() MetricsMetricsMetricConnection { return v.Metrics }

type ModifyDataPoolInput struct {
	IdOrUniqueName      IdOrUniqueName `json:"idOrUniqueName"`
	UniqueName          string         `json:"uniqueName"`
	Description         string         `json:"description"`
	DataRetentionInDays int            `json:"dataRetentionInDays"`
	// Employee-only API for updating a Data Pool's syncDestination. If you change this, you need to take care to migrate
	// historical data to the new syncDestination yourself. You will also need to update the Data Pool's Metrics.
	SyncDestination TableLocationInput `json:"syncDestination"`
}

// GetIdOrUniqueName returns ModifyDataPoolInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetIdOrUniqueName() IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifyDataPoolInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns ModifyDataPoolInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetDescription() string { return v.Description }

// GetDataRetentionInDays returns ModifyDataPoolInput.DataRetentionInDays, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetDataRetentionInDays() int { return v.DataRetentionInDays }

// GetSyncDestination returns ModifyDataPoolInput.SyncDestination, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolInput) GetSyncDestination() TableLocationInput { return v.SyncDestination }

// ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse includes the requested fields of the GraphQL interface DataPoolOrFailureResponse.
//
// ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse is implemented by the following types:
// ModifyDataPoolModifyDataPoolDataPoolResponse
// ModifyDataPoolModifyDataPoolFailureResponse
type ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse interface {
	implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse() {
}
func (v *ModifyDataPoolModifyDataPoolFailureResponse) implementsGraphQLInterfaceModifyDataPoolModifyDataPoolDataPoolOrFailureResponse() {
}

func __unmarshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(b []byte, v *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataPoolResponse":
		*v = new(ModifyDataPoolModifyDataPoolDataPoolResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(ModifyDataPoolModifyDataPoolFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataPoolOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(v *ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ModifyDataPoolModifyDataPoolDataPoolResponse:
		typename = "DataPoolResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifyDataPoolModifyDataPoolDataPoolResponse
		}{typename, v}
		return json.Marshal(result)
	case *ModifyDataPoolModifyDataPoolFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifyDataPoolModifyDataPoolFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse: "%T"`, v)
	}
}

// ModifyDataPoolModifyDataPoolDataPoolResponse includes the requested fields of the GraphQL type DataPoolResponse.
type ModifyDataPoolModifyDataPoolDataPoolResponse struct {
	Typename string                                               `json:"__typename"`
	DataPool ModifyDataPoolModifyDataPoolDataPoolResponseDataPool `json:"dataPool"`
}

// GetTypename returns ModifyDataPoolModifyDataPoolDataPoolResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) GetTypename() string { return v.Typename }

// GetDataPool returns ModifyDataPoolModifyDataPoolDataPoolResponse.DataPool, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponse) GetDataPool() ModifyDataPoolModifyDataPoolDataPoolResponseDataPool {
	return v.DataPool
}

// ModifyDataPoolModifyDataPoolDataPoolResponseDataPool includes the requested fields of the GraphQL type DataPool.
type ModifyDataPoolModifyDataPoolDataPoolResponseDataPool struct {
	DataPoolData `json:"-"`
}

// GetId returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Id, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetId() string {
	return v.DataPoolData.Id
}

// GetDataSource returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.DataSource, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetDataSource() DataPoolDataDataSource {
	return v.DataPoolData.DataSource
}

// GetStatus returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Status, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetStatus() DataPoolStatus {
	return v.DataPoolData.Status
}

// GetError returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Error, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetError() DataPoolDataError {
	return v.DataPoolData.Error
}

// GetTable returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Table, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetTable() string {
	return v.DataPoolData.Table
}

// GetTimestamp returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Timestamp, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetTimestamp() DataPoolDataTimestampDimension {
	return v.DataPoolData.Timestamp
}

// GetColumns returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Columns, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetColumns() DataPoolDataColumnsColumnConnection {
	return v.DataPoolData.Columns
}

// GetAvailableMeasures returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.AvailableMeasures, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetAvailableMeasures() DataPoolDataAvailableMeasuresColumnConnection {
	return v.DataPoolData.AvailableMeasures
}

// GetSetupTasks returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.SetupTasks, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetSetupTasks() []DataPoolDataSetupTasksDataPoolSetupTask {
	return v.DataPoolData.SetupTasks
}

// GetSyncs returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Syncs, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetSyncs() DataPoolDataSyncsSyncConnection {
	return v.DataPoolData.Syncs
}

// GetUniqueName returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetUniqueName() string {
	return v.DataPoolData.CommonDataDataPool.UniqueName
}

// GetDescription returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Description, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetDescription() string {
	return v.DataPoolData.CommonDataDataPool.Description
}

// GetAccount returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Account, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetAccount() CommonDataAccount {
	return v.DataPoolData.CommonDataDataPool.Account
}

// GetEnvironment returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.Environment, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetEnvironment() CommonDataEnvironment {
	return v.DataPoolData.CommonDataDataPool.Environment
}

// GetCreatedAt returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetCreatedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.CreatedAt
}

// GetModifiedAt returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetModifiedAt() time.Time {
	return v.DataPoolData.CommonDataDataPool.ModifiedAt
}

// GetCreatedBy returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetCreatedBy() string {
	return v.DataPoolData.CommonDataDataPool.CreatedBy
}

// GetModifiedBy returns ModifyDataPoolModifyDataPoolDataPoolResponseDataPool.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) GetModifiedBy() string {
	return v.DataPoolData.CommonDataDataPool.ModifiedBy
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolModifyDataPoolDataPoolResponseDataPool
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolModifyDataPoolDataPoolResponseDataPool = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataPoolData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool struct {
	Id string `json:"id"`

	DataSource DataPoolDataDataSource `json:"dataSource"`

	Status DataPoolStatus `json:"status"`

	Error DataPoolDataError `json:"error"`

	Table string `json:"table"`

	Timestamp DataPoolDataTimestampDimension `json:"timestamp"`

	Columns DataPoolDataColumnsColumnConnection `json:"columns"`

	AvailableMeasures DataPoolDataAvailableMeasuresColumnConnection `json:"availableMeasures"`

	SetupTasks []DataPoolDataSetupTasksDataPoolSetupTask `json:"setupTasks"`

	Syncs DataPoolDataSyncsSyncConnection `json:"syncs"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolModifyDataPoolDataPoolResponseDataPool) __premarshalJSON() (*__premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool, error) {
	var retval __premarshalModifyDataPoolModifyDataPoolDataPoolResponseDataPool

	retval.Id = v.DataPoolData.Id
	retval.DataSource = v.DataPoolData.DataSource
	retval.Status = v.DataPoolData.Status
	retval.Error = v.DataPoolData.Error
	retval.Table = v.DataPoolData.Table
	retval.Timestamp = v.DataPoolData.Timestamp
	retval.Columns = v.DataPoolData.Columns
	retval.AvailableMeasures = v.DataPoolData.AvailableMeasures
	retval.SetupTasks = v.DataPoolData.SetupTasks
	retval.Syncs = v.DataPoolData.Syncs
	retval.UniqueName = v.DataPoolData.CommonDataDataPool.UniqueName
	retval.Description = v.DataPoolData.CommonDataDataPool.Description
	retval.Account = v.DataPoolData.CommonDataDataPool.Account
	retval.Environment = v.DataPoolData.CommonDataDataPool.Environment
	retval.CreatedAt = v.DataPoolData.CommonDataDataPool.CreatedAt
	retval.ModifiedAt = v.DataPoolData.CommonDataDataPool.ModifiedAt
	retval.CreatedBy = v.DataPoolData.CommonDataDataPool.CreatedBy
	retval.ModifiedBy = v.DataPoolData.CommonDataDataPool.ModifiedBy
	return &retval, nil
}

// ModifyDataPoolModifyDataPoolFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type ModifyDataPoolModifyDataPoolFailureResponse struct {
	Typename string                                           `json:"__typename"`
	Error    ModifyDataPoolModifyDataPoolFailureResponseError `json:"error"`
}

// GetTypename returns ModifyDataPoolModifyDataPoolFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponse) GetTypename() string { return v.Typename }

// GetError returns ModifyDataPoolModifyDataPoolFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponse) GetError() ModifyDataPoolModifyDataPoolFailureResponseError {
	return v.Error
}

// ModifyDataPoolModifyDataPoolFailureResponseError includes the requested fields of the GraphQL type Error.
type ModifyDataPoolModifyDataPoolFailureResponseError struct {
	GqlError `json:"-"`
}

// GetCode returns ModifyDataPoolModifyDataPoolFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponseError) GetCode() int { return v.GqlError.Code }

// GetMessage returns ModifyDataPoolModifyDataPoolFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolModifyDataPoolFailureResponseError) GetMessage() string {
	return v.GqlError.Message
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolModifyDataPoolFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolModifyDataPoolFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyDataPoolModifyDataPoolFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolModifyDataPoolFailureResponseError) __premarshalJSON() (*__premarshalModifyDataPoolModifyDataPoolFailureResponseError, error) {
	var retval __premarshalModifyDataPoolModifyDataPoolFailureResponseError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

// ModifyDataPoolResponse is returned by ModifyDataPool on success.
type ModifyDataPoolResponse struct {
	ModifyDataPool ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse `json:"-"`
}

// GetModifyDataPool returns ModifyDataPoolResponse.ModifyDataPool, and is useful for accessing the field via an interface.
func (v *ModifyDataPoolResponse) GetModifyDataPool() ModifyDataPoolModifyDataPoolDataPoolOrFailureResponse {
	return v.ModifyDataPool
}

func (v *ModifyDataPoolResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyDataPoolResponse
		ModifyDataPool json.RawMessage `json:"modifyDataPool"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyDataPoolResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ModifyDataPool
		src := firstPass.ModifyDataPool
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ModifyDataPoolResponse.ModifyDataPool: %w", err)
			}
		}
	}
	return nil
}

type __premarshalModifyDataPoolResponse struct {
	ModifyDataPool json.RawMessage `json:"modifyDataPool"`
}

func (v *ModifyDataPoolResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyDataPoolResponse) __premarshalJSON() (*__premarshalModifyDataPoolResponse, error) {
	var retval __premarshalModifyDataPoolResponse

	{

		dst := &retval.ModifyDataPool
		src := v.ModifyDataPool
		var err error
		*dst, err = __marshalModifyDataPoolModifyDataPoolDataPoolOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifyDataPoolResponse.ModifyDataPool: %w", err)
		}
	}
	return &retval, nil
}

type ModifyMetricInput struct {
	Metric      string `json:"metric"`
	UniqueName  string `json:"uniqueName"`
	Description string `json:"description"`
	// Employee-only API for updating a Metric's querySource.
	QuerySource TableLocationInput `json:"querySource"`
}

// GetMetric returns ModifyMetricInput.Metric, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetMetric() string { return v.Metric }

// GetUniqueName returns ModifyMetricInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns ModifyMetricInput.Description, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetDescription() string { return v.Description }

// GetQuerySource returns ModifyMetricInput.QuerySource, and is useful for accessing the field via an interface.
func (v *ModifyMetricInput) GetQuerySource() TableLocationInput { return v.QuerySource }

// ModifyMetricModifyMetricMetricResponse includes the requested fields of the GraphQL type MetricResponse.
type ModifyMetricModifyMetricMetricResponse struct {
	Typename string                                       `json:"__typename"`
	Metric   ModifyMetricModifyMetricMetricResponseMetric `json:"metric"`
}

// GetTypename returns ModifyMetricModifyMetricMetricResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponse) GetTypename() string { return v.Typename }

// GetMetric returns ModifyMetricModifyMetricMetricResponse.Metric, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponse) GetMetric() ModifyMetricModifyMetricMetricResponseMetric {
	return v.Metric
}

// ModifyMetricModifyMetricMetricResponseMetric includes the requested fields of the GraphQL type Metric.
type ModifyMetricModifyMetricMetricResponseMetric struct {
	MetricData `json:"-"`
}

// GetId returns ModifyMetricModifyMetricMetricResponseMetric.Id, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetId() string { return v.MetricData.Id }

// GetDataPool returns ModifyMetricModifyMetricMetricResponseMetric.DataPool, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDataPool() MetricDataDataPool {
	return v.MetricData.DataPool
}

// GetDimensions returns ModifyMetricModifyMetricMetricResponseMetric.Dimensions, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDimensions() []MetricDataDimensionsDimension {
	return v.MetricData.Dimensions
}

// GetTimestamp returns ModifyMetricModifyMetricMetricResponseMetric.Timestamp, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetTimestamp() MetricDataTimestampDimension {
	return v.MetricData.Timestamp
}

// GetMeasure returns ModifyMetricModifyMetricMetricResponseMetric.Measure, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetMeasure() MetricDataMeasureDimension {
	return v.MetricData.Measure
}

// GetSettings returns ModifyMetricModifyMetricMetricResponseMetric.Settings, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetSettings() MetricDataSettingsMetricSettings {
	return v.MetricData.Settings
}

// GetType returns ModifyMetricModifyMetricMetricResponseMetric.Type, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetType() MetricType { return v.MetricData.Type }

// GetUniqueName returns ModifyMetricModifyMetricMetricResponseMetric.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetUniqueName() string {
	return v.MetricData.CommonDataMetric.UniqueName
}

// GetDescription returns ModifyMetricModifyMetricMetricResponseMetric.Description, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetDescription() string {
	return v.MetricData.CommonDataMetric.Description
}

// GetAccount returns ModifyMetricModifyMetricMetricResponseMetric.Account, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetAccount() CommonDataAccount {
	return v.MetricData.CommonDataMetric.Account
}

// GetEnvironment returns ModifyMetricModifyMetricMetricResponseMetric.Environment, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetEnvironment() CommonDataEnvironment {
	return v.MetricData.CommonDataMetric.Environment
}

// GetCreatedAt returns ModifyMetricModifyMetricMetricResponseMetric.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetCreatedAt() time.Time {
	return v.MetricData.CommonDataMetric.CreatedAt
}

// GetModifiedAt returns ModifyMetricModifyMetricMetricResponseMetric.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetModifiedAt() time.Time {
	return v.MetricData.CommonDataMetric.ModifiedAt
}

// GetCreatedBy returns ModifyMetricModifyMetricMetricResponseMetric.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetCreatedBy() string {
	return v.MetricData.CommonDataMetric.CreatedBy
}

// GetModifiedBy returns ModifyMetricModifyMetricMetricResponseMetric.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifyMetricModifyMetricMetricResponseMetric) GetModifiedBy() string {
	return v.MetricData.CommonDataMetric.ModifiedBy
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifyMetricModifyMetricMetricResponseMetric
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifyMetricModifyMetricMetricResponseMetric = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MetricData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifyMetricModifyMetricMetricResponseMetric struct {
	Id string `json:"id"`

	DataPool MetricDataDataPool `json:"dataPool"`

	Dimensions []MetricDataDimensionsDimension `json:"dimensions"`

	Timestamp MetricDataTimestampDimension `json:"timestamp"`

	Measure MetricDataMeasureDimension `json:"measure"`

	Settings json.RawMessage `json:"settings"`

	Type MetricType `json:"type"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifyMetricModifyMetricMetricResponseMetric) __premarshalJSON() (*__premarshalModifyMetricModifyMetricMetricResponseMetric, error) {
	var retval __premarshalModifyMetricModifyMetricMetricResponseMetric

	retval.Id = v.MetricData.Id
	retval.DataPool = v.MetricData.DataPool
	retval.Dimensions = v.MetricData.Dimensions
	retval.Timestamp = v.MetricData.Timestamp
	retval.Measure = v.MetricData.Measure
	{

		dst := &retval.Settings
		src := v.MetricData.Settings
		var err error
		*dst, err = __marshalMetricDataSettingsMetricSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifyMetricModifyMetricMetricResponseMetric.MetricData.Settings: %w", err)
		}
	}
	retval.Type = v.MetricData.Type
	retval.UniqueName = v.MetricData.CommonDataMetric.UniqueName
	retval.Description = v.MetricData.CommonDataMetric.Description
	retval.Account = v.MetricData.CommonDataMetric.Account
	retval.Environment = v.MetricData.CommonDataMetric.Environment
	retval.CreatedAt = v.MetricData.CommonDataMetric.CreatedAt
	retval.ModifiedAt = v.MetricData.CommonDataMetric.ModifiedAt
	retval.CreatedBy = v.MetricData.CommonDataMetric.CreatedBy
	retval.ModifiedBy = v.MetricData.CommonDataMetric.ModifiedBy
	return &retval, nil
}

// ModifyMetricResponse is returned by ModifyMetric on success.
type ModifyMetricResponse struct {
	ModifyMetric ModifyMetricModifyMetricMetricResponse `json:"modifyMetric"`
}

// GetModifyMetric returns ModifyMetricResponse.ModifyMetric, and is useful for accessing the field via an interface.
func (v *ModifyMetricResponse) GetModifyMetric() ModifyMetricModifyMetricMetricResponse {
	return v.ModifyMetric
}

type ModifySnowflakeDataSourceInput struct {
	IdOrUniqueName     IdOrUniqueName                          `json:"idOrUniqueName"`
	UniqueName         string                                  `json:"uniqueName"`
	Description        string                                  `json:"description"`
	ConnectionSettings PartialSnowflakeConnectionSettingsInput `json:"connectionSettings"`
}

// GetIdOrUniqueName returns ModifySnowflakeDataSourceInput.IdOrUniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetIdOrUniqueName() IdOrUniqueName { return v.IdOrUniqueName }

// GetUniqueName returns ModifySnowflakeDataSourceInput.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetUniqueName() string { return v.UniqueName }

// GetDescription returns ModifySnowflakeDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetDescription() string { return v.Description }

// GetConnectionSettings returns ModifySnowflakeDataSourceInput.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceInput) GetConnectionSettings() PartialSnowflakeConnectionSettingsInput {
	return v.ConnectionSettings
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse includes the requested fields of the GraphQL interface DataSourceOrFailureResponse.
//
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse is implemented by the following types:
// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse interface {
	implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) implementsGraphQLInterfaceModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse() {
}

func __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(b []byte, v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DataSourceResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse)
		return json.Unmarshal(b, *v)
	case "FailureResponse":
		*v = new(ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DataSourceOrFailureResponse.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%v"`, tn.TypeName)
	}
}

func __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse:
		typename = "DataSourceResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse
		}{typename, v}
		return json.Marshal(result)
	case *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse:
		typename = "FailureResponse"

		result := struct {
			TypeName string `json:"__typename"`
			*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse: "%T"`, v)
	}
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse includes the requested fields of the GraphQL type DataSourceResponse.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse struct {
	Typename   string                                                                         `json:"__typename"`
	DataSource ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource `json:"dataSource"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetTypename() string {
	return v.Typename
}

// GetDataSource returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse.DataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponse) GetDataSource() ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource {
	return v.DataSource
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource includes the requested fields of the GraphQL type DataSource.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	DataSourceData `json:"-"`
}

// GetId returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Id, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetId() string {
	return v.DataSourceData.Id
}

// GetType returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Type, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetType() DataSourceType {
	return v.DataSourceData.Type
}

// GetStatus returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Status, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetStatus() DataSourceStatus {
	return v.DataSourceData.Status
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetError() DataSourceDataError {
	return v.DataSourceData.Error
}

// GetConnectionSettings returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ConnectionSettings, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetConnectionSettings() DataSourceDataConnectionSettings {
	return v.DataSourceData.ConnectionSettings
}

// GetTables returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Tables, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTables() DataSourceDataTablesTableConnection {
	return v.DataSourceData.Tables
}

// GetChecks returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Checks, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetChecks() []DataSourceDataChecksDataSourceCheck {
	return v.DataSourceData.Checks
}

// GetTableIntrospections returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.TableIntrospections, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetTableIntrospections() DataSourceDataTableIntrospectionsTableIntrospectionConnection {
	return v.DataSourceData.TableIntrospections
}

// GetUniqueName returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.UniqueName, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetUniqueName() string {
	return v.DataSourceData.CommonDataDataSource.UniqueName
}

// GetDescription returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Description, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetDescription() string {
	return v.DataSourceData.CommonDataDataSource.Description
}

// GetAccount returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Account, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetAccount() CommonDataAccount {
	return v.DataSourceData.CommonDataDataSource.Account
}

// GetEnvironment returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.Environment, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetEnvironment() CommonDataEnvironment {
	return v.DataSourceData.CommonDataDataSource.Environment
}

// GetCreatedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.CreatedAt
}

// GetModifiedAt returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedAt, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedAt() time.Time {
	return v.DataSourceData.CommonDataDataSource.ModifiedAt
}

// GetCreatedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.CreatedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetCreatedBy() string {
	return v.DataSourceData.CommonDataDataSource.CreatedBy
}

// GetModifiedBy returns ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.ModifiedBy, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) GetModifiedBy() string {
	return v.DataSourceData.CommonDataDataSource.ModifiedBy
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DataSourceData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource struct {
	Id string `json:"id"`

	Type DataSourceType `json:"type"`

	Status DataSourceStatus `json:"status"`

	Error DataSourceDataError `json:"error"`

	ConnectionSettings json.RawMessage `json:"connectionSettings"`

	Tables DataSourceDataTablesTableConnection `json:"tables"`

	Checks []DataSourceDataChecksDataSourceCheck `json:"checks"`

	TableIntrospections DataSourceDataTableIntrospectionsTableIntrospectionConnection `json:"tableIntrospections"`

	UniqueName string `json:"uniqueName"`

	Description string `json:"description"`

	Account CommonDataAccount `json:"account"`

	Environment CommonDataEnvironment `json:"environment"`

	CreatedAt time.Time `json:"createdAt"`

	ModifiedAt time.Time `json:"modifiedAt"`

	CreatedBy string `json:"createdBy"`

	ModifiedBy string `json:"modifiedBy"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource

	retval.Id = v.DataSourceData.Id
	retval.Type = v.DataSourceData.Type
	retval.Status = v.DataSourceData.Status
	retval.Error = v.DataSourceData.Error
	{

		dst := &retval.ConnectionSettings
		src := v.DataSourceData.ConnectionSettings
		var err error
		*dst, err = __marshalDataSourceDataConnectionSettings(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceResponseDataSource.DataSourceData.ConnectionSettings: %w", err)
		}
	}
	retval.Tables = v.DataSourceData.Tables
	retval.Checks = v.DataSourceData.Checks
	retval.TableIntrospections = v.DataSourceData.TableIntrospections
	retval.UniqueName = v.DataSourceData.CommonDataDataSource.UniqueName
	retval.Description = v.DataSourceData.CommonDataDataSource.Description
	retval.Account = v.DataSourceData.CommonDataDataSource.Account
	retval.Environment = v.DataSourceData.CommonDataDataSource.Environment
	retval.CreatedAt = v.DataSourceData.CommonDataDataSource.CreatedAt
	retval.ModifiedAt = v.DataSourceData.CommonDataDataSource.ModifiedAt
	retval.CreatedBy = v.DataSourceData.CommonDataDataSource.CreatedBy
	retval.ModifiedBy = v.DataSourceData.CommonDataDataSource.ModifiedBy
	return &retval, nil
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse includes the requested fields of the GraphQL type FailureResponse.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse struct {
	Typename string                                                                 `json:"__typename"`
	Error    ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError `json:"error"`
}

// GetTypename returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Typename, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetTypename() string {
	return v.Typename
}

// GetError returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse.Error, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponse) GetError() ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError {
	return v.Error
}

// ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError includes the requested fields of the GraphQL type Error.
type ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	GqlError `json:"-"`
}

// GetCode returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Code, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetCode() int {
	return v.GqlError.Code
}

// GetMessage returns ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError.Message, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) GetMessage() string {
	return v.GqlError.Message
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.GqlError)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError struct {
	Code int `json:"code"`

	Message string `json:"message"`
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError, error) {
	var retval __premarshalModifySnowflakeDataSourceModifySnowflakeDataSourceFailureResponseError

	retval.Code = v.GqlError.Code
	retval.Message = v.GqlError.Message
	return &retval, nil
}

// ModifySnowflakeDataSourceResponse is returned by ModifySnowflakeDataSource on success.
type ModifySnowflakeDataSourceResponse struct {
	ModifySnowflakeDataSource ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse `json:"-"`
}

// GetModifySnowflakeDataSource returns ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource, and is useful for accessing the field via an interface.
func (v *ModifySnowflakeDataSourceResponse) GetModifySnowflakeDataSource() ModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse {
	return v.ModifySnowflakeDataSource
}

func (v *ModifySnowflakeDataSourceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ModifySnowflakeDataSourceResponse
		ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ModifySnowflakeDataSourceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ModifySnowflakeDataSource
		src := firstPass.ModifySnowflakeDataSource
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
			}
		}
	}
	return nil
}

type __premarshalModifySnowflakeDataSourceResponse struct {
	ModifySnowflakeDataSource json.RawMessage `json:"modifySnowflakeDataSource"`
}

func (v *ModifySnowflakeDataSourceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ModifySnowflakeDataSourceResponse) __premarshalJSON() (*__premarshalModifySnowflakeDataSourceResponse, error) {
	var retval __premarshalModifySnowflakeDataSourceResponse

	{

		dst := &retval.ModifySnowflakeDataSource
		src := v.ModifySnowflakeDataSource
		var err error
		*dst, err = __marshalModifySnowflakeDataSourceModifySnowflakeDataSourceDataSourceOrFailureResponse(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ModifySnowflakeDataSourceResponse.ModifySnowflakeDataSource: %w", err)
		}
	}
	return &retval, nil
}

// PageInfoData includes the GraphQL fields of PageInfo requested by the fragment PageInfoData.
type PageInfoData struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
}

// GetStartCursor returns PageInfoData.StartCursor, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetStartCursor() string { return v.StartCursor }

// GetEndCursor returns PageInfoData.EndCursor, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetEndCursor() string { return v.EndCursor }

// GetHasNextPage returns PageInfoData.HasNextPage, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns PageInfoData.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *PageInfoData) GetHasPreviousPage() bool { return v.HasPreviousPage }

type PartialSnowflakeConnectionSettingsInput struct {
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

// GetAccount returns PartialSnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetAccount() string { return v.Account }

// GetDatabase returns PartialSnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetDatabase() string { return v.Database }

// GetWarehouse returns PartialSnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetWarehouse() string { return v.Warehouse }

// GetSchema returns PartialSnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetSchema() string { return v.Schema }

// GetUsername returns PartialSnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetUsername() string { return v.Username }

// GetPassword returns PartialSnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetPassword() string { return v.Password }

// GetRole returns PartialSnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *PartialSnowflakeConnectionSettingsInput) GetRole() string { return v.Role }

type SnowflakeConnectionSettingsInput struct {
	Account   string `json:"account"`
	Database  string `json:"database"`
	Warehouse string `json:"warehouse"`
	Schema    string `json:"schema"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

// GetAccount returns SnowflakeConnectionSettingsInput.Account, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetAccount() string { return v.Account }

// GetDatabase returns SnowflakeConnectionSettingsInput.Database, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetDatabase() string { return v.Database }

// GetWarehouse returns SnowflakeConnectionSettingsInput.Warehouse, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetWarehouse() string { return v.Warehouse }

// GetSchema returns SnowflakeConnectionSettingsInput.Schema, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetSchema() string { return v.Schema }

// GetUsername returns SnowflakeConnectionSettingsInput.Username, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetUsername() string { return v.Username }

// GetPassword returns SnowflakeConnectionSettingsInput.Password, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetPassword() string { return v.Password }

// GetRole returns SnowflakeConnectionSettingsInput.Role, and is useful for accessing the field via an interface.
func (v *SnowflakeConnectionSettingsInput) GetRole() string { return v.Role }

// SyncData includes the GraphQL fields of Sync requested by the fragment SyncData.
type SyncData struct {
	// The ID of the Sync resource.
	Id string `json:"id"`
	// This is the ID of the query which generated the Sync in Snowflake. In the future, this will become private.
	QueryId string `json:"queryId"`
	// The status of the Sync (all Syncs begin as SYNCING before transitioning to SUCCEEDED or FAILED).
	Status SyncStatus `json:"status"`
	// The number of new records contained within the Sync, if known. This excludes filtered records.
	NewRecords string `json:"newRecords"`
	// The number of updated records contained within the Sync, if known. This excludes filtered records.
	UpdatedRecords string `json:"updatedRecords"`
	// The number of deleted records contained within the Sync, if known. This excludes filtered records.
	DeletedRecords string `json:"deletedRecords"`
	// The number of filtered records contained within the Sync, due to issues such as missing time dimension, if
	// known.
	InvalidRecords string `json:"invalidRecords"`
	// The time at which the Sync started.
	StartedAt time.Time `json:"startedAt"`
	// The time at which the Sync succeeded.
	SucceededAt time.Time `json:"succeededAt"`
	// The time at which the Sync failed.
	FailedAt time.Time `json:"failedAt"`
	// If the Sync failed, this represents the reason the Sync failed.
	Error      SyncDataError `json:"error"`
	CreatedAt  time.Time     `json:"createdAt"`
	CreatedBy  string        `json:"createdBy"`
	ModifiedAt time.Time     `json:"modifiedAt"`
	ModifiedBy string        `json:"modifiedBy"`
}

// GetId returns SyncData.Id, and is useful for accessing the field via an interface.
func (v *SyncData) GetId() string { return v.Id }

// GetQueryId returns SyncData.QueryId, and is useful for accessing the field via an interface.
func (v *SyncData) GetQueryId() string { return v.QueryId }

// GetStatus returns SyncData.Status, and is useful for accessing the field via an interface.
func (v *SyncData) GetStatus() SyncStatus { return v.Status }

// GetNewRecords returns SyncData.NewRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetNewRecords() string { return v.NewRecords }

// GetUpdatedRecords returns SyncData.UpdatedRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetUpdatedRecords() string { return v.UpdatedRecords }

// GetDeletedRecords returns SyncData.DeletedRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetDeletedRecords() string { return v.DeletedRecords }

// GetInvalidRecords returns SyncData.InvalidRecords, and is useful for accessing the field via an interface.
func (v *SyncData) GetInvalidRecords() string { return v.InvalidRecords }

// GetStartedAt returns SyncData.StartedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetStartedAt() time.Time { return v.StartedAt }

// GetSucceededAt returns SyncData.SucceededAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetSucceededAt() time.Time { return v.SucceededAt }

// GetFailedAt returns SyncData.FailedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetFailedAt() time.Time { return v.FailedAt }

// GetError returns SyncData.Error, and is useful for accessing the field via an interface.
func (v *SyncData) GetError() SyncDataError { return v.Error }

// GetCreatedAt returns SyncData.CreatedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns SyncData.CreatedBy, and is useful for accessing the field via an interface.
func (v *SyncData) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedAt returns SyncData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *SyncData) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetModifiedBy returns SyncData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *SyncData) GetModifiedBy() string { return v.ModifiedBy }

// SyncDataError includes the requested fields of the GraphQL type Error.
type SyncDataError struct {
	Message string `json:"message"`
}

// GetMessage returns SyncDataError.Message, and is useful for accessing the field via an interface.
func (v *SyncDataError) GetMessage() string { return v.Message }

type SyncStatus string

const (
	// We are actively syncing records contained within the Sync.
	SyncStatusSyncing SyncStatus = "SYNCING"
	// We successfully synced all records contained within the Sync.
	SyncStatusSucceeded SyncStatus = "SUCCEEDED"
	// We failed to sync some or all records contained within the Sync.
	SyncStatusFailed SyncStatus = "FAILED"
	// We are deleting the Sync.
	SyncStatusDeleting SyncStatus = "DELETING"
)

// TableIntrospectionData includes the GraphQL fields of TableIntrospection requested by the fragment TableIntrospectionData.
type TableIntrospectionData struct {
	DataSource TableIntrospectionDataDataSource `json:"dataSource"`
	Status     TableIntrospectionStatus         `json:"status"`
	CreatedAt  time.Time                        `json:"createdAt"`
	CreatedBy  string                           `json:"createdBy"`
	ModifiedAt time.Time                        `json:"modifiedAt"`
	ModifiedBy string                           `json:"modifiedBy"`
	NumTables  int                              `json:"numTables"`
}

// GetDataSource returns TableIntrospectionData.DataSource, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetDataSource() TableIntrospectionDataDataSource {
	return v.DataSource
}

// GetStatus returns TableIntrospectionData.Status, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetStatus() TableIntrospectionStatus { return v.Status }

// GetCreatedAt returns TableIntrospectionData.CreatedAt, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCreatedBy returns TableIntrospectionData.CreatedBy, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetCreatedBy() string { return v.CreatedBy }

// GetModifiedAt returns TableIntrospectionData.ModifiedAt, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetModifiedAt() time.Time { return v.ModifiedAt }

// GetModifiedBy returns TableIntrospectionData.ModifiedBy, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetModifiedBy() string { return v.ModifiedBy }

// GetNumTables returns TableIntrospectionData.NumTables, and is useful for accessing the field via an interface.
func (v *TableIntrospectionData) GetNumTables() int { return v.NumTables }

// TableIntrospectionDataDataSource includes the requested fields of the GraphQL type DataSource.
type TableIntrospectionDataDataSource struct {
	Id string `json:"id"`
}

// GetId returns TableIntrospectionDataDataSource.Id, and is useful for accessing the field via an interface.
func (v *TableIntrospectionDataDataSource) GetId() string { return v.Id }

type TableIntrospectionStatus string

const (
	TableIntrospectionStatusNotStarted TableIntrospectionStatus = "NOT_STARTED"
	TableIntrospectionStatusStarted    TableIntrospectionStatus = "STARTED"
	TableIntrospectionStatusSucceeded  TableIntrospectionStatus = "SUCCEEDED"
	TableIntrospectionStatusFailed     TableIntrospectionStatus = "FAILED"
)

// Override the TableLocation to sync a Data Pool to. Optional fields have sensible defaults.
type TableLocationInput struct {
	// The name of the table.
	Table string `json:"table"`
}

// GetTable returns TableLocationInput.Table, and is useful for accessing the field via an interface.
func (v *TableLocationInput) GetTable() string { return v.Table }

// __CreateCountDistinctMetricInput is used internally by genqlient
type __CreateCountDistinctMetricInput struct {
	Input CreateCountDistinctMetricInput `json:"input"`
}

// GetInput returns __CreateCountDistinctMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCountDistinctMetricInput) GetInput() CreateCountDistinctMetricInput { return v.Input }

// __CreateCountMetricInput is used internally by genqlient
type __CreateCountMetricInput struct {
	Input CreateCountMetricInput `json:"input"`
}

// GetInput returns __CreateCountMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateCountMetricInput) GetInput() CreateCountMetricInput { return v.Input }

// __CreateDataPoolInput is used internally by genqlient
type __CreateDataPoolInput struct {
	Input CreateDataPoolInput `json:"input"`
}

// GetInput returns __CreateDataPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateDataPoolInput) GetInput() CreateDataPoolInput { return v.Input }

// __CreateSnowflakeDataSourceInput is used internally by genqlient
type __CreateSnowflakeDataSourceInput struct {
	Input CreateSnowflakeDataSourceInput `json:"input"`
}

// GetInput returns __CreateSnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSnowflakeDataSourceInput) GetInput() CreateSnowflakeDataSourceInput { return v.Input }

// __CreateSumMetricInput is used internally by genqlient
type __CreateSumMetricInput struct {
	Input CreateSumMetricInput `json:"input"`
}

// GetInput returns __CreateSumMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSumMetricInput) GetInput() CreateSumMetricInput { return v.Input }

// __DataPoolByNameInput is used internally by genqlient
type __DataPoolByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DataPoolByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DataPoolByNameInput) GetUniqueName() string { return v.UniqueName }

// __DataPoolInput is used internally by genqlient
type __DataPoolInput struct {
	Id string `json:"id"`
}

// GetId returns __DataPoolInput.Id, and is useful for accessing the field via an interface.
func (v *__DataPoolInput) GetId() string { return v.Id }

// __DataPoolsInput is used internally by genqlient
type __DataPoolsInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns __DataPoolsInput.First, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetFirst() int { return v.First }

// GetLast returns __DataPoolsInput.Last, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetLast() int { return v.Last }

// GetAfter returns __DataPoolsInput.After, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetAfter() string { return v.After }

// GetBefore returns __DataPoolsInput.Before, and is useful for accessing the field via an interface.
func (v *__DataPoolsInput) GetBefore() string { return v.Before }

// __DataSourceByNameInput is used internally by genqlient
type __DataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DataSourceInput is used internally by genqlient
type __DataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DataSourceInput) GetId() string { return v.Id }

// __DataSourcesInput is used internally by genqlient
type __DataSourcesInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns __DataSourcesInput.First, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetFirst() int { return v.First }

// GetLast returns __DataSourcesInput.Last, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetLast() int { return v.Last }

// GetAfter returns __DataSourcesInput.After, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetAfter() string { return v.After }

// GetBefore returns __DataSourcesInput.Before, and is useful for accessing the field via an interface.
func (v *__DataSourcesInput) GetBefore() string { return v.Before }

// __DeleteDataPoolByNameInput is used internally by genqlient
type __DeleteDataPoolByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteDataPoolByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteDataPoolByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteDataPoolInput is used internally by genqlient
type __DeleteDataPoolInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataPoolInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataPoolInput) GetId() string { return v.Id }

// __DeleteDataSourceByNameInput is used internally by genqlient
type __DeleteDataSourceByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteDataSourceByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteDataSourceInput is used internally by genqlient
type __DeleteDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteDataSourceInput) GetId() string { return v.Id }

// __DeleteMetricByNameInput is used internally by genqlient
type __DeleteMetricByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __DeleteMetricByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__DeleteMetricByNameInput) GetUniqueName() string { return v.UniqueName }

// __DeleteMetricInput is used internally by genqlient
type __DeleteMetricInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteMetricInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteMetricInput) GetId() string { return v.Id }

// __MetricByNameInput is used internally by genqlient
type __MetricByNameInput struct {
	UniqueName string `json:"uniqueName"`
}

// GetUniqueName returns __MetricByNameInput.UniqueName, and is useful for accessing the field via an interface.
func (v *__MetricByNameInput) GetUniqueName() string { return v.UniqueName }

// __MetricInput is used internally by genqlient
type __MetricInput struct {
	Id string `json:"id"`
}

// GetId returns __MetricInput.Id, and is useful for accessing the field via an interface.
func (v *__MetricInput) GetId() string { return v.Id }

// __MetricsInput is used internally by genqlient
type __MetricsInput struct {
	First  int    `json:"first"`
	Last   int    `json:"last"`
	After  string `json:"after"`
	Before string `json:"before"`
}

// GetFirst returns __MetricsInput.First, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetFirst() int { return v.First }

// GetLast returns __MetricsInput.Last, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetLast() int { return v.Last }

// GetAfter returns __MetricsInput.After, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetAfter() string { return v.After }

// GetBefore returns __MetricsInput.Before, and is useful for accessing the field via an interface.
func (v *__MetricsInput) GetBefore() string { return v.Before }

// __ModifyDataPoolInput is used internally by genqlient
type __ModifyDataPoolInput struct {
	Input ModifyDataPoolInput `json:"input"`
}

// GetInput returns __ModifyDataPoolInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyDataPoolInput) GetInput() ModifyDataPoolInput { return v.Input }

// __ModifyMetricInput is used internally by genqlient
type __ModifyMetricInput struct {
	Input ModifyMetricInput `json:"input"`
}

// GetInput returns __ModifyMetricInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifyMetricInput) GetInput() ModifyMetricInput { return v.Input }

// __ModifySnowflakeDataSourceInput is used internally by genqlient
type __ModifySnowflakeDataSourceInput struct {
	Input ModifySnowflakeDataSourceInput `json:"input"`
}

// GetInput returns __ModifySnowflakeDataSourceInput.Input, and is useful for accessing the field via an interface.
func (v *__ModifySnowflakeDataSourceInput) GetInput() ModifySnowflakeDataSourceInput { return v.Input }

func CreateCountDistinctMetric(
	ctx context.Context,
	client graphql.Client,
	input CreateCountDistinctMetricInput,
) (*CreateCountDistinctMetricResponse, error) {
	__input := __CreateCountDistinctMetricInput{
		Input: input,
	}
	var err error

	var retval CreateCountDistinctMetricResponse
	err = client.MakeRequest(
		ctx,
		"CreateCountDistinctMetric",
		`
mutation CreateCountDistinctMetric ($input: CreateCountDistinctMetricInput) {
	createCountDistinctMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
	}
	type
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateCountMetric(
	ctx context.Context,
	client graphql.Client,
	input CreateCountMetricInput,
) (*CreateCountMetricResponse, error) {
	__input := __CreateCountMetricInput{
		Input: input,
	}
	var err error

	var retval CreateCountMetricResponse
	err = client.MakeRequest(
		ctx,
		"CreateCountMetric",
		`
mutation CreateCountMetric ($input: CreateCountMetricInput) {
	createCountMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
	}
	type
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateDataPool(
	ctx context.Context,
	client graphql.Client,
	input CreateDataPoolInput,
) (*CreateDataPoolResponse, error) {
	__input := __CreateDataPoolInput{
		Input: input,
	}
	var err error

	var retval CreateDataPoolResponse
	err = client.MakeRequest(
		ctx,
		"CreateDataPool",
		`
mutation CreateDataPool ($input: createDataPoolInput!) {
	createDataPool(input: $input) {
		__typename
		... on DataPoolResponse {
			dataPool {
				... DataPoolData
			}
		}
		... on FailureResponse {
			error {
				... GqlError
			}
		}
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment GqlError on Error {
	code
	message
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateSnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input CreateSnowflakeDataSourceInput,
) (*CreateSnowflakeDataSourceResponse, error) {
	__input := __CreateSnowflakeDataSourceInput{
		Input: input,
	}
	var err error

	var retval CreateSnowflakeDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"CreateSnowflakeDataSource",
		`
mutation CreateSnowflakeDataSource ($input: createSnowflakeDataSourceInput!) {
	createSnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... DataSourceData
			}
		}
		... on FailureResponse {
			error {
				... GqlError
			}
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment GqlError on Error {
	code
	message
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func CreateSumMetric(
	ctx context.Context,
	client graphql.Client,
	input CreateSumMetricInput,
) (*CreateSumMetricResponse, error) {
	__input := __CreateSumMetricInput{
		Input: input,
	}
	var err error

	var retval CreateSumMetricResponse
	err = client.MakeRequest(
		ctx,
		"CreateSumMetric",
		`
mutation CreateSumMetric ($input: CreateSumMetricInput) {
	createSumMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
	}
	type
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataPool(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataPoolResponse, error) {
	__input := __DataPoolInput{
		Id: id,
	}
	var err error

	var retval DataPoolResponse
	err = client.MakeRequest(
		ctx,
		"DataPool",
		`
query DataPool ($id: ID!) {
	dataPool(id: $id) {
		... DataPoolData
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataPoolByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DataPoolByNameResponse, error) {
	__input := __DataPoolByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DataPoolByNameResponse
	err = client.MakeRequest(
		ctx,
		"DataPoolByName",
		`
query DataPoolByName ($uniqueName: String!) {
	dataPool: dataPoolByName(uniqueName: $uniqueName) {
		... DataPoolData
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataPools(
	ctx context.Context,
	client graphql.Client,
	first int,
	last int,
	after string,
	before string,
) (*DataPoolsResponse, error) {
	__input := __DataPoolsInput{
		First:  first,
		Last:   last,
		After:  after,
		Before: before,
	}
	var err error

	var retval DataPoolsResponse
	err = client.MakeRequest(
		ctx,
		"DataPools",
		`
query DataPools ($first: Int, $last: Int, $after: String, $before: String) {
	dataPools(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... PageInfoData
		}
		edges {
			node {
				... DataPoolData
			}
		}
	}
}
fragment PageInfoData on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DataSourceResponse, error) {
	__input := __DataSourceInput{
		Id: id,
	}
	var err error

	var retval DataSourceResponse
	err = client.MakeRequest(
		ctx,
		"DataSource",
		`
query DataSource ($id: ID!) {
	dataSource(id: $id) {
		... DataSourceData
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DataSourceByNameResponse, error) {
	__input := __DataSourceByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DataSourceByNameResponse
	err = client.MakeRequest(
		ctx,
		"DataSourceByName",
		`
query DataSourceByName ($uniqueName: String!) {
	dataSource: dataSourceByName(uniqueName: $uniqueName) {
		... DataSourceData
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DataSources(
	ctx context.Context,
	client graphql.Client,
	first int,
	last int,
	after string,
	before string,
) (*DataSourcesResponse, error) {
	__input := __DataSourcesInput{
		First:  first,
		Last:   last,
		After:  after,
		Before: before,
	}
	var err error

	var retval DataSourcesResponse
	err = client.MakeRequest(
		ctx,
		"DataSources",
		`
query DataSources ($first: Int, $last: Int, $after: String, $before: String) {
	dataSources(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... PageInfoData
		}
		edges {
			node {
				... DataSourceData
			}
		}
	}
}
fragment PageInfoData on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataPool(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataPoolResponse, error) {
	__input := __DeleteDataPoolInput{
		Id: id,
	}
	var err error

	var retval DeleteDataPoolResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataPool",
		`
mutation DeleteDataPool ($id: ID!) {
	deleteDataPool(id: $id)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataPoolByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteDataPoolByNameResponse, error) {
	__input := __DeleteDataPoolByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DeleteDataPoolByNameResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataPoolByName",
		`
mutation DeleteDataPoolByName ($uniqueName: String!) {
	deleteDataPoolByName(uniqueName: $uniqueName)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteDataSourceResponse, error) {
	__input := __DeleteDataSourceInput{
		Id: id,
	}
	var err error

	var retval DeleteDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataSource",
		`
mutation DeleteDataSource ($id: ID!) {
	deleteDataSource(id: $id)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteDataSourceByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteDataSourceByNameResponse, error) {
	__input := __DeleteDataSourceByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DeleteDataSourceByNameResponse
	err = client.MakeRequest(
		ctx,
		"DeleteDataSourceByName",
		`
mutation DeleteDataSourceByName ($uniqueName: String!) {
	deleteDataSourceByName(uniqueName: $uniqueName)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteMetric(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteMetricResponse, error) {
	__input := __DeleteMetricInput{
		Id: id,
	}
	var err error

	var retval DeleteMetricResponse
	err = client.MakeRequest(
		ctx,
		"DeleteMetric",
		`
mutation DeleteMetric ($id: ID!) {
	deleteMetric(id: $id)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func DeleteMetricByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*DeleteMetricByNameResponse, error) {
	__input := __DeleteMetricByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval DeleteMetricByNameResponse
	err = client.MakeRequest(
		ctx,
		"DeleteMetricByName",
		`
mutation DeleteMetricByName ($uniqueName: String!) {
	deleteMetricByName(uniqueName: $uniqueName)
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func Metric(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*MetricResponse, error) {
	__input := __MetricInput{
		Id: id,
	}
	var err error

	var retval MetricResponse
	err = client.MakeRequest(
		ctx,
		"Metric",
		`
query Metric ($id: ID!) {
	metric(id: $id) {
		... MetricData
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
	}
	type
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func MetricByName(
	ctx context.Context,
	client graphql.Client,
	uniqueName string,
) (*MetricByNameResponse, error) {
	__input := __MetricByNameInput{
		UniqueName: uniqueName,
	}
	var err error

	var retval MetricByNameResponse
	err = client.MakeRequest(
		ctx,
		"MetricByName",
		`
query MetricByName ($uniqueName: String!) {
	metric: metricByName(uniqueName: $uniqueName) {
		... MetricData
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
	}
	type
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func Metrics(
	ctx context.Context,
	client graphql.Client,
	first int,
	last int,
	after string,
	before string,
) (*MetricsResponse, error) {
	__input := __MetricsInput{
		First:  first,
		Last:   last,
		After:  after,
		Before: before,
	}
	var err error

	var retval MetricsResponse
	err = client.MakeRequest(
		ctx,
		"Metrics",
		`
query Metrics ($first: Int, $last: Int, $after: String, $before: String) {
	metrics(first: $first, last: $last, after: $after, before: $before) {
		pageInfo {
			... PageInfoData
		}
		nodes {
			... MetricData
		}
		edges {
			cursor
			node {
				... MetricData
			}
		}
	}
}
fragment PageInfoData on PageInfo {
	startCursor
	endCursor
	hasNextPage
	hasPreviousPage
}
fragment MetricData on Metric {
	... CommonData
	id
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
	}
	type
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func ModifyDataPool(
	ctx context.Context,
	client graphql.Client,
	input ModifyDataPoolInput,
) (*ModifyDataPoolResponse, error) {
	__input := __ModifyDataPoolInput{
		Input: input,
	}
	var err error

	var retval ModifyDataPoolResponse
	err = client.MakeRequest(
		ctx,
		"ModifyDataPool",
		`
mutation ModifyDataPool ($input: modifyDataPoolInput!) {
	modifyDataPool(input: $input) {
		__typename
		... on DataPoolResponse {
			dataPool {
				... DataPoolData
			}
		}
		... on FailureResponse {
			error {
				... GqlError
			}
		}
	}
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment GqlError on Error {
	code
	message
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func ModifyMetric(
	ctx context.Context,
	client graphql.Client,
	input ModifyMetricInput,
) (*ModifyMetricResponse, error) {
	__input := __ModifyMetricInput{
		Input: input,
	}
	var err error

	var retval ModifyMetricResponse
	err = client.MakeRequest(
		ctx,
		"ModifyMetric",
		`
mutation ModifyMetric ($input: ModifyMetricInput) {
	modifyMetric(input: $input) {
		__typename
		metric {
			... MetricData
		}
	}
}
fragment MetricData on Metric {
	... CommonData
	id
	dataPool {
		... DataPoolData
	}
	dimensions {
		... DimensionData
	}
	timestamp {
		... DimensionData
	}
	measure {
		... DimensionData
	}
	settings {
		__typename
		... on CountMetricSettings {
			__typename
			filters {
				... FilterData
			}
		}
		... on SumMetricSettings {
			__typename
			filters {
				... FilterData
			}
			measure {
				... DimensionData
			}
		}
		... on CountDistinctMetricSettings {
			__typename
			filters {
				... FilterData
			}
			dimension {
				... DimensionData
			}
		}
	}
	type
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment DataPoolData on DataPool {
	id
	... CommonData
	dataSource {
		... DataSourceData
	}
	status
	error {
		message
	}
	table
	timestamp {
		... DimensionData
	}
	columns {
		nodes {
			... ColumnData
		}
	}
	availableMeasures {
		nodes {
			... ColumnData
		}
	}
	setupTasks {
		name
		description
		status
		error {
			code
			message
		}
		completedAt
	}
	syncs {
		nodes {
			... SyncData
		}
	}
}
fragment DimensionData on Dimension {
	columnName
	type
	isNullable
	isUniqueKey
}
fragment FilterData on Filter {
	column
	operator
	value
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment SyncData on Sync {
	id
	queryId
	status
	newRecords
	updatedRecords
	deletedRecords
	invalidRecords
	startedAt
	succeededAt
	failedAt
	error {
		message
	}
	createdAt
	createdBy
	modifiedAt
	modifiedBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func ModifySnowflakeDataSource(
	ctx context.Context,
	client graphql.Client,
	input ModifySnowflakeDataSourceInput,
) (*ModifySnowflakeDataSourceResponse, error) {
	__input := __ModifySnowflakeDataSourceInput{
		Input: input,
	}
	var err error

	var retval ModifySnowflakeDataSourceResponse
	err = client.MakeRequest(
		ctx,
		"ModifySnowflakeDataSource",
		`
mutation ModifySnowflakeDataSource ($input: modifySnowflakeDataSourceInput!) {
	modifySnowflakeDataSource(input: $input) {
		__typename
		... on DataSourceResponse {
			dataSource {
				... DataSourceData
			}
		}
		... on FailureResponse {
			error {
				... GqlError
			}
		}
	}
}
fragment DataSourceData on DataSource {
	id
	... CommonData
	type
	status
	error {
		message
	}
	connectionSettings {
		__typename
		... on SnowflakeConnectionSettings {
			account
			database
			warehouse
			schema
			username
			role
		}
	}
	tables(first: 100) {
		nodes {
			name
			availableTimestamps(first: 100) {
				nodes {
					... ColumnData
				}
			}
			availableMeasures(first: 100) {
				nodes {
					... ColumnData
				}
			}
		}
	}
	checks {
		name
		description
		status
		error {
			code
			message
		}
		checkedAt
	}
	tableIntrospections(first: 100) {
		nodes {
			... TableIntrospectionData
		}
	}
}
fragment GqlError on Error {
	code
	message
}
fragment CommonData on Common {
	uniqueName
	description
	account {
		id
	}
	environment {
		id
	}
	createdAt
	modifiedAt
	createdBy
	modifiedBy
}
fragment ColumnData on Column {
	name
	type
	kind
	isNullable
	defaultValue
	isPrimaryKey
	isUniqueKey
	comment
	policyName
	cachedAt
	createdAt
	createdBy
}
fragment TableIntrospectionData on TableIntrospection {
	dataSource {
		id
	}
	status
	createdAt
	createdBy
	modifiedAt
	modifiedBy
	numTables
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
